{"version":3,"sources":["images/DocumentationImages/geneSummaryPlot.png","context/SearchContext.js","context/PageContext.js","styles/colors.js","styles/SearchHeaderStyles.js","Components/Search/NavBar.js","Components/Search/List.js","queries/dataset.js","utils/createAllSubsets.js","utils/containsAll.js","utils/dataTypesList.js","Components/Search/SearchBar.js","queries/search.js","Components/Search/SearchHeader.js","Components/Search/BurgerMenu.js","Components/UtilComponents/Layout.js","Components/IndividualComponents/IndivDatasets/PharmacoGx/PharmacoGxDescription.js","Components/IndividualComponents/IndivDatasets/datasets.js","Components/IndividualComponents/IndivDatasets/PharmacoGx/PharmacoGx.js","Components/About/AboutUs/AboutUsDescription.js","Components/About/AboutUs/AboutUs.js","queries/compound.js","queries/gene.js","queries/tissue.js","queries/gene_compound.js","utils/convertToTitleCase.js","styles/utils.js","styles/IndivPageStyles.js","Components/UtilComponents/Table/TableStyle.js","utils/maxWidthOfAnElement.js","Components/UtilComponents/Table/Table.js","utils/createSvgCanvas.js","utils/toolTip.js","Components/UtilComponents/CustomSwitch.js","utils/convertMDataType.js","Components/Plots/ForestPlot.js","Components/UtilComponents/Loading.js","Components/UtilComponents/DownloadButton.js","Components/Plots/ManhattanPlot.js","Components/UtilComponents/Error.js","styles/plot_colors.js","Components/Biomarker/ManhattanPlotContainer.js","Components/Biomarker/Biomarker.js","Components/Plots/BarPlot.js","Components/SummaryComponents/Compounds/Compounds.js","queries/cell.js","Components/Plots/PieChart.js","Components/SummaryComponents/Tissues/TissueCellsPieChart.js","Components/SummaryComponents/CellLines/CellLines.js","Components/About/CiteUs/CiteUsDescription.js","Components/About/CiteUs/CiteUs.js","styles/Utils/StyledSelectorContainer.js","Components/Plots/UpsetPlot.js","Components/IntersectionComponents/DatasetIntersection/RenderUpsetPlot.js","Components/IntersectionComponents/DatasetIntersection/CreateSetsWithData.js","Components/Plots/VennDiagram.js","Components/IntersectionComponents/DatasetIntersection/DatasetIntersection.js","Components/SummaryComponents/Datasets/Datasets.js","styles/DocumentationStyles.js","Components/About/Documentation/Documentations/DocOverview.js","Components/About/Documentation/Documentations/DocSearch.js","Components/About/Documentation/Documentations/DocDataset.js","Components/About/Documentation/Documentations/DocTissue.js","Components/About/Documentation/Documentations/DocCell.js","Components/About/Documentation/Documentations/DocExperiment.js","Components/About/Documentation/Documentations/DocGene.js","Components/About/Documentation/Documentations/DocDrug.js","Components/About/Documentation/Documentations/DocCellVsDrug.js","Components/About/Documentation/Documentations/DocTissueVsDrug.js","Components/About/Documentation/Documentations/DocBiomarker.js","Components/About/Documentation/DocDescription.js","Components/About/Documentation/Documentation.js","styles/dataset_colors.js","styles/PlotsWrapper.js","Components/Plots/DatasetHorizontalPlot.js","Components/SummaryComponents/Experiments/Experiments.js","queries/target.js","Components/SummaryComponents/Genes/GenesPlot.js","Components/SummaryComponents/Genes/GenesTable.js","Components/SummaryComponents/Genes/Genes.js","Components/Home/Description.js","queries/stat.js","Components/Home/Stats.js","Components/Home/Home.js","Components/UtilComponents/NotFoundPage.js","queries/experiments.js","utils/statistics.js","utils/plotProcessing.js","Components/Plots/ProfileCellLine.js","Components/Plots/ProfileTissue.js","Components/IndividualComponents/IndivCompounds/PlotSection.js","utils/generateSelectOptions.js","Components/Plots/ProfileCompound.js","Components/IndividualComponents/IndivCompounds/Tables/CellLinesSummaryTable.js","Components/IndividualComponents/IndivCompounds/Tables/TissuesSummaryTable.js","Components/IndividualComponents/IndivCompounds/Tables/MolecularFeaturesTable.js","Components/IndividualComponents/IndivCompounds/Tables/AnnotatedTargetsTable.js","Components/IndividualComponents/IndivCompounds/IndivCompounds.js","Components/IndividualComponents/IndivCellLines/PlotSection.js","Components/IndividualComponents/IndivCellLines/Tables/CompoundsSummaryTable.js","queries/molecular_profiling.js","Components/IndividualComponents/IndivCellLines/Tables/MolecularProfilingTable.js","Components/IndividualComponents/IndivCellLines/IndivCellLines.js","Components/IndividualComponents/IndivTissues/PlotSection.js","Components/IndividualComponents/IndivTissues/Tables/CellLineSummaryTable.js","Components/IndividualComponents/IndivTissues/Tables/DrugSummaryTable.js","Components/IndividualComponents/IndivTissues/IndivTissues.js","Components/IndividualComponents/IndivGenes/PlotSection.js","Components/IndividualComponents/IndivGenes/Tables/CompoundsSummaryTable.js","Components/IndividualComponents/IndivGenes/Tables/TopDrugsTable.js","Components/IndividualComponents/IndivGenes/Description.js","Components/IndividualComponents/IndivGenes/IndivGenes.js","Components/IndividualComponents/IndivDatasets/PlotSection.js","Components/IndividualComponents/IndivDatasets/Tables/CellLineSummaryTable.js","Components/IndividualComponents/IndivDatasets/Tables/CompoundsSummaryTable.js","Components/IndividualComponents/IndivDatasets/IndivDatasets.js","Components/SummaryComponents/Tissues/Tissues.js","utils/doseResponseCurveHelper.js","utils/useExpIntersection.js","Components/UtilComponents/Checkbox.js","Components/Plots/DoseResponseCurve.js","styles/IntersectionComponentStyles.js","Components/IntersectionComponents/IntersectionTableCell.js","Components/IntersectionComponents/CellLineCompound/CellLineCompoundTable.js","Components/IntersectionComponents/CellLineCompound/CellLineCompound.js","Components/IntersectionComponents/TissueCompound/TissueCompoundTable.js","Components/IntersectionComponents/TissueCompound/TissueCompound.js","Components/IntersectionComponents/IntersectionMain.js","styles/GlobalStyles.js","App.js","index.js","images/DocumentationImages/pieChart.png","images/pharmacodb-logo.png","images/magnif-glass.png","images/DocumentationImages/cellSearch.png","images/DocumentationImages/cellSummaryList.png","images/pharmacodb-logo-dark.png","images/bg.webp","images/DocumentationImages/exmpMCF-7.png","images/DocumentationImages/exmpBreast.png","images/DocumentationImages/exmpPaclitaxel.png","images/DocumentationImages/exmpMCF-7Paclitaxel.png","images/download.webp","images/x-circle-fill.svg","images/DocumentationImages/pharmacodb-logo-capsule.png","images/DocumentationImages/datasetsIntersection.png","images/DocumentationImages/cellDrugSearch.png","images/DocumentationImages/drugTissueSearch.png","images/DocumentationImages/homeNav.png","images/DocumentationImages/datasetSearch.png","images/DocumentationImages/homeDatasets.png","images/DocumentationImages/datasetUpsetPlot.png","images/DocumentationImages/datasetList.png","images/DocumentationImages/datasetInd.png","images/DocumentationImages/datasetResource.png","images/DocumentationImages/datasetDType.png","images/DocumentationImages/datasetIndBarA.png","images/DocumentationImages/datasetIndBarB.png","images/DocumentationImages/DatasetCellList.png","images/DocumentationImages/DatasetDrugList.png","images/DocumentationImages/tissueSearch.png","images/DocumentationImages/homeTissues.png","images/DocumentationImages/tissueList.png","images/DocumentationImages/bone_annot.png","images/DocumentationImages/tissueIndBar.png","images/DocumentationImages/tissueCellList.png","images/DocumentationImages/tissueDrugSummary.png","images/DocumentationImages/homeCellLines.png","images/DocumentationImages/cellIndBar.png","images/DocumentationImages/cellline_hela_summary.png","images/DocumentationImages/cellline_hela_aac.png","images/DocumentationImages/cellline_hela_molprof.png","images/DocumentationImages/homeExperiments.png","images/DocumentationImages/experimentsBars.png","images/DocumentationImages/homeGenes.png","images/DocumentationImages/genes_targets.png","images/DocumentationImages/geneSummaryList.png","images/DocumentationImages/homeCompounds.png","images/DocumentationImages/drugSummaryBar.png","images/DocumentationImages/drugIndivBar.png","images/DocumentationImages/pacli_aac_celllines.png","images/DocumentationImages/drugAACTissue.png","images/DocumentationImages/drugIndCells.png","images/DocumentationImages/drugIndTissues.png","images/DocumentationImages/drugSearch.png","images/DocumentationImages/pacli_synonym.png","images/DocumentationImages/pacli_target.png","images/DocumentationImages/mcf-7PacliSearch.png","images/DocumentationImages/mcf_pacli_plot.png","images/DocumentationImages/mcf7_pacli_table.png","images/DocumentationImages/tissuebreast_drugpacli.png","images/DocumentationImages/breast_pacli_plot 3.16.23 PM.png","images/DocumentationImages/breast_pacli_table.png","images/DocumentationImages/geneCompoundSearch.png","images/DocumentationImages/geneCompoundTissueSearch.png","images/DocumentationImages/biomarker_comp.png","images/DocumentationImages/biomarker_forest.png","images/DocumentationImages/biomarker_gene.png","images/DocumentationImages/biomarker_manhattan.png","images/desc-dosecurves.webp","images/compound.webp","images/cell.webp","images/dataset.webp","images/experiment.webp","images/gene.webp","images/tissue.webp","images/close.png"],"names":["module","exports","PageContext","createContext","blur","noscroll","setBlur","setNoscroll","blue","dark_gray_text","dark_pink_highlight","light_pink_highlight","dark_teal_heading","dark_yellow_highlight","dark_blue","green","light_blue","light_blue_bg","light_blue_header","light_teal","light_teal_highlight","teal","pale_teal","white_smoke","pale_tint","silver","light_pink","gray_header","StyledSearchHeader","styled","div","props","page","bg","colors","StyledNavBar","StyledLinkDropdowns","SearchBarStyles","button","control","provided","background","borderRadius","height","fontFamily","fontSize","color","padding","marginBottom","border","cursor","outline","boxShadow","input","clearIndicator","dropdownIndicator","display","indicatorSeparator","singleValue","multiValue","marginRight","multiValueLabel","option","textAlign","fontWeight","margin","NavBar","onClick","popupVisible","useContext","useState","setIsOpen","SearchContext","useEffect","dropdownItems","data","map","x","Dropdown","Item","key","name","to","url","className","alt","src","logoDark","logoLight","text","simple","Menu","href","target","style","styles","MenuList","options","children","maxHeight","getValue","value","initialOffset","indexOf","length","itemCount","itemSize","initialScrollOffset","isLoading","index","renderData","getDatasetStatsQuery","gql","getDatasetsQuery","getDatasetTestedCellsQuery","getDatasetTestedCompoundsQuery","getTypeInformationAllDatasetsQuery","createAllSubsets","set","setSize","powSetSize","parseInt","Math","pow","finalSubsets","counter","subset","j","push","containsAll","inputArray","checkValues","every","el","includes","dataTypes","i","placeholders","CustomOption","innerProps","Option","isDisabled","label","transformData","transformedData","typesVisited","forEach","type","toUpperCase","replace","id","getSelectionDataBasedOnInput","fetch","method","headers","body","JSON","stringify","query","variables","json","then","response","finalResponse","search","catch","err","console","log","createRedirectURL","selection","datasets","split","join","dataTypesList","createSingleSelectionURL","selectedTypes","tissue","compound","cell_line","gene","createURLForTwoSelections","createURLForThreeSelections","withRouter","isMenuOpen","setIsMenuOpen","selectedElement","setSelectedElementState","useQuery","datasetsData","error","loading","datasetIntersections","toString","replaceAll","filter","selectionOptions","debounce","callback","matchedDatasetIntersections","regex","RegExp","match","searchIntersectionOfDatasets","components","placeholder","speed","typingDelay","eraseDelay","isMulti","cacheOptions","loadOptions","onKeyDown","event","history","queryParams","noOptionsMessage","onChange","onInputChange","onMenuClose","menuIsOpen","SearchHeader","isOpen","e","BurgerMenu","bmBurgerButton","position","width","right","top","bmBurgerBars","opacity","bmCrossButton","bmCross","bmMenuWrap","bmMenu","bmItemList","flexDirection","bmItem","bmOverlay","noOverlay","disableAutoFocus","Layout","s","Provider","Helmet","charAt","slice","defaultProps","StyledDescription","PharmacoGxDescription","dataset","Fragment","1","acr","acr_ref","des","resource","urlextern","pub","title","dtype","platform","raw","processed","2","3","4","5","6","7","8","9","10","StyledCiteUs","PharmacoGx","params","smooth","AboutUsDescription","React","showCell","setShowCell","showTissue","setShowTissue","showDrug","setShowDrug","showDDRC","setShowDDRC","selected","cellExmp","tissueExmp","drugExmp","cellDrugExmp","align","allowFullScreen","StyledAboutUs","AboutUs","getCompoundsQuery","getCompoundQuery","getGenesQuery","getGeneQuery","getTissuesQuery","getTissueIdBasedOnTissueName","getTissueQuery","geneCompound","getGeneCompoundDatasetQuery","getGeneCompoundTissueDatasetQuery","getTissueSpecificManhattanPlotDataQuery","getPanCancerManhattanPlotDataQuery","convertToTitleCase","string","splitBy","Error","capitalString","str","StyledWrapper","propTypes","individual","PropTypes","bool","summary","StyledIndivPage","StyledIndivPageTitle","span","smalltxt","StyledSidebarList","ul","TableStyles","showPageNumSelect","getMaxWidth","windowInnerWidth","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","count","setValue","useAsyncDebounce","undefined","searchIcon","Table","columns","disablePagination","defaultSort","highlightRows","showHeader","useTable","initialState","pageIndex","sortBy","useGlobalFilter","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","canPreviousPage","canNextPage","pageOptions","gotoPage","nextPage","previousPage","setPageSize","state","pageSize","TableStyle","maxWidth","window","innerWidth","Number","headerGroup","getHeaderGroupProps","column","getHeaderProps","getSortByToggleProps","colSpan","rowSpan","render","isSorted","isSortedDesc","mergedCols","col","merged","values","item","accessor","mergedValues","Set","rendered","row","original","getRowProps","cells","cell","find","center","getCellProps","renderRows","disabled","defaultMargin","bottom","left","defaultWidth","defaultHeight","createSvgCanvas","canvasId","select","append","attr","createToolTip","CustomSwitchContainer","StyledCustomSwitch","Switch","CustomSwitch","checked","labelLeft","labelRight","onColor","onHandleColor","uncheckedIcon","checkedIcon","convertMDataType","mDataType","test","mDataTypeList","rna_sequence","rnaseq","rna_microarray","rna","microarray","cnv","mutation","StyledForestPlot","legend","createFilteredData","mouseOverEvent","element","isAnalytic","toolTip","d3","pageX","pageY","black","white","fdr","fdr_analytic","fdr_permutation","pc","upper_analytic","upper_permutation","mouseOutEvent","remove","createForestPlot","heightInput","svg","min","val","estimate","max","lower","upper","calculateMinMax","minN","n","maxN","calculateMinMaxN","xScale","updatedMin","domain","range","nice","createXScale","circleScale","circleScaling","scale","call","createXAxis","createVerticalLine","horizontal","on","createHorizontalLines","circles","createCircles","appendEstimateText","appendDatasetName","appendFdrText","legends","legendText","createLegend","ForestPlot","isPermutedAvailable","lower_permutation","isAnalyticAvailable","lower_analytic","initialAnalyticValueState","setAnalyticValue","molecularType","setMolecularType","updatedData","permutation_done","sens_stat","significant_permutation","parseFloat","toExponential","pvalue","pvalue_analytic","pvalue_permutation","updateData","dataTypeMapping","updateDataBasedOnTypeMapping","mDataTypeMapping","mDataTypes","getAllDataTypes","filteredData","selectAll","enter","d","this","property","createSelectionOptions","marginTop","Container","Loading","StyledButton","DownloadButton","mode","filename","plotId","preventDefault","csv","header","Object","keys","obj","getCSVData","csvData","Blob","FileSaver","saveAs","Plotly","downloadImage","format","downloadImg","StyledManhattanPlot","ManhattanPlot","biomarker","xRange","xLabelValues","layout","autoresize","t","b","l","r","xaxis","zeroline","showticklabels","tickangle","tickmode","tickvals","ticktext","labels","tickfont","size","showgrid","yaxis","y","hovermode","traces","setTraces","highRes","setHighRes","plotData","marker","log10","line","showlegend","hoverlabel","bgcolor","font","hovertemplate","symbol","chrLabel","toFixed","hoverinfo","pointLabels","datasetNames","p","textposition","divId","config","responsive","displayModeBar","staticPlot","StyledError","message","circle","plotColors","gradients","default","unique24","tissues","StyledManhattanPlotContainer","mDataTypeOptions","ManhattanPlotContainer","setMDataType","ready","setPlotData","useLazyQuery","onCompleted","parsePlotData","gene_compound_tissue_dataset_biomarker","onError","getTissueSpecificData","loadingTissueSpecific","errorTissueSpecific","gene_compound_dataset_biomarker","getPanCancerData","loadingPanCancer","errorPanCancer","compoundName","tissueName","parsed","pointId","annotation","chr","gene_seq_start","chromosomes","chromosomeInfo","start","prev","end","labelValue","floor","chromosomeNames","formatted","chromosome","sort","a","selectedBiomarker","biomarkerPointIds","classNamePrefix","defaultValue","SIDE_LINKS","GENE_INFO_COLUMNS","Header","Cell","gene_id","COMPOUND_INFO_COLUMNS","uid","geneArray","genes","Biomarker","location","queryString","parse","transformedCompoundData","setTransformedCompoundData","transformedGeneData","setTransformedGeneData","finalGeneCompoundTissueDatasetData","setGeneCompoundTissueDatasetData","compoundUID","setCompoundUID","geneId","setGeneId","setDisplay","compoundQueryData","geneName","geneQueryData","tissueData","gene_compound_tissue_dataset","getGeneCompoundTissueDatasetData","gene_compound_dataset","getGeneCompoundDatasetData","compoundInfoColumns","useMemo","geneInfoColumns","fdaStatus","fda_status","targets","status","target_name","transformCompoundTableData","singleCompound","geneData","compoundData","ensg","transformGeneTableData","TitleCase","link","createSideLink","BarPlot","loaded","notFound","setDatasets","setError","useHistory","compound_count","dataset_stats","extractDatasets","autosize","points","onHover","toElement","table_columns","pubchem","rel","Compounds","compound_data","table_data","compounds","smiles","inchikey","chembl","getTableData","renderComponent","getCellLinesQuery","getCellLineQuery","StyledPieChart","clickable","PieChart","matchMedia","matches","StyledTissueCellsPieChart","cellTableColumns","TissueCellsPieChart","selectedTissueCells","setSelectedTissueCells","pie","chartData","setChartData","groupedData","returnData","cell_lines","cell_uid","total","tissue_id","cellLinesGroupedByTissue","pieData","hole","pieChartDataObject","tissueObj","tableColumns","CellLines","cell_data","tableData","CiteUsDescription","CiteUs","StyledSelectContainer","UpsetPlotStyle","createUpsetPlot","updateSelectedData","CIRCLE_RADIUS","sortedEnteries","entries","sortedData","entry","maxCount","sortedDataLength","scaleXAxis","scaleYAxis","yLogScale","yScale","tickSize","tickValues","xAxis","tickNum","ticks","tickFormat","yAxis","appendTextYAxis","rectangles","appendRectangles","dataKeys","upsetCircle","circleText","circleAxis","UpsetPlot","updateSelectedPlotData","getPrototypeOf","prototype","StyledPlotDataTable","RenderUpsetPlot","cellData","selectOptions","selectedType","setSelectedType","selectedPlotData","StyledSelectorContainer","makeTable","createSetsWithData","subsets","finalObject","result","reduce","acc","cur","VennContainer","SelectionTableStyle","dimensions","createVennDiagram","innerInstersection","sets","chart","datum","__data__","enterData","venn","createVennDiagramStructure","changeText","circleClass","changeCirclesColor","changeIntersectionColor","changeInnerIntersectionColor","0","appendText","VennDiagram","selectedData","dataTypeOptions","createVennDiagramData","String","datasetDataLoading","datasetDataError","parsedCellData","parsedCompoundData","parsedTissueData","updatedDatasets","isVenn","DatasetIntersection","datasetProp","isIntersection","datasetsPropArray","datasetData","setParsedCellData","setParsedCompoundData","setParsedTissueData","setIsVenn","datatypes_information_all_datasets","cells_tested","tissues_tested","compounds_tested","updatedDatasetArray","createUpdatedDatasetArray","datasetSubSets","subSetCells","subSetTissues","subSetCompounds","datasets_types","Datasets","dataset_data","StyledDocPage","StyledDocSidebarList","OverviewStyles","logo","DocOverview","DocSearch","intersectionSearch","cellDrugSearch","drugTissueSearch","homeNav","DocDataset","datasetSearch","homeDataset","upsetPlot","datasetList","individualDataset","datasetResource","datasetBarPlotA","datasetBarPlotB","datasetCellList","datasetDrugList","DocTissue","tissueSearch","homeTissue","pieChart","tissueList","tissueAnnotation","tissueBar","tissueCellList","tissueDrugList","DocCell","cellSearch","homeCell","cellSummaryList","cellInd","cellIndBar","cellAAC","cellMolProf","DocExperiment","homeExperiment","experimentBarsPlot","DocGene","homeGene","geneSummaryBar","geneSummaryList","DocDrug","drugSearch","homeCompound","drugSummaryBar","pacliSynonym","pacliTarget","drugIndBar","drugAACCell","drugAACTissue","drugIndCellList","drugIndTissues","DocCellVsDrug","cellDrug","cellDrugPlot","cellDrugTable","DocTissueVsDrug","tissueDrug","tissueDrugPlot","tissueDrugTable","DocBiomarker","geneCompoundSearch","geneCompounTissueSearch","biomarkerForest","biomarkerManhattan","biomarkerGene","biomarkerComp","DocDescription","resources","publications","datatypes","Documentation","PlotsWrapper","single","DatasetHorizontalPlot","logScale","allDatasets","exist","dataset1","dataset2","plotlyData","output","orientation","ceil","generatePlotlyData","family","standoff","Experiments","experimentsPerCell","experimentsPerCompound","experimentsPerCellXAxis","experiment_count","cell_line_count","dataset_colors","getSingleCompoundTarget","getSingleGeneTarget","getAllCompoundTargetsQuery","getGeneTargetCountCompoundsByDataset","StyledGenePlot","GenesPlot","compoundTargets","compound_id","numTargets","targetNums","fiftyAndMore","targetNum","filtered","compoundNum","compoundId","all_compound_targets","GenesTable","setGenes","gene_seq_end","localeCompare","Genes","Description","doseImg","getAllDataTypeStatsQuery","StyledStats","statsObject","image","datasetsImg","tissuesImg","cellsImg","experiment","experimentsImg","genesImg","compoundsImg","Stats","stats","setStats","updatedStatsObject","toLocaleString","updateStatsObject","dataType","createStatsObject","data_type_stats","StyledHome","Home","NotFoundContent","NotFoundPage","getSingleCompoundExperimentsQuery","getSingleCellLineExperimentsQuery","getSingleTissueExperimentsQuery","getSingleTissueCellLinesQuery","getSingleTissueCompoundsQuery","getCellLineCompoundExperimentsQuery","getTissueCompoundExperimentsQuery","calculateMedian","half","calculateAbsoluteDeviation","median","abs","formatExperimentPlotData","experiments","plotType","outputObj","profile","__typename","profiles","generateSelectOptions","arr","generateOptions","profileOptions","datasetOptions","runPlotDataAnalysis","calculatedData","group","dataObj","datasetProfile","retrieveProfiles","traceObj","deviation","distance","generateEmptySpace","ProfileCellLine","selectedProfile","setSelectedProfile","selectedDataset","setSelectedDataset","zoomOut","setZoomOut","notifications","errorBars","overflowX","xTickFontSize","layoutVariables","setLayoutVariables","formattedData","trace","error_y","array","visible","generateRenderData","fixedrange","bargap","fullData","baseLayout","anchor","ProfileTissue","autorange","boxpoints","jitter","pointpos","hoveron","PlotSection","experimentalData","cellLineObj","generateCountPlotData","tissuesData","cellLinesData","runDataAnalysis","ProfileCompound","cellLine","cellObj","formatCellData","CellLinesSummaryTable","numCellLines","numDataset","setTableData","setCSV","CELL_SUMMARY_COLUMNS","uniqueDatasets","uniqueCellLines","cellLines","datasetIds","found","num_experiments","generateTableData","cellLineUID","tissueId","numExperiments","queryData","setExperiment","TissuesSummaryTable","numTissues","TISSUE_SUMMARY_COLUMNS","uniqueTissues","formatTissueSummaryData","highlightRowsByCorrelation","rowData","backgroundColor","sign","correlation","COLUMNS","dataset_id","sortType","sortMethod","MolecularFeaturesTable","feature_type","stat","permutation_pvalue","parseTableData","desc","AnnotatedTargetsTable","symbols","ids","compound_name","gene_name","gene_symbol","single_compound_target","PUBCHEM","SYNONYM_COLUMNS","ANNOTATION_COLUMNS","formatSynonymData","synonyms","returnObj","formatAnnotationData","annotationData","identifiers","externalLinks","db","identifier","pubchemLinks","pubchemIds","reactome","IndivCompounds","setCompoundData","synonymData","fetchPolicy","cellLineId","compoundObj","compoundsData","CompoundsSummaryTable","numCompounds","COMPOUND_SUMMARY_COLUMNS","uniqueCompounds","cellLineName","getMolecularProfilingQuery","datatype","MolecularProfilingTable","molProf","converted","num_prof","dataset_name","mDataEntries","molecular_profiling","IndivCellLines","pathname","cellUID","pop","cellId","cellName","setCellLine","diseaseData","source","formatDiseaseData","diseases","linkData","path","formatLinkData","accession_id","CELL_LINE_SUMMARY_COLUMNS","CellLineSummaryTable","setCellLines","DrugSummaryTable","DRUG_SUMMARY_COLUMNS","datasetObj","formatName","IndivTissues","setTissue","setData","targetsStat","compound_targeting_gene_count_per_dataset","compound_uid","gene_annotation","target_id","single_gene_target","TopDrugsTable","generateDescriptionData","hgncId","substring","hgncLink","strand","locLink","loc","xrefLink","descLink","isLoaded","setIsLoaded","geneDes","setGeneDes","setLoaded","geneSyn","setGeneSyn","res","description","ref","formatTableLinks","ensemblId","geneCard","IndivGenes","setGene","startsWith","plots","setPlots","tissue_count","datasetId","datatypes_information_per_dataset","datasetName","setCompounds","DATATYPE_COLUMNS","disableSortBy","formatPublicationData","getORCESTRALink","psets","pset","substr","doi","IndivDatasets","setDataset","initialView","hash","orcestra","getData","pivotBy","Tissues","tissueQueryLoading","tissuesQueryError","cellLineQueryLoading","cellLineQueryError","hill","Einf","EC50","HS","getDashedLine","additionalStat","highlight","dash","fill","getScatterPoints","getDoseResponseCurveData","showScatter","doseResponses","dose_response","doses","responses","doseResponse","concat","dose","xMin","xMax","yMin","yMax","curvCoordinates","minDose","maxDose","dx","supportVec","makeCurveFit","displayCurve","curve","defaultCurveWidth","IC50","hovertext","traceId","useExpIntersection","setExperiments","plotCSVData","setPlotCSVData","getNewTraces","visibleExpIds","highlightedCells","statName","newTraces","exp","clicked","AAC","parseExperiments","raw_experiments","isTissueCompound","colorIndex","repeats","dsets","cellLineColors","dataset_experiment","showHideCurve","curveType","newExp","newItem","otherCells","cellOptions","handleCellLineSelectionChange","newCellLines","showStat","hideStat","onCurveClick","selectedCell","expIds","alterClickedCells","copy","findIndex","isClicked","getLink","StyledCheckbox","Checkbox","isChecked","setIsChecked","DoseResponseCurve","onUnhover","showline","tick0","dtick","StyledIntersectionComponent","StyledIntersectionSummaryTable","StyledCell","IntersectionTableCell","cellItem","onMouseEnter","onMouseOut","CellLineCompoundTable","StyledDoseResponseContainer","CellLineCompound","TissueCompoundTable","TissueDrug","IntersectionMain","useLocation","qs","pageName","setPage","datasetParam","setDatasetParam","datasetParamValue","TissueCompound","dataset_intersection","GlobalStyles","createGlobalStyle","client","ApolloClient","uri","App","exact","component","RenderApp","ReactDOM","document","getElementById"],"mappings":"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,IAA0B,2C,oBCA3CD,EAAOC,QAAU,IAA0B,wC,oBCA3CD,EAAOC,QAAU,IAA0B,mD,oBCA3CD,EAAOC,QAAU,IAA0B,+C,oBCA3CD,EAAOC,QAAU,IAA0B,mD,oBCA3CD,EAAOC,QAAU,IAA0B,6C,oBCA3CD,EAAOC,QAAU,IAA0B,6C,oBCA3CD,EAAOC,QAAU,IAA0B,uC,oBCA3CD,EAAOC,QAAU,IAA0B,2C,oBCA3CD,EAAOC,QAAU,IAA0B,6C,oBCA3CD,EAAOC,QAAU,IAA0B,2C,oBCA3CD,EAAOC,QAAU,IAA0B,4C,oBCA3CD,EAAOC,QAAU,IAA0B,0C,oBCA3CD,EAAOC,QAAU,IAA0B,iD,oBCA3CD,EAAOC,QAAU,IAA0B,2C,oBCA3CD,EAAOC,QAAU,IAA0B,0C,oBCA3CD,EAAOC,QAAU,IAA0B,4C,oBCA3CD,EAAOC,QAAU,IAA0B,wC,oBCA3CD,EAAOC,QAAU,IAA0B,2C,oBCA3CD,EAAOC,QAAU,IAA0B,0C,oBCA3CD,EAAOC,QAAU,IAA0B,8C,oBCA3CD,EAAOC,QAAU,IAA0B,4C,oBCA3CD,EAAOC,QAAU,IAA0B,8C,oBCA3CD,EAAOC,QAAU,IAA0B,oD,oBCA3CD,EAAOC,QAAU,IAA0B,0D,oBCA3CD,EAAOC,QAAU,IAA0B,gD,oBCA3CD,EAAOC,QAAU,IAA0B,gD,oBCA3CD,EAAOC,QAAU,IAA0B,sD,oBCA3CD,EAAOC,QAAU,IAA0B,4C,oBCA3CD,EAAOC,QAAU,IAA0B,8C,oBCA3CD,EAAOC,QAAU,IAA0B,4C,oBCA3CD,EAAOC,QAAU,IAA0B,iD,oBCA3CD,EAAOC,QAAU,IAA0B,8C,oBCA3CD,EAAOC,QAAU,IAA0B,uC,oBCA3CD,EAAOC,QAAU,IAA0B,mC,oBCA3CD,EAAOC,QAAU,IAA0B,sC,oBCA3CD,EAAOC,QAAU,IAA0B,yC,oBCA3CD,EAAOC,QAAU,IAA0B,mC,oBCA3CD,EAAOC,QAAU,IAA0B,qC,2DCA3CD,EAAOC,QAAU,IAA0B,oC","file":"static/js/main.05976ffb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/geneSummaryPlot.cdc7e510.png\";","import { createContext } from 'react';\n\nconst PageContext = createContext({\n  blur: false,\n  noscroll: false,\n  setBlur: () => {},\n  setNoscroll: () => {},\n});\n\nexport default PageContext;\n","import { createContext } from 'react';\n\nconst PageContext = createContext('');\n\nexport default PageContext;\n","export default {\n  blue: '#2b8cbe',\n  dark_gray_text: '#454d4f',\n  dark_pink_highlight: '#d94262',\n  light_pink_highlight: '#fbecef',\n  dark_teal_heading: '#205e74',\n  dark_yellow_highlight: '#e39e25',\n  dark_blue: '#08589e',\n  green: '#a8ddb5',\n  light_blue: '#4eb3d3',\n  light_blue_bg: '#eef4fb',\n  light_blue_header: '#e9f5ff',\n  light_teal: '#dbe9e9',\n  light_teal_highlight: '#e8eef1',\n  teal: '#008080',\n  pale_teal: '#ddeded',\n  white_smoke: '#E8e8e8',\n  pale_tint: '#F2F9F8',\n  silver: '#C0C0C0',\n  light_pink: '#fbf5f6',\n  gray_header: '#afb3b3'\n};\n","import styled from 'styled-components';\n\nimport bg from '../images/bg.webp';\nimport colors from './colors';\n\n/**\n * Styles for the search header parent component.\n */\nconst StyledSearchHeader = styled.div`\n    max-height: ${(props) => (props.page === 'home' ? 'calc(25vh + 150px)' : 'auto')};\n    background: ${(props) => (props.page === 'home' ? `url('${bg}')` : 'white')};\n    background-size: cover;\n    background-attachment: fixed;\n    background-position: center;\n    \n    display:flex;\n    flex-direction:column;\n\n    .search-container {\n        width: 80%;\n        margin-top: 4vh;\n        padding-bottom: 5vh;\n        align-self:center;\n\n        @media only screen and (max-width: 1081px) {\n          width: 90%;\n        }\n\n        h1 {\n            font-family: 'Overpass', sans-serif;\n            font-weight: 400;\n            color: ${(props) => (props.page === 'home' ? colors.light_blue_header : colors.dark_teal_heading)};\n            margin-bottom: 20px;\n        }\n\n        .example {\n            font-family: 'Overpass', sans-serif;\n            font-weight: 400;\n            color: ${(props) => (props.page === 'home' ? colors.light_blue_header : colors.dark_teal_heading)};\n            margin-bottom: 20px;\n            font-size: calc(0.3vw + 0.8em);\n            span {\n              margin-left: 5px;\n            }\n            .home-link {\n              color: ${colors.light_blue};\n            }\n            .home-link:hover {\n              color: ${colors.pale_teal};\n            }\n        }\n        \n        // Search bar placeholder\n        .placeholder {\n          color: #868d8f !important;\n          font-family: 'Rubik', sans-serif !important;\n        }\n    }\n\n    .popup {\n        position:absolute;\n        margin-top:100px; // height + padding of navbar\n        background: rgb(255,255,255,0.7);\n        z-index:999;\n        height:100vh;\n        padding-top:50px;\n    }\n\n    .search-dropdown {\n      position: absolute;\n      margin-top: 110px; // height + padding of navbar\n      width: 70%;\n      background: white;\n      align-self:center;\n      padding: 0px 30px;\n      border-bottom:3px solid ${colors.light_blue_bg};\n      z-index:999;\n    }\n\n    /* Burger */\n    .burger-bg {\n        position: fixed;\n        width: 45px;\n        height: 35px;\n        right: 0;\n        top: 10px;\n        background: ${(props) => (props.page === 'home' ? colors.dark_teal_heading : colors.light_blue_bg)};\n        display:none;\n        opacity:0.7;\n        z-index:999;\n    }\n    /* mobile */\n    @media only screen and (max-width: 1081px) {\n        .header-links {\n            display: none;\n        }\n        .burger-bg {\n            display: block;\n        }\n    } \n`;\n\n/**\n * Styles for the nav bar parent component.\n */\nconst StyledNavBar = styled.div`\n    position: static;\n    width: 100%;\n    height: clamp(50px, calc(4vw + 5px), 70px);\n    margin-bottom: ${(props) => (props.page === 'home' ? 'auto' : '30px')};\n    \n    display: flex;\n    justify-content: center;\n\n    .container {\n        font-size: clamp(14px, calc(1vw + 2px), 18px);\n        width: 85%;\n        border-bottom: ${(props) => (props.page === 'home' ? 'none' : `3px solid ${colors.light_blue_bg}`)};\n\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n    }\n    .logo {\n        width: calc(5vw + 150px);\n        max-width: 200px;\n        padding-top: 5px;\n    }\n    /* mobile */\n    @media only screen and (max-width: 1081px) {\n        .container {\n          width: 80%;\n          justify-content: flex-start;\n        }\n        .search-button {\n          margin-left: 20px;\n        }\n    } \n`;\n\n/**\n * Styles for the dropdowns in the navbar component.\n */\nconst StyledLinkDropdowns = styled.div`\n    width: ${(props) => (props.page === 'home' ? '40%' : '45%')};\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n\n    /* mobile */\n    @media only screen and (max-width: 1081px) {\n        width: auto;\n    } \n\n    .link-dropdown, .link {\n        width: auto;\n        color: ${(props) => (props.page === 'home' ? colors.light_blue_header : colors.dark_teal_heading)};\n        font-family: 'Rubik', sans-serif;\n        font-weight: 400;\n        font-size: clamp(14px, calc(1vw + 2px), 18px);\n        letter-spacing: 0.5px;\n        background: transparent;\n        border: none;\n\n        a {\n            color: ${colors.dark_teal_heading};\n            text-align:left;\n        }\n    }\n    \n    .link-menu {\n        margin-top:0px !important;\n\n        .item {\n            margin: 10px 0px;\n        }\n    }\n\n    .dropdown.icon {\n        margin-left: 0.5em !important;\n    }\n\n`;\n\n/**\n * Styles for the search button in the nav bar component.\n */\nconst StyledSearchButton = styled.button`\n    border-radius:50%;\n    width: 30px;\n    height: 30px;\n    background: ${colors.light_blue_bg};\n    display:flex;\n    justify-content: center;\n    align-items:center;\n    cursor: pointer;\n    border: none;\n\n    img {\n      width:10px;\n    }\n    \n    &:focus {\n      outline:0;\n    }\n\n    /* mobile */\n    @media only screen and (max-width: 1081px) {\n        width: 33px;\n        height: 33px;\n        img {\n            width: 12px;\n        }\n    } \n  \n`;\n\n/**\n * Styles for the search bar.\n */\nconst SearchBarStyles = {\n  control: (provided) => ({\n    ...provided,\n    background: 'rgb(233, 245, 255, 0.8)',\n    borderRadius: '35px',\n    height: '5.5vh',\n    fontFamily: '\\'Rubik\\', sans-serif',\n    fontSize: 'calc(0.8vw + 0.6em)',\n    color: colors.dark_teal_heading,\n    padding: '0 1.5%',\n    marginBottom: '20px',\n    border: 'none',\n    '&:hover': {\n      cursor: 'text',\n    },\n    '&:focus': {\n      outline: '0',\n      border: 'none',\n      boxShadow: 'none',\n    },\n  }),\n  input: (provided) => ({\n    ...provided,\n    padding: '0',\n    color: colors.dark_gray_text,\n  }),\n  clearIndicator: (provided) => ({\n    ...provided,\n    color: `${colors.dark_gray_text}`,\n    cursor: 'pointer',\n    '&:hover': {\n      color: `${colors.dark_gray_text}`,\n    },\n  }),\n  dropdownIndicator: (provided) => ({\n    ...provided,\n    color: `${colors.dark_gray_text}`,\n    display: 'none',\n    '&:hover': {\n      color: `${colors.dark_gray_text}`,\n      cursor: 'pointer',\n    },\n  }),\n  indicatorSeparator: (provided) => ({\n    ...provided,\n    background: `${colors.dark_gray_text}`,\n    display: 'none',\n    '&:hover': {\n      background: `${colors.dark_gray_text}`,\n    },\n  }),\n  singleValue: (provided) => ({\n    ...provided,\n    color: `${colors.dark_gray_text}`,\n  }),\n  multiValue: (provided) => ({\n    ...provided,\n    color: `${colors.dark_gray_text}`,\n    background: '#fff',\n    marginRight: '10px',\n  }),\n  multiValueLabel: (provided) => ({\n    ...provided,\n    color: `${colors.dark_gray_text}`,\n  }),\n  option: (provided) => ({\n    ...provided,\n    textAlign: 'left',\n    fontWeight: '400',\n    background: 'white',\n    color: colors.dark_gray_text,\n    cursor: 'pointer',\n    padding: '10px',\n    margin: '0',\n    fontSize: '1em',\n    '&:hover': {\n      background: colors.light_blue_bg,\n    },\n  }),\n};\n\nexport {\n  StyledSearchHeader,\n  StyledSearchButton,\n  StyledNavBar,\n  StyledLinkDropdowns,\n  SearchBarStyles,\n};\n","import React, { useState, useContext, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Dropdown } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport PropTypes from 'prop-types';\nimport PageContext from '../../context/PageContext';\nimport SearchContext from '../../context/SearchContext';\n\nimport logoDark from '../../images/pharmacodb-logo-dark.png';\nimport logoLight from '../../images/pharmacodb-logo.png';\nimport magnifImg from '../../images/magnif-glass.png';\nimport closeSearchImg from '../../images/close.png';\nimport { StyledLinkDropdowns, StyledNavBar, StyledSearchButton } from '../../styles/SearchHeaderStyles';\nimport colors from '../../styles/colors';\n\n// link to old pharmacodb.\nconst OLD_PHARMACODB = 'http://pharmacodbv1.ca/';\n\n/**\n * Component for the navigation with links and logo.\n * Switches to contain a search bar on any page other than home.\n *\n * @component\n * @example\n *\n * const onClick = (e) => {};\n * return (\n *   <NavBar onClick={onClick}/>\n * )\n */\nconst NavBar = (props) => {\n  const { onClick, popupVisible } = props;\n  const page = useContext(PageContext);\n\n  const [isOpen, setIsOpen] = useState(false);\n  const { setBlur, setNoscroll } = useContext(SearchContext);\n\n  // If popup not visible, reset search header styles\n  useEffect(() => {\n    if (popupVisible) {\n      setIsOpen(true);\n      // add no scroll and blur\n      setBlur(true);\n      setNoscroll(true);\n    } else {\n      setIsOpen(false);\n      // remove no scroll and blur\n      setBlur(false);\n      setNoscroll(false);\n    }\n  }, [popupVisible]);\n\n  /**\n   * Handles click of search button. Sends props to parent\n   * component for dropping search bar down.\n   *\n   * @param {Object} e  On click event\n   */\n  const handleClick = () => {\n    if (isOpen) {\n      setIsOpen(false);\n      // remove no scroll and blur\n      setBlur(false);\n      setNoscroll(false);\n    } else {\n      setIsOpen(true);\n      // add no scroll and blur\n      setBlur(true);\n      setNoscroll(true);\n    }\n    onClick(isOpen);\n  };\n\n  /**\n   * Returns the dropdown items to be rendered.\n   *\n   * @param {Object} e  On click event\n   * @returns {JSX} JSX to be rendered\n   */\n\n  const dropdownItems = (data) => data.map((x) => (\n    <Dropdown.Item key={x.name}><Link to={x.url}>{x.name}</Link></Dropdown.Item>\n  ));\n\n  // for about menu dropdown\n  const aboutLinks = [\n    { url: '/about', name: 'About Us' },\n    { url: '/cite', name: 'Cite Us' },\n  ];\n\n  // for data menu dropdown\n  const dataLinks = [\n    { url: '/datasets', name: 'Datasets' },\n    { url: '/cell_lines', name: 'Cell Lines' },\n    { url: '/tissues', name: 'Tissues' },\n    { url: '/compounds', name: 'Compounds' },\n    { url: '/genes', name: 'Genes' },\n    { url: '/experiments', name: 'Experiments' },\n  ];\n\n  return (\n    <StyledNavBar className=\"header\" page={page}>\n      <div className=\"container\">\n        <Link to=\"/\"><img alt=\"logo\" className=\"logo\" src={page === 'home' ? logoDark : logoLight} /></Link>\n        <StyledLinkDropdowns page={page}>\n          <Dropdown className=\"header-links link-dropdown\" text=\"About\" simple>\n            <Dropdown.Menu className=\"link-menu\">\n              {dropdownItems(aboutLinks)}\n              <Dropdown.Item><a href=\"https://github.com/bhklab/PharmacoDB-JS\" target=\"_blank\">Github</a></Dropdown.Item>\n            </Dropdown.Menu>\n          </Dropdown>\n          <Link className=\"header-links link\" to=\"/documentation\">Documentation</Link>\n          {/* <Link className=\"header-links link\" to=\"/explore\">Explore</Link> */}\n          <Dropdown className=\"header-links link-dropdown\" text=\"Data\" simple>\n            <Dropdown.Menu className=\"link-menu\">\n              {dropdownItems(dataLinks)}\n            </Dropdown.Menu>\n          </Dropdown>\n          <a className=\"header-links link\" href={`${OLD_PHARMACODB}`} target='_blank' style={{ color: `${colors.dark_pink_highlight}` }}>\n            PharmacoDB-v1\n          </a>\n          {/* {\n            page === 'home' ? null : \n            (\n              <StyledSearchButton className=\"search-button\" onClick={handleClick}>\n                {isOpen ? (\n                  <img alt=\"close\" src={closeSearchImg} />\n                ) : (\n                    <img alt=\"magnifying glass\" src={magnifImg} />\n                  )}\n              </StyledSearchButton>\n            )\n          } */}\n        </StyledLinkDropdowns>\n      </div>\n    </StyledNavBar>\n  );\n};\n\nNavBar.propTypes = {\n  /**\n   * NavBar' onClick handler for search\n  */\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default NavBar;\n","import React from \"react\";\nimport { FixedSizeList as List } from \"react-window\";\nimport colors from \"../../styles/colors\";\n\n// styles\nconst styles = {\n    textAlign: 'center', \n    padding: '20px', \n    fontSize: '14px',\n    fontWeight: '500',\n    color: `${colors.dark_gray_text}`\n}\n\n/**\n * @param {Object} props - props object\n * @returns {string | Object} - the data that needs to be rendered.\n */\nconst renderData = (props) => {\n    const { children, isLoading } = props;\n\n    // if the data is loading\n    if(isLoading) {\n        return (() => \n            <div style={styles}> \n                loading...\n            </div>\n        )\n    }\n    // if the data is loading and children array is empty (ie no data found)\n    if(!isLoading && !children.length) {\n        return (() => \n            <div style={styles}> \n                No item found\n            </div>\n        )\n    }\n    // if the data is not loading and the data has been fetched\n    if(!isLoading && children.length) {\n        return ({ index, style }) => (\n            <div style={style}>{children[index]}</div>\n        )\n    }\n}\n\n\n/**\n * Main component\n * @param {Object} props \n * @returns - menu list component\n */\nconst MenuList = (props) => {\n    const { options, children, maxHeight, getValue } = props;\n    const [value] = getValue();\n    const initialOffset = options.indexOf(value) * 35;\n\n    return (\n        <List\n            className=\"menu-list\"\n            height={options.length > 1 ? maxHeight : 60}\n            itemCount={children.length || 1}\n            itemSize={60}\n            initialScrollOffset={initialOffset}\n        >\n            {renderData(props)}\n        </List>\n    );\n};\n\nexport default MenuList;\n","import { gql } from 'apollo-boost';\n\n/**\n * @returns - Query returns the list of datasets with information about how many\n * cell lines, tissues, experiments and compounds are in those datsets.\n */\nconst getDatasetStatsQuery = gql`\n  {\n    dataset_stats {\n      dataset {\n        id,\n        name\n      }\n      cell_line_count\n      experiment_count\n      compound_count\n      tissue_count\n    }\n  }\n`;\n\n/**\n * @returns - Query returns the list of datasets with the id and name of the dataset.\n */\nconst getDatasetsQuery = gql`\n  query getAllDatasets {\n    datasets {\n      id\n      name\n    }\n  }\n`;\n\n/**\n * @param { Number } datasetId - dataset id of the dataset to be queried.\n * @returns - all the information returns by the dataset query,\n * id, and name for the dataset.\n */\nconst getDatasetQuery = gql`\n  query getSingleDataset($datasetId: Int!, $datasetName: String!) {\n    dataset(datasetId: $datasetId, datasetName: $datasetName) {\n      id\n      name\n    }\n  }\n`;\n\n/**\n * @returns - The query returns an Array of object with the dataset object, count, type\n * and an array of objects containing the id and name of the cell lines belonging to that dataset.\n */\nconst getCellLinesGroupedByDatasetQuery = gql`\n  query getCellLinesGroupedByDataset {\n    cell_lines_grouped_by_dataset {\n      dataset {\n        id\n        name\n      }\n      count\n      type\n      list {\n        id\n        name\n      }\n    }\n  }\n`;\n\nconst getDatasetCellLinesQuery = gql`\n  query getDatasetCellLinesQuery($datasetId: Int!) {\n    dataset(datasetId: $datasetId) {\n      id,\n      name,\n      cells_tested {\n        id\n        cell_uid\n        name\n      }\n    }\n  }\n`;\n\nconst getDatasetTestedCellsQuery = gql`\n  query getDatasetTestedCellsQuery($datasetId: Int!) {\n    datatypes_information_per_dataset(datasetId: $datasetId) {\n      dataset {\n        id\n        name\n      }\n      cells_tested {\n        id\n        uid\n        name\n      }\n    }\n  }\n`;\n\nconst getDatasetCompoundQuery = gql`\n  query getDatasetCompoundQuery($datasetId: Int!) {\n    dataset(datasetId: $datasetId) {\n      id,\n      name,\n      compounds_tested {\n        id\n        uid\n        name\n      }\n    }\n  }\n`;\n\nconst getDatasetTestedCompoundsQuery = gql`\n  query getDatasetTestedCompoundQuery($datasetId: Int!) {\n    datatypes_information_per_dataset(datasetId: $datasetId) {\n      dataset {\n        id\n        name\n      }\n      compounds_tested {\n        id\n        uid\n        name\n      }\n    }\n  }\n`;\n\n/**\n * @returns - Query returns the list of datasets with information about how many\n * cell lines, tissues, experiments and compounds are in those datsets.\n */\nconst getTypeInformationAllDatasetsQuery = gql`\n  {\n    datatypes_information_all_datasets {\n      dataset {\n        id\n        name\n      }\n      tissues_tested {\n        id\n        name\n      }\n      cells_tested {\n        id\n        uid\n        name\n      }\n      compounds_tested {\n        id\n        uid\n        name\n      }\n    }\n  }\n`;\n\nexport {\n  getDatasetStatsQuery,\n  getDatasetsQuery,\n  getDatasetQuery,\n  getCellLinesGroupedByDatasetQuery,\n  getDatasetTestedCompoundsQuery,\n  getDatasetTestedCellsQuery,\n  getDatasetCellLinesQuery,\n  getDatasetCompoundQuery,\n  getTypeInformationAllDatasetsQuery,\n};\n","/**\n * Returns all the subsets of a set.\n * @param {Array} set\n */\nconst createAllSubsets = (set) => {\n    //setSize of power set of a set with setSize n is (2**n -1)\n    const setSize = set.length;\n    let powSetSize = parseInt(Math.pow(2, setSize));\n    let finalSubsets = [];\n\n    // Run from counter 000..0 to 111..1\n    for (let counter = 0; counter < powSetSize; counter++) {\n        let subset = [];\n        for (let j = 0; j < setSize; j++) {\n            // Check if jth bit in the counter is set If set then print jth element from set\n            if ((counter & (1 << j)) > 0) {\n                subset.push(set[j]);\n            }\n        }\n        finalSubsets.push(subset);\n    }\n    return finalSubsets;\n};\n\nexport default createAllSubsets;\n","/**\n * \n * @param {Array} inputArray - array of input values against which the checkValues are checked.\n * @param {Array} checkValues - array of values that needs to checked if they are all present in the input array or not.\n * @returns {boolean} - return true if all the elements are present in the input array else false.\n */\nconst containsAll = (inputArray, checkValues) => {\n    // if the length of the input array or the values to be checked is equal to zero return false.\n    if (inputArray.length === 0 || checkValues.length === 0) return false;\n\n    // will return true if all the elements are present else false.\n    return checkValues.every(el => inputArray.includes(el));\n};\n\nexport default containsAll;\n","// list of different data types in our database.\nconst dataTypes = ['cell_line', 'compound', 'dataset', 'gene', 'tissue'];\n\nexport default dataTypes;\n","import React, { useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { useQuery } from '@apollo/react-hooks';\nimport AsyncSelect from 'react-select/async';\nimport { components } from 'react-select';\nimport ReactTypingEffect from 'react-typing-effect';\nimport debounce from 'lodash.debounce';\nimport MenuList from './List';\nimport { getDatasetsQuery } from '../../queries/dataset';\nimport { searchQuery } from '../../queries/search';\nimport createAllSubsets from '../../utils/createAllSubsets';\nimport colors from '../../styles/colors';\nimport { SearchBarStyles } from '../../styles/SearchHeaderStyles';\nimport containsAll from '../../utils/containsAll';\nimport dataTypesList from '../../utils/dataTypesList';\n// import defaultOptions from '../../utils/searchDefaultOptions';\n\n\n// input must be greater than this length to display option menu\nconst INPUT_LENGTH_FOR_MENU = 1;\n\n// placeholders for react-select\nconst placeholders = [\n  'Cell line (eg. 22rv1)', 'Tissue (eg. endometrium)',\n  'Compound (eg. paclitaxel)', 'Dataset (eg. ccle)',\n  'Tissue vs Compound (eg. breast paclitaxel)',\n  'Cell line vs Compound (eg. 22rv1 paclitaxel)',\n  'Multiple datasets (eg. ccle, ctrpv2, gcsi)',\n];\n\n/**\n * Custom options for scrolling with keyboard\n */\nconst CustomOption = (innerProps) => {\n  return (\n    <components.Option {...innerProps}>\n    <div\n      style={{\n        textAlign: 'left',\n        fontWeight: innerProps.isDisabled ? '700' : '400',\n        padding: '5px',\n        color: innerProps.isDisabled ? colors.dark_blue : colors.dark_gray_text,\n        cursor: innerProps.isDisabled ? 'not-allowed' : 'pointer',\n        fontSize: innerProps.isDisabled ? '1.15em' : '1em',\n        // background: innerProps.isDisabled ? colors.light_blue_bg : '',\n      }}\n    >\n      {innerProps.label}\n    </div>\n  </components.Option>\n  )\n};\n\n/**\n * Creates the dataset intersection array.\n * @param {Array} - dataset array.\n * @returns {Array} - a dataset intersection array with all the subsets.\n */\nconst createDatasetIntersections = (data) => {\n  // get all the subsets of the datasets array/set.\n  const subsets = createAllSubsets(data).map((el) => {\n    return {\n      value: el.toString().replaceAll(',', ' '),\n      label: el.toString().replaceAll(',', ' '),\n      type: 'dataset_intersection',\n    }\n  });\n\n  // remove the elements with the set of lenght 0 or 1 from the subsets being an empty string.\n  const finalSubsets = subsets.filter(el => el.value.split(' ').length > 1);\n\n  return finalSubsets;\n};\n\n/**\n * \n * @param {Array} datasetIntersections - an array of all the \n * @param {Array} search \n */\nconst searchIntersectionOfDatasets = (datasetIntersections, search) => {\n  // const regex = new RegExp(search, 'ig');\n  const regex = new RegExp(search.split('').join('.{0,2}'), 'ig');\n  let matchedDatasetIntersections = datasetIntersections.filter(el => el.value.match(regex));\n  \n  if(matchedDatasetIntersections.length) {\n    matchedDatasetIntersections = [{\n      value: 'dataset intersections'.toUpperCase(), \n      label: 'dataset intersections'.toUpperCase(),\n      type: 'data_type', \n      isDisabled: true\n    }, ...matchedDatasetIntersections];\n  }\n\n  return matchedDatasetIntersections;\n};\n\n/**\n * \n * @param {Array} data - input data\n * @returns {Array} - transformed data\n */\nconst transformData = (data) => {\n  const transformedData = [];\n  const typesVisited = [];\n\n  data.forEach(el => {\n    if(!typesVisited.includes(el.type)) {\n      typesVisited.push(el.type);\n\n      transformedData.push({\n        value: `${el.type.toUpperCase().replace('_', ' ')}S`,\n        label: `${el.type.toUpperCase().replace('_', ' ')}S`,\n        type: 'data_type', \n        isDisabled: true\n      });\n    }\n\n    transformedData.push({value: el.id, label: el.value, type: el.type});\n  });\n\n  return transformedData;\n};\n\n// function gets the data from search API based on the user input \nconst getSelectionDataBasedOnInput = async (input) => {\n  let finalResponse;\n\n  // API request\n  const data = await fetch('/graphql ', {\n        method: 'post',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          query: searchQuery,\n          variables: {input},\n        })\n  });\n\n  // prepare response\n  await data\n    .json()\n    .then(response => {\n      return response;\n    })\n    .then(response => {\n      finalResponse = transformData(response.data.search);\n    })\n    .catch(err => console.log('an error occurred while making an API request', err));\n\n    return finalResponse;\n};\n\n/**\n * \n * @param {Array} selection - array of selections\n * @returns {string} - redirect URL\n */\nconst createSingleSelectionURL = (selection) => {\n  const {type, value, label} = selection[0];\n  let url = '';\n  \n  // this is for dataset intersection (example searching for : ccle and fimm together)\n  if (label === value && type === 'dataset_intersection') {\n    const datasets = label.split(' ').join(',');\n    url = `/search?${type}=${datasets}`;\n  }\n\n  // this is for cases like searching for cells, tissues, cell_line, compound etc as a string\n  if (label === value && dataTypesList.includes(type)) {\n    url = `/${type}`;\n  }\n\n  // this is for single type search like genes/8228.\n  if (label !== value) {\n    url = `/${type}s/${value}`;\n  }\n\n  return url;\n};\n\n/**\n * \n * @param {Array} selection - array of selections\n * @return {string} - URL string\n */\nconst createURLForTwoSelections = (selection) => {\n  const selectedTypes = selection.map(el => el.type);\n  let url = '';\n\n  if (containsAll(selectedTypes, ['tissue', 'compound'])) {\n    let tissue, compound = '';\n    selection.forEach(el => {\n      if (el.type === 'compound') {\n        compound = el.label;\n      } else if (el.type === 'tissue') {\n        tissue = el.label;\n      }\n    })\n    url = `/search?compound=${compound}&tissue=${tissue}`;\n  } else if (containsAll(selectedTypes, ['cell_line', 'compound'])) {\n    let cell_line, compound = '';\n    selection.forEach(el => {\n      if (el.type === 'compound') {\n        compound = el.label;\n      } else if (el.type === 'cell_line') {\n        cell_line = el.label;\n      }\n    })\n    url = `/search?compound=${compound}&cell_line=${cell_line}`;\n  } else if (containsAll(selectedTypes, ['gene', 'compound'])) {\n    let gene, compound = '';\n    selection.forEach(el => {\n      if (el.type === 'compound') {\n        compound = el.label;\n      } else if (el.type === 'gene') {\n        gene = el.label;\n      }\n    })\n    url = `/biomarker?compound=${compound}&gene=${gene}`;\n  }\n  \n  return url;\n};\n\n/**\n * \n * @param {Array} selection - array of selections\n * @return {string} - URL string\n */\nconst createURLForThreeSelections = (selection) => {\n  // get the selected types list\n  const selectedTypes = selection.map(el => el.type);\n  let url = '';\n  \n  if (containsAll(selectedTypes, ['tissue', 'compound', 'gene'])) {\n    let tissue, compound, gene = '';\n    selection.forEach(el => {\n      if (el.type === 'compound') {\n        compound = el.label;\n      } \n      if (el.type === 'tissue') {\n        tissue = el.label;\n      } \n      if (el.type === 'gene') {\n        gene = el.label;\n      }\n    })\n    url = `/biomarker?compound=${compound}&tissue=${tissue}&gene=${gene}`;\n  }\n\n  return url;\n};\n\n/**\n * @param {Array} selection - an array of objects (selections from the select)\n */\nconst createRedirectURL = (selection) => {\n  // selection length\n  const selectionLength = selection.length; \n  // final url\n  let url = ''; \n\n  switch(selectionLength) {\n    case 1:\n      url = createSingleSelectionURL(selection);\n      break;\n\n    case 2:\n      url = createURLForTwoSelections(selection);\n      break;\n\n    case 3: \n      url = createURLForThreeSelections(selection);\n      break;\n  }\n\n  return url;\n};\n\n\n/**\n * Component for the search bar.\n * @component - Search Bar component\n */\nconst SearchBar = (props) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [selectedElement, setSelectedElementState] = useState([]);\n  const { data: datasetsData, loading, error } = useQuery(getDatasetsQuery);\n  const datasets = datasetsData?.datasets.map(el => el.name);\n  const datasetIntersections = datasets && createDatasetIntersections(datasets);\n\n  // console error in case of an error.\n  if(error) {\n    console.error(error);\n  };\n\n  /**\n   * Handles on enter button press to go to search results\n   * @param {Object} event key pressed\n   */\n  const handleKeyDown = (event) => {\n    const { history } = props;\n    let queryParams = '/';\n\n    if (event.key === 'Enter' && !isMenuOpen && selectedElement.length !== 0) {\n      // creating URL\n      queryParams = createRedirectURL(selectedElement);\n      \n      // reset react-select\n      setSelectedElementState([]);\n\n      // go to endpoint\n      history.push(queryParams);\n    }\n  };\n\n  // handles menu close\n  const handleMenuClose = () => {\n    setIsMenuOpen(false);\n  };\n\n  // Handles the option selected in the input.\n  const handleChange = (event) => {\n    // set the state\n    setSelectedElementState(event);\n    // also revert open menu to false because option selected\n    setIsMenuOpen(false);\n  };\n\n  // Handles keypresses or any other changes in the input.\n  const handleInputChange = (event) => {\n    // also make sure menu doesn't open on click until type\n    setIsMenuOpen(event.length >= INPUT_LENGTH_FOR_MENU);\n  };\n\n  // to get the options from the API\n  const selectionOptions = debounce((query, callback) => {\n    // dataset intersection data based on the query.\n    const matchedDatasetIntersections = searchIntersectionOfDatasets(datasetIntersections, query);\n    \n    // selection data.\n    getSelectionDataBasedOnInput(query)\n      .then(response => callback([...response, ...matchedDatasetIntersections]));\n  }, 1000);\n  \n\n  return (\n    <>\n      <AsyncSelect \n        components={{\n          MenuList: (props) => (<MenuList {...props} />),\n          Option: CustomOption,\n        }}\n        placeholder={(\n          <ReactTypingEffect\n            speed=\"100\"\n            typingDelay=\"200\"\n            eraseDelay=\"1500\"\n            className=\"placeholder\"\n            text={placeholders}\n          />\n        )}\n        isMulti\n        cacheOptions\n        loadOptions={selectionOptions} \n        onKeyDown={handleKeyDown}\n        styles={SearchBarStyles}\n        noOptionsMessage={()=>\"name not found\"} \n        onChange={handleChange}\n        onInputChange={handleInputChange}\n        onMenuClose={handleMenuClose}\n        menuIsOpen={isMenuOpen}\n      />\n    </>\n  );\n};\n\nSearchBar.propTypes = {\n  /**\n   * for going to endpoint\n   */\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nexport default withRouter(SearchBar);\n","// import { gql } from 'apollo-boost';\n\n// const searchQuery = gql `\n//     query Search($input: String) {\n//         search(input: $input) {\n//             id\n//             value\n//             type\n//         }\n//     }\n// `;\n\nconst searchQuery = `\n    query Search($input: String) {\n        search(input: $input) {\n            id\n            value\n            type\n        }\n    }\n`;\n\nexport {\n    searchQuery,\n};\n","import React, { useState, useContext } from 'react';\nimport NavBar from './NavBar';\nimport SearchBar from './SearchBar';\nimport 'react-slidedown/lib/slidedown.css';\nimport PageContext from '../../context/PageContext';\n\nimport { StyledSearchHeader } from '../../styles/SearchHeaderStyles';\n\n/**\n * Header component including the navbar and the\n * search bar. Is full size on home page, and minimized\n * on any other page (based on the page prop).\n *\n * @component\n * @example\n *\n * return (\n *   <SearchHeader />\n * )\n */\nconst SearchHeader = () => {\n  const page = useContext(PageContext);\n  const [isOpen, setIsOpen] = useState(false);\n\n  /**\n   * On click handler - handles closing and opening of search.\n   *\n   * @param {Object} e  on click event\n   */\n  const onClick = (e) => {\n    if (isOpen) {\n      setIsOpen(false);\n    } else {\n      setIsOpen(true);\n    }\n  };\n\n  return (\n    <StyledSearchHeader page={page}>\n      <div className=\"burger-bg\" />\n      <NavBar onClick={onClick} popupVisible={isOpen} />\n      {/* \n        The search bar is rendered for the home page only, to avoid other pages from stalling.\n        Ternaries determine the classes to put based on if the page is home or not, and if the popup\n        should be visible or not based on search button click. \n      */}\n      {\n        page === 'home' &&\n        <div className={`search-container${page === 'home' ? '' : ` popup ${isOpen ? 'visible' : 'hidden'}`}`}>\n          <h1>Try searching for a...</h1>\n          <SearchBar onClick={onClick} />\n          <span className=\"example\">\n            <span> Example: </span>\n            <span> <a className={page === 'home' ? 'home-link' : ''} href='/compounds/PDBC00058'>paclitaxel</a> </span>\n            <span> • </span>\n            <span> <a className={page === 'home' ? 'home-link' : ''} href='/cell_lines/22RV1_12_2019'>22rv1</a> </span>\n            <span> • </span>\n            <span> <a className={page === 'home' ? 'home-link' : ''} href='/search?compound=paclitaxel&cell_line=mcf-7'>mcf7 paclitaxel</a> </span>\n          </span>\n        </div>\n      }\n    </StyledSearchHeader>\n  );\n};\n\nexport default SearchHeader;\n","import { slide as Menu } from 'react-burger-menu';\nimport React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport colors from '../../styles/colors';\nimport PageContext from '../../context/PageContext';\n\n/**\n * Burger menu component for mobile responsive navigation.\n *\n * @component\n * @example\n *\n * return (\n *   <BurgerMenu/>\n * )\n */\nconst BurgerMenu = () => {\n  const page = useContext(PageContext);\n  const styles = {\n    bmBurgerButton: {\n      position: 'fixed',\n      width: '27px',\n      height: '23px',\n      right: '10px',\n      top: '15px',\n    },\n    bmBurgerBars: {\n      background: page === 'home' ? 'white' : colors.dark_teal_heading,\n      opacity: 0.8,\n      height: '3px',\n    },\n    bmCrossButton: {\n      height: '24px',\n      width: '24px',\n    },\n    bmCross: {\n      background: '#bdc3c7',\n    },\n    bmMenuWrap: {\n      position: 'fixed',\n    },\n    bmMenu: {\n      background: colors.dark_gray_text,\n      padding: '2.5em 1.5em 0',\n      fontSize: '1.15em',\n      color: 'white',\n    },\n    bmItemList: {\n      padding: '0.8em',\n      display: 'flex',\n      flexDirection: 'column',\n      height: 'auto',\n    },\n    bmItem: {\n      color: 'white',\n      display: 'inline-block',\n      fontFamily: \"'Rubik', sans-serif\",\n    },\n    bmOverlay: {\n      background: 'rgba(0, 0, 0, 0.3)',\n    },\n  };\n\n  /**\n   * Returns the dropdown items to be rendered.\n   *\n   * @param {Object} e  On click event\n   * @returns {JSX} JSX to be rendered\n   */\n  const dropdownItems = (data) => data.map((x) => (\n    <Link key={x.url} className=\"burger-item\" to={x.url}>{x.name}</Link>\n  ));\n\n  // for about menu dropdown\n  const aboutLinks = [\n    { url: '/about', name: 'About Us' },\n    { url: '/documentation', name: 'Documentation' },\n    { url: '/cite', name: 'Cite Us' },\n  ];\n\n  // for data menu dropdown\n  const dataLinks = [\n    { url: '/datasets', name: 'Datasets' },\n    { url: '/cell_lines', name: 'Cell Lines' },\n    { url: '/tissues', name: 'Tissues' },\n    { url: '/compounds', name: 'Compounds' },\n    { url: '/genes', name: 'Genes' },\n    { url: '/experiments', name: 'Experiments' },\n  ];\n\n  return (\n    <Menu className=\"burger-menu\" styles={styles} noOverlay right disableAutoFocus isOpen={false}>\n      <>\n        <h2>About</h2>\n        {dropdownItems(aboutLinks)}\n        <p />\n        <h2>Data</h2>\n        {dropdownItems(dataLinks)}\n      </>\n    </Menu>\n  );\n};\n\nexport default BurgerMenu;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet';\nimport SearchHeader from '../Search/SearchHeader';\nimport PageContext from '../../context/PageContext';\nimport SearchContext from '../../context/SearchContext';\nimport BurgerMenu from '../Search/BurgerMenu';\n\n/**\n * Capitalize first letter\n */\nconst capitalize = (s) => {\n  if (typeof s !== 'string') return '';\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\n/**\n * Wrapper for every page - includes the SearchHeader,\n * which needs to be passed the page prop to be full-sized\n * or minimized.\n *\n * @component\n * @example\n *\n * const page = \"home\"\n * return (\n *   <SearchHeader page={page}/>\n * )\n */\nconst Layout = (props) => {\n  const { children, page } = props;\n  const { blur } = useContext(SearchContext);\n  return (\n    <PageContext.Provider value={page}>\n      <Helmet>\n        <title>{`${capitalize(page)} | PharmacoDB`}</title>\n      </Helmet>\n      <BurgerMenu />\n      <SearchHeader />\n      <main className={blur ? 'blur' : null}>\n        {children}\n      </main>\n    </PageContext.Provider>\n  );\n};\n\nLayout.propTypes = {\n  /**\n     * Layout's page name\n     */\n  page: PropTypes.string,\n  /**\n     * Layout's children (components on the page)\n     */\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]),\n};\n\nLayout.defaultProps = {\n  page: '',\n  children: null,\n};\n\nexport default Layout;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport colors from '../../../../styles/colors';\n\nconst StyledDescription = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  \n    width: 75%;\n    margin-top: 8vh;\n\n    .text-container {\n        width: 100%;\n\n        display: flex;\n        flex-direction: column;\n\n        span {\n            font-size: calc(0.5vw + 0.7em);\n            line-height: calc(1vw + 1em);\n            margin: 4vh;\n        }\n\n        h1 {\n            color: ${colors.dark_teal_heading};\n            font-family: 'Roboto Slab', serif;\n            font-size: calc(1.8vw + 1em) !important;\n            margin-bottom: 4vh;\n            align-self: center;\n        }\n    }\n\n    .code-container {\n      display: flex;\n      flex-direction: column;\n      width: 75%;\n      margin: auto;\n      max-width: 800px;\n      border: 1px solid gray;\n      padding: 10px;\n      background-color:#EEEEEE;\n      font-family:Consolas,Lucida Console,Liberation Mono,DejaVu Sans Mono,Bitstream Vera Sans Mono,Courier New;\n    }\n\n    /* mobile */\n    @media only screen and (max-width: 1081px) {\n        .text-container{\n          width:100%;\n        }\n    } \n`;\n\n/**\n * Shows the description on pharmacogx page\n *\n * @component\n * @example\n *\n * return (\n *   <PharmacoGxDescription/>\n * )\n */\nconst PharmacoGxDescription = (props) => {\n  // parameter.\n  const { dataset } = props;\n  return(\n      <StyledDescription>\n        <div className=\"text-container\">\n          <h1>\n            PharmacoGx\n          </h1>\n          <span>\n            <p>\n              PharmacoGx is an R/Bioconductor package we developed to simplify the analysis of large PharmacoGenomic Datasets.\n              All the datasets included in PharmacoDB are available as R objects for analysis using PharmacoGx, with both the\n              pharmacological and molecular data from each study. PharmacoGx incorporates all the annotations of each study\n              available in PharmacoDB, and provides a suite of statistical modeling functions to jointly analyze molecular\n              features and drug dose-response curves.\n            </p>\n            <p>\n              PharmacoGx is simple to start using once R is installed and running on your system. If its your first time using\n              PharmacoGx, download and install the package and all its dependencies by opening an R console and running the\n              following commands:\n            </p>\n          </span>\n          <div className=\"code-container\">\n            source(\"http://www.bioconductor.org/biocLite.R\")\n            biocLite(\"PharmacoGx\")\n          </div>\n          <span>\n            After installing for the first time, to load the package you can run the following command in your R session:\n          </span>\n          <div className=\"code-container\">\n            library(PharmacoGx)\n          </div>\n          <span>\n            To download a PharmacoSet object with all the pharmacological and molecular data for {dataset.name} and begin\n            analysing the data, you can use the following commands.\n          </span>\n          <div className=\"code-container\">\n            <p>\n              # <i>Download the object for {dataset.name}</i><br/>\n              {dataset.name} &lt;- downloadPSet({dataset.name})<br/>\n            </p>\n            <p>\n              # <i>Plot Drug Dose response curves, using the same names for compounds and cell lines as PharmacoDB</i><br/>\n              drugDoseResponseCurve({dataset.name}, drug=\"paclitaxel\", cell=\"MCF-7\")<br/>\n            </p>\n            {\n              ![\"FIMM\",\"CTRPv2\"].includes(dataset.name) ?\n                  (\n                      <React.Fragment>\n                        <p>\n                          # <i>Extract the expression data to a matrix</i><br/>\n                          {dataset.name}.expression &lt;- summarizeMolecularProfiles({dataset.name}, mDataType=\"rna\")<br/>\n                        </p>\n                        <p>\n                          # <i>Run a linear model for univariate biomarker discovery</i><br/>\n                          {dataset.name}.sensitivity.signatures &lt;- drugSensitivitySig({dataset.name}, mDataType=\"rna\", sensitivity.measure=\"auc_recomputed\")\n                        </p>\n                      </React.Fragment>\n                  )\n                  :\n                  ''\n            }\n          </div>\n          <span>\n          To learn more about the PharmacoGx package, you can download the full documentation and vignettes through our\n          Bioconductor page:\n          <a href=\"https://bioconductor.org/packages/release/bioc/html/PharmacoGx.html\" target=\"_blank\"> PharmacoGx</a>\n        </span>\n        </div>\n      </StyledDescription>\n  );\n}\n\nexport default PharmacoGxDescription;\n","const datasets = {\n  1: {\n    id: 1,\n    name: 'CCLE',\n    acr: 'Broad-Novartis Cancer Cell Line Encyclopedia (CCLE)',\n    acr_ref: '',\n    des: 'The Cancer Cell Line Encyclopedia (CCLE) project is a collaboration between the Broad Institute, the Novartis Institutes for Biomedical Research, and its Genomics Institute of the Novartis Research Foundation to conduct a detailed genetic and pharmacologic characterization of a large panel of human cancer models, to develop integrated computational analyses that link distinct pharmacologic vulnerabilities to genomic patterns and to translate cell line integrative genomics into cancer patient stratification. The CCLE provides public access to genomic data as well as analysis and visualization for about 1000 cell lines.',\n    resource: [\n      { id: '0', name: 'CCLE website', urlextern: 'http://www.broadinstitute.org/ccle/home' },\n      { id: '1', name: 'RNA-seq on NCI Genomic Data Commons', urlextern: 'https://portal.gdc.cancer.gov/legacy-archive/search/f' },\n    ],\n    pub: [\n      {\n        id: '0',\n        title: 'The Cancer Cell Line Encyclopedia enables predictive modelling of anticancer drug sensitivity, Nature 2012',\n        url: 'http://www.nature.com/nature/journal/v483/n7391/full/nature11003.html',\n      },\n    ],\n    dtype: [\n      {\n        type: 'Pharmacological', platform: 'CellTiter Glo', raw: 'Yes', processed: ['AUC', 'IC50'],\n      },\n      {\n        type: 'mRNA Expression', platform: 'Affymetrix HG-U133PLUS2', raw: 'Yes', processed: ['BrainArray', 'RMA'],\n      },\n      {\n        type: 'mRNA Expression', platform: 'Illumina RNA-seq', raw: 'Yes', processed: ['No'],\n      },\n      {\n        type: 'DNA Copy Number',\n        platform: 'Affymetrix SNP 6.0',\n        raw: 'Yes',\n        processed: ['Birdseed', 'Normalized log2 ratios'],\n      },\n      {\n        type: 'DNA Mutation', platform: 'OncoMap', raw: 'No', processed: ['MAF'],\n      },\n      {\n        type: 'DNA Mutation', platform: 'Hybrid Capture', raw: 'Yes', processed: ['MAF'],\n      },\n      {\n        type: 'DNA Mutation', platform: 'Illumina WES/WGS', raw: 'Yes', processed: ['MAF'],\n      },\n    ],\n  },\n  2: {\n    id: 2,\n    name: 'CTRPv2',\n    acr: 'Cancer Therapeutics Response Portal version 2 (CTRPv2)',\n    acr_ref: '',\n    des: 'The Cancer Therapeutics Response Portal was developed by the Center for the Science of Therapeutics at the Broad Institute to screen a large panel of cancer cell lines for sensitivity to small molecules. CTRPv2 is a continuation of the CTRP project and the largest pharmacological screen conducted to date, containing several hundreds of thousands of drug dose-response curves.',\n    resource: [\n      { id: '0', name: 'Homepage', urlextern: 'http://www.broadinstitute.org/ctrp/' },\n      { id: '1', name: 'NCI Open Access Data Portal', urlextern: 'https://ctd2.nci.nih.gov/dataPortal/' },\n    ],\n    pub: [\n      {\n        id: '0',\n        title: '\"Correlating chemical sensitivity and basal gene expression reveals mechanism of action\", Rees et al., Nat Chem Biol, 12, 109-116 (2016);',\n        url: 'http://www.ncbi.nlm.nih.gov/pubmed/26656090',\n      },\n      {\n        id: '1',\n        title: '\"Harnessing Connectivity in a Large-Scale Small-Molecule Sensitivity Dataset\", Seashore-Ludlow et al., Cancer Discovery, 5, 1210-1223 (2015);',\n        url: 'http://www.ncbi.nlm.nih.gov/pubmed/26482930',\n      },\n      {\n        id: '2',\n        title: '\"An Interactive Resource to Identify Cancer Genetic and Lineage Dependencies Targeted by Small Molecules\", Basu, Bodycombe, Cheah, et al., Cell, 154, 1151-1161 (2013).',\n        url: 'http://www.ncbi.nlm.nih.gov/pubmed/23993102',\n      },\n    ],\n    dtype: [\n      {\n        type: 'Pharmacological', platform: 'CellTiter Glo', raw: 'Yes', processed: ['AUC', 'IC50'],\n      },\n    ],\n  },\n  3: {\n    id: 3,\n    name: 'FIMM',\n    acr: 'Institute for Molecular Medicine Finland (FIMM)',\n    acr_ref: '',\n    des: 'The Institute for Molecular Medicine Finland (FIMM) cell line sensitivity dataset consists of cancer cell lines screened with a small set of anti-cancer therapies profiled using a platform developed for an Individualized Systems Medicine approach for screening patient tumour. The study sought to establish the effects of concentration range, cell viability assay and sensitivity measures on consistency in drug response profiling and argue for the standardization of protocols across laboratories to improve the utility of in vitro screening for personalized medicine approaches.',\n    resource: [],\n    pub: [\n      {\n        id: '0',\n        title: 'Mpindi, J. P. et al. Consistency in drug response profiling. Nature 540, E5–E6 (2016).',\n        url: 'https://www.nature.com/nature/journal/v540/n7631/full/nature20171.html',\n      },\n      {\n        id: '1',\n        title: 'Pemovska, T. et al. Individualized Systems Medicine Strategy to Tailor Treatments for Patients with Chemorefractory Acute Myeloid Leukemia. Cancer Discov 3, 1416–1429 (2013).',\n        url: 'https://cancerdiscovery.aacrjournals.org/content/3/12/1416',\n      },\n    ],\n    dtype: [\n      {\n        type: 'Pharmacological', platform: 'CellTiter Glo', raw: 'Yes', processed: ['DSS'],\n      },\n    ],\n  },\n  4: {\n    id: 4,\n    name: 'GDSC1',\n    acr: 'Genomics of Drug Sensitivity in Cancer (GDSC)',\n    acr_ref: '',\n    des: 'The Genomics of Drug Sensitivity in Cancer \\u200B(GDSC) \\u200BProject is part of a Wellcome Trust funded collaboration between The Cancer Genome Project at the Wellcome Trust Sanger Institute (UK) and the Center for Molecular Therapeutics,\\u200B Massachusetts General Hospital Cancer Center (USA). As part of this collaboration,\\u200B the GDSC group is screening > 1000 genetically characterised human cancer cell lines with a wide range of anti-cancer therapeutics. These compounds include cytotoxic chemotherapeutics as well as targeted therapeutics from commercial sources, academic collaborators,\\u200B and from the biotech and pharmaceutical industries. The sensitivity patterns of the cell lines are correlated with extensive \\u200B(epi)genomic and expression data to identify genetic features that are predictive of sensitivity. This large collection of cell lines aims at capturing much of the genomic heterogeneity that underlies human cancer, and which appears to play a critical role in determining the variable response of patients to treatment with specific agents.\\n\\n The GDSC1 data specifically refers to the original cell screening platform used by GDSC for performing drug screening, used between 2009 and 2015.',\n    resource: [\n      { id: '0', name: 'GDSC website', urlextern: 'http://www.cancerrxgene.org/' },\n      {\n        id: '1',\n        name: 'Microarray gene expression data',\n        urlextern: 'https://www.ebi.ac.uk/arrayexpress/experiments/E-MTAB-783/',\n      },\n    ],\n    pub: [\n      {\n        id: '0',\n        title: 'Systematic identification of genomic markers of drug sensitivity in cancer cells, Nature 2012',\n        url: 'http://www.nature.com/nature/journal/v483/n7391/full/nature11005.html',\n      },\n      {\n        id: '1',\n        title: 'Genomics of Drug Sensitivity in Cancer (GDSC): a resource for therapeutic biomarker discovery in cancer cells, Nucleic Acids Research 2013',\n        url: 'http://nar.oxfordjournals.org/content/41/D1/D955',\n      },\n    ],\n    dtype: [\n      {\n        type: 'Pharmacological', platform: 'Syto60', raw: 'Yes', processed: ['AUC', 'IC50'],\n      },\n      {\n        type: 'mRNA Expression', platform: 'Affymetrix HG-U133A', raw: 'Yes', processed: ['RMA'],\n      },\n      {\n        type: 'DNA Copy Number', platform: 'Affymetrix SNP 6.0', raw: 'Yes', processed: ['PICNIC'],\n      },\n      {\n        type: 'DNA Mutation', platform: 'Sanger', raw: 'No', processed: ['CSV'],\n      },\n      {\n        type: 'DNA Mutation', platform: 'Illumina WES/WGS', raw: 'Yes', processed: ['MAF'],\n      },\n      {\n        type: 'DNA Methylation', platform: 'Illumina array 450K', raw: 'Yes', processed: ['GenomeStudio'],\n      },\n    ],\n  },\n  5: {\n    id: 5,\n    name: 'GDSC2',\n    acr: 'Genomics of Drug Sensitivity in Cancer (GDSC)',\n    acr_ref: '',\n    des: 'The Genomics of Drug Sensitivity in Cancer \\u200B(GDSC) \\u200BProject is part of a Wellcome Trust funded collaboration between The Cancer Genome Project at the Wellcome Trust Sanger Institute (UK) and the Center for Molecular Therapeutics,\\u200B Massachusetts General Hospital Cancer Center (USA). As part of this collaboration,\\u200B the GDSC group is screening > 1000 genetically characterised human cancer cell lines with a wide range of anti-cancer therapeutics. These compounds include cytotoxic chemotherapeutics as well as targeted therapeutics from commercial sources, academic collaborators,\\u200B and from the biotech and pharmaceutical industries. The sensitivity patterns of the cell lines are correlated with extensive \\u200B(epi)genomic and expression data to identify genetic features that are predictive of sensitivity. This large collection of cell lines aims at capturing much of the genomic heterogeneity that underlies human cancer, and which appears to play a critical role in determining the variable response of patients to treatment with specific agents.\\n\\n The GDSC2 data specifically refers to newer cell screening platform used by GDSC for performing drug screening, used starting  2015.',\n    resource: [\n      { id: '0', name: 'GDSC website', urlextern: 'http://www.cancerrxgene.org/' },\n      {\n        id: '1',\n        name: 'Microarray gene expression data',\n        urlextern: 'https://www.ebi.ac.uk/arrayexpress/experiments/E-MTAB-783/',\n      },\n    ],\n    pub: [\n      {\n        id: '0',\n        title: 'Systematic identification of genomic markers of drug sensitivity in cancer cells, Nature 2012',\n        url: 'http://www.nature.com/nature/journal/v483/n7391/full/nature11005.html',\n      },\n      {\n        id: '1',\n        title: 'Genomics of Drug Sensitivity in Cancer (GDSC): a resource for therapeutic biomarker discovery in cancer cells, Nucleic Acids Research 2013',\n        url: 'http://nar.oxfordjournals.org/content/41/D1/D955',\n      },\n    ],\n    dtype: [\n      {\n        type: 'Pharmacological', platform: 'CellTiter Glo', raw: 'Yes', processed: ['AUC', 'IC50'],\n      },\n      {\n        type: 'mRNA Expression', platform: 'Affymetrix HG-U133A', raw: 'Yes', processed: ['RMA'],\n      },\n      {\n        type: 'DNA Copy Number', platform: 'Affymetrix SNP 6.0', raw: 'Yes', processed: ['PICNIC'],\n      },\n      {\n        type: 'DNA Mutation', platform: 'Sanger', raw: 'No', processed: ['CSV'],\n      },\n      {\n        type: 'DNA Mutation', platform: 'Illumina WES/WGS', raw: 'Yes', processed: ['MAF'],\n      },\n      {\n        type: 'DNA Methylation', platform: 'Illumina array 450K', raw: 'Yes', processed: ['GenomeStudio'],\n      },\n    ],\n  },\n  6: {\n    id: 6,\n    name: 'GRAY',\n    acr: \"Dataset generated in Dr. Joe Gray's lab at the Oregon Health and Science University\",\n    acr_ref: 'http://www.ohsu.edu/xd/education/schools/school-of-medicine/departments/basic-science-departments/biomedical-engineering/people/joe-gray.cfm',\n    des: 'As part of the Stand Up to Cancer Breast Cancer Dream Team, the Gray laboratory profiled over 70 breast cancer cell lines and screened them with 90 experimental or approved drugs.',\n    resource: [\n      { id: '0', name: 'Affymetrix SNP 6.0 part 1', urlextern: 'https://www.ebi.ac.uk/ega/studies/EGAS00000000059' },\n      { id: '1', name: 'Affymetrix SNP 6.0 part 2', urlextern: 'https://www.ebi.ac.uk/ega/studies/EGAS00001000585' },\n      { id: '2', name: 'Affymetrix Exon 1.0 ST array', urlextern: 'http://www.ebi.ac.uk/arrayexpress/experiments/E-TABM-181/' },\n      { id: '3', name: 'Affymetrix HG-U133A array', urlextern: 'http://www.ebi.ac.uk/arrayexpress/experiments/E-TABM-157/' },\n      { id: '4', name: 'llumina RNA-seq data', urlextern: 'http://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE48216' },\n      {\n        id: '5',\n        name: 'Illumina Methylation27 BeadChip',\n        urlextern: 'http://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE42944',\n      },\n      {\n        id: '6',\n        name: 'Reverse Protein Lysate Array',\n        urlextern: 'https://static-content.springer.com/esm/art%3A10.1186%2Fgb-2013-14-10-r110/MediaObjects/13059_2013_3164_MOESM2_ESM.xlsx',\n      },\n      { id: '7', name: 'Whole Exome-Seq', urlextern: 'http://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE48216' },\n    ],\n    pub: [\n      {\n        id: '0',\n        title: 'Subtype and pathway specific responses to anticancer compounds in breast cancer. Proceedings of the National Academy of Sciences 2011',\n        url: 'http://www.pnas.org/content/109/8/2724.abstract',\n      },\n      {\n        id: '1',\n        title: 'Modeling precision treatment of breast cancer, Genome Biology 2013',\n        url: 'http://genomebiology.biomedcentral.com/articles/10.1186/gb-2013-14-10-r110',\n      },\n    ],\n    dtype: [\n      {\n        type: 'Pharmacological', platform: 'CellTiter Glo', raw: 'Yes', processed: ['IC50'],\n      },\n      {\n        type: 'mRNA Expression', platform: 'Affymetrix HG-U133A', raw: 'Yes', processed: ['RMA'],\n      },\n      {\n        type: 'mRNA Expression', platform: 'Affymetrix GC Exon 1.0 ST', raw: 'Yes', processed: ['log-additive PLM'],\n      },\n      {\n        type: 'mRNA Expression', platform: 'Agilent Automation RNAseq', raw: 'Yes', processed: ['FPKM'],\n      },\n      {\n        type: 'DNA Copy Number', platform: 'Affymetrix SNP 6.0', raw: 'Yes', processed: ['GISTIC'],\n      },\n      {\n        type: 'Methylation', platform: 'Illumina Infinium Human Methylation27', raw: 'Yes', processed: ['Beta Values'],\n      },\n      {\n        type: 'Protein Expression', platform: 'RPPA', raw: 'No', processed: ['MicroVigene expression intensity'],\n      },\n      {\n        type: 'Exomeseq', platform: 'Agilent Automation', raw: 'Yes', processed: [],\n      },\n    ],\n  },\n  7: {\n    id: 7,\n    name: 'NCI60',\n    acr: \"National Cancer Institute 60\",\n    acr_ref: '',\n    des: 'The US National Cancer Institute 60 human tumor cell line anticancer drug screen was initiated in the late 1980 and continued to become one of the most well-established sources of drug sensitivity information. NCI60 dataset consists of molecular profiles of the 60 core human cell lines as well as the dose-response outcomes from screening more than 55000 compounds.',\n    resource: [\n      { id: '0', name: 'NCI60 dose-response data', urlextern: 'https://wiki.nci.nih.gov/display/NCIDTPdata/NCI-60+Growth+Inhibition+Data' },\n      { id: '1', name: 'CellMiner', urlextern: 'https://discover.nci.nih.gov/cellminer/' },\n    ],\n    pub: [\n      {\n        id: '0',\n        title: 'Shoemaker,R.H. (2006) The NCI60 human tumour cell line anticancer drug screen. Nat. Rev. Cancer, 6, 813–823.',\n        url: 'https://pubmed.ncbi.nlm.nih.gov/16990858/',\n      },\n    ],\n    dtype: [\n      {\n        type: 'Pharmacological', platform: 'Sulforhodamine B colorimetric', raw: 'Yes', processed: ['AAC', 'IC50'],\n      },\n      {\n        type: 'mRNA Expression', platform: 'Affymetrix HG-U133PLUS2', raw: 'No', processed: ['RMA (see CellMiner)'],\n      },\n      {\n        type: 'mRNA Expression', platform: 'Illumina RNA-seq', raw: 'No', processed: ['Isoforms (see CellMiner)'],\n      },\n      {\n        type: 'mRNA Expression', platform: 'Illumina RNA-seq', raw: 'No', processed: ['Composite expression (see CellMiner)'],\n      },\n      {\n        type: 'MicroRNA expression', platform: 'Agilent Human microRNA(v2)', raw: 'No', processed: ['GeneSpringGX (see CellMiner)'],\n      },\n    ],\n  },\n  8: {\n    id: 8,\n    name: 'PRISM',\n    acr: \"Profiling Relative Inhibition Simultaneously in Mixtures\",\n    acr_ref: '',\n    des: 'The PRISM dataset consists of dose-response data from assessing the anti-cancer effects of non-oncology drugs on human cancer cell-lines using the PRISM barcoding method developed by Broad Institute of MIT and Harvard.',\n    resource: [\n      { id: '0', name: 'PRISM drug repurposing resource', urlextern: 'https://depmap.org/repurposing/' },\n    ],\n    pub: [\n      {\n        id: '0',\n        title: 'Corsello,S.M., Nagari,R.T., Spangler,R.D., Rossen,J., Kocak,M., Bryan,J.G., Humeidi,R., Peck,D., Wu,X., Tang,A.A., et al. (2020) Discovering the anti-cancer potential of non-oncology drugs by systematic viability profiling. Nat Cancer, 1, 235–248.',\n        url: 'https://pubmed.ncbi.nlm.nih.gov/32613204/',\n      },\n      {\n        id: '1',\n        title: 'Yu,C., Mannan,A.M., Yvone,G.M., Ross,K.N., Zhang,Y.-L., Marton,M.A., Taylor,B.R., Crenshaw,A., Gould,J.Z., Tamayo,P., et al. (2016) High-throughput identification of genotype-specific cancer vulnerabilities in mixtures of barcoded tumor cell lines. Nat.',\n        url: 'https://pubmed.ncbi.nlm.nih.gov/26928769/',\n      },\n    ],\n    dtype: [\n      {\n        type: 'Pharmacological', platform: 'PRISM (Luminex)', raw: 'Yes', processed: ['AAC', 'IC50'],\n      },\n    ],\n  },\n  9: {\n    id: 9,\n    name: 'UHNBreast',\n    acr: 'University Health Network (UHN) Breast Cancer (BC) Screen',\n    acr_ref: '',\n    des: 'Molecular profiling and pharmacological screening of a selection of 84 breast cancer cell lines undertaken at the Princess Margaret Cancer Centre to identify cancer treatment targets and drug biomarkers.',\n    resource: [\n      { id: '0', name: 'Data Website', urlextern: 'http://neellab.github.io/bfg/' },\n      { id: '1', name: 'RNA-seq data', urlextern: 'http://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE73526' },\n      { id: '2', name: 'Functional genetic screen data', urlextern: 'http://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE74702' },\n    ],\n    pub: [\n      {\n        id: '0',\n        title: 'Functional Genomic Landscape of Human Breast Cancer Drivers, Vulnerabilities, and Resistance; Cell 2016',\n        url: 'http://www.cell.com/cell/abstract/S0092-8674(15)01624-4',\n      },\n    ],\n    dtype: [\n      {\n        type: 'Pharmacological', platform: 'Sulforhodamine B colorimetric', raw: 'Yes', processed: ['AUC', 'IC50'],\n      },\n      {\n        type: 'mRNA expression', platform: 'Illumina HiSeq 2000 RNAseq', raw: 'Yes', processed: ['FPKM'],\n      },\n      {\n        type: 'DNA Copy Number', platform: 'Illumina Human Omni-Quad', raw: 'No', processed: ['logR'],\n      },\n      {\n        type: 'Protein Expression', platform: 'RPPA', raw: 'No', processed: ['MicroVigene expression intensity'],\n      },\n    ],\n  },\n  10: {\n    id: 10,\n    name: 'gCSI',\n    acr: 'The Genentech Cell Line Screening Initiative (gCSI)',\n    acr_ref: '',\n    des: 'The Genentech Cell Line Screening Initiative (gCSI) was undertaken independently of CCLE and GDSC to to address the concerns of inconsistencies across large-scale pharmacogenomic studies. In gCSI, Genentech independently characterized the response of 410 cancer cell lines to a subset ​agents tested by GDSC and CCLE. Genentech also evaluated three specific aspects of the screening protocols that are relevant to measured drug response: readout of cell viability (metabolic versus DNA content), seeding density strategy, and cell culture media conditions.',\n    resource: [\n      { id: '0', name: 'compareDrugScreens package', urlextern: 'http://research-pub.gene.com/gCSI-cellline-data' },\n      { id: '1', name: 'RNA-seq data', urlextern: 'https://www.ebi.ac.uk/arrayexpress/experiments/E-MTAB-2706/' },\n      { id: '2', name: 'RNA-seq and SNP array data', urlextern: 'https://ega-archive.org/studies/EGAS00001000610' },\n    ],\n    pub: [\n      {\n        id: '0',\n        title: 'A comprehensive transcriptional portrait of human cancer cell lines, Nature Biotechnology 2015',\n        url: 'https://www.nature.com/articles/nbt.3080',\n      },\n      {\n        id: '1',\n        title: 'Reproducible pharmacogenomic profiling of cancer cell line panels, Nature 2016',\n        url: 'https://www.nature.com/articles/nature17987',\n      },\n    ],\n    dtype: [\n      {\n        type: 'Pharmacological', platform: 'CellTiter Glo', raw: 'Yes', processed: ['AUC', 'IC50'],\n      },\n      {\n        type: 'mRNA expression', platform: 'Illumina RNA-seq', raw: 'Yes', processed: ['VSN/DESeq counts', 'RPKM'],\n      },\n      {\n        type: 'DNA Copy Number', platform: 'Illumina 2.5M SNP', raw: 'Yes', processed: ['PICNIC'],\n      },\n      {\n        type: 'DNA Mutation', platform: 'Sanger', raw: 'No', processed: ['CSV'],\n      },\n    ],\n  },\n};\nexport default datasets;\n","import React from 'react';\nimport styled from 'styled-components';\nimport ScrollToTop from 'react-scroll-to-top';\nimport Layout from '../../../UtilComponents/Layout';\nimport PharmacoGxDescription from './PharmacoGxDescription';\nimport datasets from '../datasets'\nimport 'react-scroll-to-top/lib/index.css';\n\nconst StyledCiteUs = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`;\n\n/**\n * Parent component for the pharmacogx page,\n * includes child components for the description.\n *\n * @component\n * @example\n *\n * return (\n *   <PharmacoGx/>\n * )\n */\nconst PharmacoGx = (props) => {\n    // parameter.\n    const {\n        match: { params },\n    } = props;\n    const dataset = datasets[params.id];\n    return (\n     <Layout page=\"PharmacoGx\">\n         <ScrollToTop smooth />\n         <StyledCiteUs>\n             <PharmacoGxDescription dataset={({ id: dataset.id, name: dataset.name })}/>\n         </StyledCiteUs>\n     </Layout>\n    );\n}\n\nexport default PharmacoGx;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport {Link} from 'react-router-dom'\nimport colors from '../../../styles/colors';\nimport cellExmp from '../../../images/DocumentationImages/exmpMCF-7.png';\nimport tissueExmp from '../../../images/DocumentationImages/exmpBreast.png';\nimport drugExmp from '../../../images/DocumentationImages/exmpPaclitaxel.png';\nimport cellDrugExmp from '../../../images/DocumentationImages/exmpMCF-7Paclitaxel.png';\n\nconst StyledDescription = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    text-align: justify;\n\n    width: 70%;\n    margin-top: 8vh;\n\n    .text-container {\n        width: 100%;\n\n        display: flex;\n        flex-direction: column;\n\n        span {\n            font-size: calc(0.5vw + 0.7em);\n            line-height: calc(1vw + 1em);\n        }\n\n        h1 {\n            color: ${colors.dark_teal_heading};\n            font-family: 'Roboto Slab', serif;\n            font-size: calc(1.8vw + 1em) !important;\n            margin-bottom: 4vh;\n        }\n        \n        img {\n          margin-top: 5px;\n        }\n\n        .caption {\n          text-align: left;\n          margin-bottom: 10px;\n          color: ${colors.silver};\n          font-size: clamp(12px, calc(1vw + 2px), 15px);;\n        }\n      \n        .paragraph {\n          margin-bottom: 15px;\n        }\n    }\n\n    /* mobile */\n    @media only screen and (max-width: 1081px) {\n        .text-container{\n          width:100%;\n        }\n    } \n`;\n\n/**\n * Shows the description on the about us page\n *\n * @component\n * @example\n *\n * return (\n *   <AboutUsDescription/>\n * )\n */\nconst AboutUsDescription = () => {\n  const [showCell, setShowCell] = React.useState(false);\n  const [showTissue, setShowTissue] = React.useState(false);\n  const [showDrug, setShowDrug] = React.useState(false);\n  const [showDDRC, setShowDDRC] = React.useState(false);\n  const onClick = (selected) => {\n    if (selected === \"cell\") setShowCell(!showCell)\n    else if (selected === \"tissue\") setShowTissue(!showTissue)\n    else if (selected === \"drug\") setShowDrug(!showDrug)\n    else if (selected === \"ddrc\") setShowDDRC(!showDDRC)\n  }\n  return(\n    <StyledDescription>\n      <div className=\"text-container\">\n        <h1>\n          About PharmacoDB\n        </h1>\n        <span>\n          <p>High throughput drug screening technologies have enabled the profiling of hundreds of cancer cell lines to a\n          large variety of small molecules to discover novel and repurposed treatments. Several large studies have been\n          publicly released testing candidate molecules, often with corresponding molecular profiles of the cell lines\n          used for drug screening. These studies have become invaluable resources for the research community, allowing\n          researchers to leverage the collected data to support their own research. However, such pharmacogenomic datasets\n          are disparate and lack of standardization for cell line and drug identifiers, and used heterogeneous data format\n          for the drug sensitivity measurements.</p>\n          <p>To address these issues, we developed PharmacoDB, a web-application assembling the largest in vitro drug screens\n          in a single database, and allowing users to easily query the union of studies released to date. PharmacoDB\n          allows scientists to search across publicly available datasets to find instances where a compound or cell line of\n          interest has been profiled, and to view and compare the dose-response data for a specific cell line - compound pair\n          from any of the studies included in the database.</p>\n          <p>If you use PharmacoDB in your research please cite the following publication:<br/>\n          <ul>\n            <li>\n              <a href=\"https://academic.oup.com/nar/article/46/D1/D994/4372597\" target=\"_blank\">Smirnov, Petr, et al. \"PharmacoDB: an integrative database for mining in vitro anticancer drug\n                screening studies.\" Nucleic Acids Research (2017).</a>\n            </li>\n          </ul>\n            Go to the <Link to=\"./cite\">Cite Us!</Link> page for more details.</p>\n        </span><br/><br/><br/>\n        <h1>\n          Examples of queries\n        </h1>\n        <span>\n          <div className=\"paragraph\">Cell lines? Try typing <a id=\"hide-cl-overlay\" href=\"javaScript:void(0);\" onClick={() =>onClick(\"cell\")}>MCF-7</a>\n            {\n              showCell ?\n                  <div className=\"caption\" id=\" overlay-caption\">\n                    <img  height=\"auto\" width=\"520px\" alt=\"Searching MCF-7\" className=\"documentation\" src={cellExmp} title=\"Query cell line\"/><br/>\n                    Example search for a cell line.\n                  </div>\n                : null\n            }\n          </div>\n          <div className=\"paragraph\">Tissues? Try typing <a id=\"hide-t-overlay\" href=\"javaScript:void(0);\" onClick={() =>onClick(\"tissue\")}>Breast</a>\n            {\n              showTissue ?\n                  <div className=\"caption\" id=\" overlay-caption\">\n                    <img  height=\"auto\" width=\"520px\" alt=\"Searching Breast\" className=\"documentation\" src={tissueExmp} title=\"Query tissue\"/><br/>\n                    Example search for a tissue.\n                  </div>\n                : null\n            }\n          </div>\n          <div className=\"paragraph\">Compounds? Try typing <a id=\"hide-d-overlay\"href=\"javaScript:void(0);\" onClick={() =>onClick(\"drug\")}>Paclitaxel</a>\n            {\n              showDrug ?\n                    <div className=\"caption\" id=\" overlay-caption\">\n                      <img  height=\"auto\" width=\"520px\" alt=\"Searching Paclitaxel\" className=\"documentation\" src={drugExmp} title=\"Query drug\"/><br/>\n                      Example search for a compound.\n                    </div>\n                  : null\n            }\n          </div>\n          <div className=\"paragraph\">Compound dose-response curves? Try typing <a id=\"hide-ddrc-overlay\" href=\"javaScript:void(0);\" onClick={() =>onClick(\"ddrc\")}>MCF-7 Paclitaxel</a>\n            {\n              showDDRC ?\n\n                    <div className=\"caption\" id=\" overlay-caption\">\n                      <img  height=\"auto\" width=\"550px\" alt=\"Searching MCF-7 Paclitaxel\" className=\"documentation\" src={cellDrugExmp} title=\"Query dose-response curve\"/><br/>\n                      Example search for a compound dose-response curve. </div>\n                  : null\n            }\n          </div>\n          <div><Link to=\"/\">Start searching</Link> across pharmacogenomic datasets and do not hesitate to give us feedback on\n            <a href=\"https://github.com/bhklab/PharmacoDB-JS\" target=\"_blank\"> GitHub</a>.</div>\n        </span><br/><br/><br/>\n        <h1>\n          About the Lab\n        </h1>\n        <span>\n          The <a href=\"https://www.pmgenomics.ca/bhklab/\" target=\"_blank\">BHKLAB </a>\n          is composed of a multidisciplinary team of researchers analyzing high-dimensional molecular and imaging data to\n          develop new predictive tools foranticancer therapies. We develop databases and analysis pipelines to leverage\n          large compendia of pharmacogenomic datasets for biomarker discovery and compound repurposing. The BHKLAB is part of\n          the Princess Margaret Cancer Centre – University Health Network, located in the heart of the Toronto Discovery\n          District in Ontario, Canada. <br/>\n          <iframe\n              src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2886.4364889480303!2d-79.39081378450204!3d43.65989117912103!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x882b34b632b77689%3A0x901c210dff19e5a4!2s101+College+St%2C+Toronto%2C+ON+M5G+1L7!5e0!3m2!1sen!2sca!4v1502307889999\"\n              width=\"100%\" height=\"600\" align=\"center\" allowFullScreen>\n          </iframe>\n        </span>\n      </div>\n    </StyledDescription>\n)};\n\nexport default AboutUsDescription;\n","import React from 'react';\nimport styled from 'styled-components';\nimport ScrollToTop from 'react-scroll-to-top';\nimport Layout from '../../UtilComponents/Layout';\nimport AboutUsDescription from './AboutUsDescription';\nimport 'react-scroll-to-top/lib/index.css';\n\nconst StyledAboutUs = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin-bottom: 200px;\n`;\n\n/**\n * Parent component for the home page,\n * includes child components for the description and stats.\n *\n * @component\n * @example\n *\n * return (\n *   <Home/>\n * )\n */\nconst AboutUs = () => (\n    <Layout page=\"about\">\n        <ScrollToTop smooth />\n        <StyledAboutUs>\n            <AboutUsDescription />\n        </StyledAboutUs>\n    </Layout>\n);\n\nexport default AboutUs;\n","import { gql } from 'apollo-boost';\n\n\n/**\n * @returns - ids and names of all the compounds\n */\nconst getCompoundsIdNameQuery = gql`\n  query getAllCompoundIdsAndNames {\n    compounds(all: true) {\n      id\n      name\n      uid\n    }\n  }\n`;\n\n/**\n * @param {boolean} all - takes a boolean value if to search all the compounds or not.\n * @returns - Query returns the list of compounds with the id and name of the compound\n * and returning the annotation object for each of the compound in the database.\n */\nconst getCompoundsQuery = gql`\n  query getAllCompounds {\n    compounds(all: true) {\n      id\n      name\n      uid\n      annotation {\n        pubchem\n        chembl\n        fda_status\n      }\n    }\n  }\n`;\n\n/**\n * @param { number } compoundId - takes the compound id as the argument to the query.\n * @returns - Query returns info of compound object for the given id and\n * also returns all the synonyms for that compound in different datasets\n * and also providing the target object.\n */\nconst getCompoundQuery = gql`\n  query getSingleCompound($compoundId: Int, $compoundName: String, $compoundUID: String) {\n    singleCompound: compound(compoundId: $compoundId, compoundName: $compoundName, compoundUID: $compoundUID) {\n      compound {\n        id\n        name\n        uid\n        annotation {\n          smiles\n          inchikey\n          pubchem\n          fda_status\n          chembl\n          reactome\n        }\n      }\n      synonyms {\n        name\n        dataset {\n          id\n          name\n        }\n      }\n      targets {\n        target_id\n        target_name\n        genes {\n          id\n          name\n          annotation {\n            symbol\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst disableDrug = gql`\n  {\n    drug @client\n  }\n`;\n\nexport {\n  getCompoundsQuery,\n  getCompoundQuery,\n  disableDrug,\n  getCompoundsIdNameQuery,\n};\n","import { gql } from 'apollo-boost';\n\n// Fragment containing the gene id, name and annotation.\n// This fragment is currently not used due to some issues, maybe removed from the code base.\nconst GENE_FIELDS = gql`\n  fragment GeneFields on Gene {\n    id\n    name\n    annotation {\n        gene_id\n        symbol\n        gene_seq_start\n        gene_seq_end\n        chr\n        strand\n    }\n  }\n`;\n\n/**\n * @returns the ids and symbols for all the genes in the dataset.\n */\nconst getGenesIdSymbolQuery = gql`\n  query getAllGeneIdSymbols {\n      genes(all: true) {\n          id\n          annotation {\n              symbol\n          }\n      }\n  }\n`;\n\n/**\n * @param {boolean} all - takes a boolean value if to search all the genes or not.\n * @returns - Query returns the list of genes with the id and name of the gene\n * and also returning the annotation object for each of the gene in the database.\n */\nconst getGenesQuery = gql`\n    query getAllGenes {\n        genes(all: true) {\n            id\n            name\n            annotation {\n                gene_id\n                symbol\n                gene_seq_start\n                gene_seq_end\n                chr\n                strand\n            }\n        }\n    }\n`;\n\n/**\n * @param {number} geneId - gene id for which the data is needed.\n * @returns - the information for the queried gene.\n */\nconst getGeneQuery = gql`\n    query getSingleGene($geneId: Int, $geneName: String) {\n        gene(geneId: $geneId, geneName: $geneName) {\n            id\n            name\n            annotation {\n                gene_id\n                symbol\n                gene_seq_start\n                gene_seq_end\n                chr\n                strand\n            }\n        }\n    }\n`;\n\n\nexport {\n    getGenesQuery,\n    getGeneQuery,\n    getGenesIdSymbolQuery,\n};\n","import { gql } from 'apollo-boost';\n\n/**\n * @param {boolean} all - takes a boolean value if to search all the genes or not.\n * @returns - Query returns the list of tissues with the id and name of a single tissue.\n */\nconst getTissuesQuery = gql`\n  query getAllTissues {\n    tissues(all: true) {\n      id\n      name\n    }\n  }\n`;\n\n/**\n * @param {string} tissueName - name of the tissue.\n */\nconst getTissueIdBasedOnTissueName = gql`\n  query getTissueIdBasedOnTissueName($tissueName: String!) {\n    tissue(tissueName: $tissueName) {\n      id\n      name\n    }\n  }\n`;\n\n/**\n * @param { number } tissueId - tissue id of the tissue to be queried.\n */\nconst getTissueQuery = gql`\n  query getSingleTissue($tissueId: Int!) {\n    tissue(tissueId: $tissueId) {\n      id\n      name\n      synonyms {\n        name\n        dataset {\n          id\n          name\n        }\n      }\n      cell_count {\n        dataset {\n          name\n        }\n        count\n      }\n      compounds_tested {\n        dataset {\n          name\n          id\n        }\n        count\n      }\n    }\n  }\n`;\n\nexport {\n  getTissuesQuery,\n  getTissueQuery,\n  getTissueIdBasedOnTissueName,\n};\n","import { gql } from 'apollo-boost';\n\n// variable storing the gene compound fields.\nconst geneCompound = `\n    id\n    gene {\n        id\n        name\n        annotation {\n            symbol\n            gene_seq_start\n            gene_seq_end\n        }\n    }\n    compound {\n        id\n        uid\n        name\n    }\n`;\n\n/**\n * @param {number} geneId - gene id for which the data is needed.\n * @returns - the information for the queried gene.\n */\nconst getGeneCompoundDatasetQuery = gql`\n    query getGeneCompoundDataset($geneId: Int, $geneName: String, $compoundId: Int, $compoundName: String) {\n        gene_compound_dataset(geneId: $geneId, geneName: $geneName, compoundId: $compoundId, compoundName: $compoundName, all: true) {\n            ${geneCompound}\n            dataset {\n                id\n                name\n            }\n            permutation_done\n            fdr_analytic\n            fdr_permutation\n            lower_analytic\n            upper_analytic\n            upper_permutation\n            lower_permutation\n            estimate\n            pvalue_analytic\n            pvalue_permutation\n            significant_permutation\n            fdr_analytic\n            fdr_permutation\n            sens_stat\n            mDataType\n            n\n        }\n    }\n`;\n\n/**\n * @param {number} geneId/compoundId - gene/compound id for which the data is needed.\n * @returns - the information for the queried gene.\n */\nconst getGeneCompoundTissueDatasetQuery = gql`\n    query getGeneCompoundTissueDataset($geneId: Int, $compoundId: Int, $tissueId: Int, $geneName: String, $compoundName: String, $tissueName: String) {\n        gene_compound_tissue_dataset(geneId: $geneId, compoundId: $compoundId, tissueId: $tissueId, geneName: $geneName, compoundName: $compoundName, tissueName: $tissueName, all: true) {\n            ${geneCompound}\n            dataset {\n                id\n                name\n            }\n            tissue {\n                id\n                name\n            }\n            permutation_done\n            fdr_analytic\n            fdr_permutation\n            lower_analytic\n            upper_analytic\n            upper_permutation\n            lower_permutation\n            estimate\n            pvalue_analytic\n            pvalue_permutation\n            significant_permutation\n            fdr_analytic\n            fdr_permutation\n            sens_stat\n            mDataType\n            n\n        }\n    }\n`;\n\n/**\n * Query used to get data for the tissue specific Manhattan plot on Biomarker page.\n * @param compoundId/compoundName - identifier for the compound.\n * @param tissueId/tissueName = identifier for the tissue.\n * @param mDataType - selected molecular data type\n */\nconst getTissueSpecificManhattanPlotDataQuery = gql`\n    query getManhattanPlotDataQuery($compoundId: Int, $tissueId: Int, $compoundName: String, $tissueName: String, $mDataType: String) {\n        gene_compound_tissue_dataset_biomarker(compoundId: $compoundId, tissueId: $tissueId, compoundName: $compoundName, tissueName: $tissueName, mDataType: $mDataType, all: true) {\n            gene {\n                id\n                name\n                annotation {\n                    symbol\n                    chr\n                    gene_seq_start\n                    gene_seq_end\n                }\n            }\n            dataset {\n                id\n                name\n            }\n            fdr_analytic\n            fdr_permutation\n            mDataType\n        }\n    }\n`;\n\n/**\n * Query used to get data for the pan cancer Manhattan plot on Biomarker page. (without specified tissue)\n * @param compoundId/compoundName - identifier for the compound.\n * @param mDataType - selected molecular data type\n */\nconst getPanCancerManhattanPlotDataQuery = gql`\n    query getPanCancerManhattanPlotDataQuery($compoundId: Int, $compoundName: String, $mDataType: String) {\n        gene_compound_dataset_biomarker(compoundId: $compoundId, compoundName: $compoundName, mDataType: $mDataType, all: true) {\n            gene {\n                id\n                name\n                annotation {\n                    symbol\n                    chr\n                    gene_seq_start\n                    gene_seq_end\n                }\n            }\n            dataset {\n                id\n                name\n            }\n            fdr_analytic\n            fdr_permutation\n            mDataType\n        }\n    }\n`;\n\nexport {\n    getGeneCompoundDatasetQuery,\n    getGeneCompoundTissueDatasetQuery,\n    getTissueSpecificManhattanPlotDataQuery,\n    getPanCancerManhattanPlotDataQuery\n};\n","/**\n *\n * @param {String} string - Takes string as an input (eg. adrenal gland).\n * @param {String} splitBy - second agrument is to split the string by. (eg '_', adernal_gland)\n * @returns {String} - returns a transformed string with the first letter capitalized for each word in the string(Title Case, eg. Adrenal Gland).\n */\nconst convertToTitleCase = (string = '', splitBy = ' ') => {\n    if (typeof (string) !== 'string') {\n        return Error('Enter a valid string!!')\n    }\n\n    const capitalString = string.split(splitBy).map((str) => {\n        if (str === 'and') {\n            return str;\n        }\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    });\n\n    return capitalString.join(' ');\n};\n\nexport default convertToTitleCase;\n","import styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport colors from './colors';\n\nconst StyledWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    width: 85%;\n    margin-bottom: 100px;\n\n    & > * {\n        width: 85%;\n\n        @media only screen and (max-width: 1081px) { \n            width: 85%;\n        }\n    }\n\n    h1, h2, h3, h4 {\n        color: ${colors.dark_teal_heading};\n        font-family: Raleway, sans-serif;\n        text-align: center;\n    }\n\n    h1 {\n        font-size: calc(1.75vw + 1.5em);\n        margin-bottom: 25px;\n    }\n\n    h2 {\n        font-size: calc(0.80vw + 1em);\n        margin: 15px;\n    }\n\n    .new-section {\n        margin-top: 3rem;\n    }\n\n    h3 {\n        font-size: calc(0.6vw + 0.9em);\n    }\n\n    h4 {\n        font-size: calc(0.5vw + 0.7em);\n    }\n`;\n\nStyledWrapper.propTypes = {\n    individual: PropTypes.bool,\n    summary: PropTypes.bool,\n};\nStyledWrapper.defaultProps = {\n    /**\n   * important for searchheader blur\n   */\n    className: 'page',\n};\n\nexport default StyledWrapper;\n","import styled from 'styled-components';\nimport colors from './colors';\n\nconst StyledIndivPage = styled.div`\n  .heading {\n    width: 100%;\n    margin-top: 10px;\n    margin-bottom: 30px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    color: ${colors.dark_teal_heading};\n\n    .title {\n      color: ${colors.dark_pink_highlight};\n      font-size: clamp(32px, calc(2vw + 10px), 44px);\n      font-weight: bold;\n      margin-left: 20%;\n      margin-top: 20px;\n      margin-bottom: 20px;\n      white-space: normal;\n      line-height: 40px;\n      .link {\n        color: ${colors.dark_teal_heading};\n      }\n    }\n\n    .attributes {\n      min-width: 200px;\n      margin-left: 10px;\n      .value {\n        margin-left: 5px;\n      }\n      .highlight {\n        color: ${colors.dark_pink_highlight};\n      }\n    }\n\n  };\n\n  .wrapper {\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n  }\n\n  .container {\n    width: 100%;\n    margin-top: 10px;\n    margin-left: 25px;\n    color: ${colors.dark_gray_text};\n    font-size: calc(1vw + 9px);\n    \n    display:flex;\n    align-items: flex-end;\n    flex-direction: column;\n    \n    .content{\n      // width: calc(100% - (5vw + 4em) - 2em);\n      width: 100%;\n    }\n  }\n  .section {\n    width: 100%;\n    margin-bottom: 50px;\n    text-align: justify;\n    .section-title {\n      font-size: clamp(18px, calc(1vw + 3px), 28px);\n      font-weight: bold;\n      margin-bottom: 10px;\n      color: ${colors.dark_teal_heading};\n    }\n    p {\n      font-size: clamp(14px, calc(1vw + 2px), 18px);\n    }\n    .download-button {\n      display: flex;\n      justify-content: flex-end;\n      margin-bottom: 5px;\n    }\n    .text {\n      font-size: clamp(12px, calc(1vw + 1px), 16px);\n    }\n  }\n  .temp {\n    height: 500px;\n  }\n  \n  h3, h4 {\n    text-align: left;\n    font-family: Raleway, sans-serif;\n  }\n\n  h6 {\n    text-align: left;\n    margin-top: 15px;\n    margin-bottom: 5px;\n    color: ${colors.silver};\n    font-size: clamp(12px, calc(1vw + 2px), 15px);;\n  }\n  \n  img {\n    margin-top: 25px;\n    margin-bottom: 25px;\n    align-items: center;\n  }\n\n  // full size container when too small\n  @media only screen and (max-width: 765px) {\n    .heading {\n      .title {\n        margin-left: 0px;\n      }\n    }\n    .container {\n      margin-left: 0px;\n    }\n    .wrapper {\n      flex-direction: column;\n    }\n    .content {\n      width: 100% !important;\n    }\n  }\n  .title {\n    min-height: 60px;\n  }\n  .plot , .title.plot{\n    h4, h5 {\n      text-align: center;\n      margin-top: 15px;\n      color: ${colors.dark_teal_heading};\n      font-size: clamp(14px, calc(1vw + 2px), 18px);\n    }\n  }\n`;\n\n/**\n * Used to reduce text size for a long individual page title.\n * Used in IndivCompounds.js to accommodate long compound names.\n */\nconst StyledIndivPageTitle = styled.span`\n  color: ${colors.dark_pink_highlight};\n  font-size: ${props => props.smalltxt ? `clamp(14px, calc(1vw + 10px), 20px)` : 'clamp(32px, calc(2vw + 10px), 44px)'};\n  font-weight: bold;\n  margin-left: 20%;\n  margin-right: 10px;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  white-space: normal;\n  line-height: 40px;\n  @media only screen and (max-width: 765px) {\n    margin-left: 0px;\n  }\n`;\n\nconst StyledSidebar = styled.div`\n  width: calc(5vw + 4em);\n  margin-top: 5vh;\n  padding: 5px 0px;\n  position:fixed;\n  .link {\n    display:block;\n    color: ${colors.dark_teal_heading};\n    border-right: 5px solid ${colors.light_blue_header};\n    font-size: calc(0.5vw + 0.7em);\n    font-family: 'Overpass', sans-serif;\n    text-align: right;\n    padding:20px 20px 20px 0px;\n    transition: all 0.25s ease-out 0s;\n    cursor: pointer;\n  }\n  .link:hover {\n    color: ${colors.dark_pink_highlight};\n    border-right: 5px solid ${colors.dark_pink_highlight};\n    transition: all 0.25s ease-out 0s;\n  }\n  .selected {\n    color: ${colors.dark_pink_highlight};\n    border-right: 5px solid ${colors.dark_pink_highlight};\n  }\n  // hide sidebar when too small\n  @media only screen and (max-width: 765px) {\n    display:none;\n  }\n`;\n\nconst StyledSidebarList = styled.ul`\n  width: 25%;\n  padding: 5px 0px;\n\n  list-style-type: none;\n  li {\n    button {\n      width: 100%;\n      background-color: transparent;\n      border: none;\n      outline: none;\n      cursor: pointer;\n      text-align: right;\n      padding-top: 15px;\n      padding-bottom: 15px;\n      padding-right: 15px;\n      color: ${colors.dark_teal_heading};\n      font-size: clamp(12px, calc(1vw + 2px), 16px);\n      font-family: Raleway, sans-serif;\n      // letter-spacing: 1px;\n    }\n    button:hover {\n      color: ${colors.dark_pink_highlight};\n    }\n  }\n\n  .selected {\n    button {\n      color: ${colors.dark_pink_highlight};\n      border-right: 3px solid ${colors.dark_pink_highlight};\n    }\n  }\n\n  // hide sidebar when too small\n  @media only screen and (max-width: 765px) {\n    width: 100%;\n    li {\n      display: inline-block;\n      button {\n        padding-top: 5px;\n        padding-bottom: 5px;\n        padding-right: 10px;\n      }\n    }\n    .selected {\n      button {\n        border: none;\n      }\n    }\n}\n`;\n\nexport {\n  StyledIndivPage,\n  StyledIndivPageTitle,\n  StyledSidebar,\n  StyledSidebarList\n};\n","import colors from '../../../styles/colors';\nimport styled from 'styled-components';\n\n\nconst TableStyles = styled.div`\n  overflow-x: auto;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid ${colors.white_smoke};\n    width: 100%;\n    font-size: clamp(12px, calc(1vw + 1px), 14px);\n\n    th,\n    td {\n      color: ${colors.dark_gray_text};\n      max-width: 200px;\n      margin: 0;\n      padding: calc(0.3vw + 0.3em);\n      border-bottom: 1px solid ${colors.white_smoke};\n      border-right: 1px solid ${colors.white_smoke};\n      overflow-wrap: break-word;\n      \n      a {\n        color: ${colors.blue};\n        :hover {\n            color: ${colors.dark_pink_highlight};\n        }\n      }\n\n      // hiding the scrollbar but still able to scroll.\n      ::-webkit-scrollbar {\n        width: 0px;\n        height: 0px;\n        background: transparent;\n      }\n      :last-child {\n        border-right: 0;\n      }\n\n      @media only screen and (max-width: 1082px) { \n        max-width:100px;\n      }\n    }\n    .center {\n      text-align: center;\n    }\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0px solid ${colors.white_smoke};\n        }\n      }\n      \n      :hover {\n          background: ${colors.pale_tint};\n      }\n    }\n  \n    th {\n      font-weight: 700;\n      background-color: ${colors.pale_teal};\n      color: ${colors.dark_teal_heading};\n      border: 1px solid white !important;\n    }\n  }\n\n  .pagination {\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    padding: 1.0rem 0;\n    color: ${colors.dark_teal_heading};\n    font-size: 1rem;\n    \n    input, select, option {\n      color: ${colors.dark_teal_heading};\n      border: 1px solid ${colors.white_smoke};\n    }\n\n    button {\n      cursor: pointer;\n      background:${colors.dark_teal_heading};\n      color: white;\n      border: none;\n      padding: 3px 10px;\n      border-radius: 5px;\n\n      &:disabled {\n        background: ${colors.white_smoke};\n        color: ${colors.dark_gray_text};\n      }\n    }\n\n    .next {\n      margin-left: 1rem;\n    }\n\n    .prev {\n      margin-right: 1rem;\n    }\n  }\n\n  .top-settings {\n    color: ${colors.dark_teal_heading};\n    min-height: 40px;\n    margin-bottom: 0.5rem;\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n    align-items: center;\n    font-size: clamp(12px, calc(1vw + 1px), 16px);\n    .show-page {\n      width: 30%;\n      text-align: right;\n      margin-right: 10px;\n      select {\n        border: 1px solid ${colors.white_smoke};\n        color: ${colors.dark_teal_heading};\n      }\n    }\n\n    .search-container {\n      display: flex;\n      align-items: center;\n      width: ${props => props.showPageNumSelect ? '70%' : '100%'};\n    }\n\n    .search {\n      color: ${colors.dark_teal_heading};\n      border: 1px solid ${colors.white_smoke};\n      border-radius: 20px;\n      padding: 5px 20px 5px 25px;\n      width: ${props => props.showPageNumSelect ? '30%' : '100%'};\n      margin-left: 10px;\n    }\n\n    input[type=text] {\n      transition: width 0.4s ease-in-out;\n    }\n    \n    input[type=text]:focus {\n      width: ${props => props.showPageNumSelect ? '60%' : '100%'};\n      outline: none !important;\n      border: 2px solid ${colors.pale_teal};\n    }\n\n    .search-icon {\n      width: 10px;\n      margin-left: 10px;\n      opacity: 0.8;\n    }\n\n    /*mobile*/\n    @media only screen and (max-width: 1081px) { \n      input[type=text]:focus {\n        width: 90%;\n        outline-width: 0;\n        border: 2px solid ${colors.pale_teal};\n      }\n\n      flex-direction: column;\n      align-items: flex-start;\n      margin-bottom: 0;\n\n      .search, .show-page {\n        width: 90%;\n        margin-bottom: 1rem;\n      }\n\n      .search-icon {\n        margin-top: 5px;\n      }\n    }\n  }\n`;\n\nexport default TableStyles;\n","/**\n * \n * @param {number} windowInnerWidth \n * @returns {string}\n */\nconst getMaxWidth = (windowInnerWidth) => {\n    return windowInnerWidth > 1500 ? '55vw' : '65vw';\n};\n\nexport default getMaxWidth;\n","import React from 'react';\nimport { useTable, useSortBy, usePagination, useGlobalFilter, useAsyncDebounce } from 'react-table';\nimport TableStyles from './TableStyle';\nimport PropTypes from 'prop-types';\nimport searchIcon from '../../../images/magnif-glass.png';\nimport getMaxWidth from '../../../utils/maxWidthOfAnElement';\n\n/**\n * Filter for global search of table\n */\nconst GlobalFilter = ({ preGlobalFilteredRows, globalFilter, setGlobalFilter }) => {\n  const count = preGlobalFilteredRows.length;\n  const [value, setValue] = React.useState(globalFilter);\n  const onChange = useAsyncDebounce((value) => {\n    setGlobalFilter(value || undefined);\n  }, 200);\n\n  return (\n    <div className='search-container'>\n      <img className=\"search-icon\" alt=\"search icon\" src={searchIcon} />\n      <input\n        className=\"search\"\n        type=\"text\"\n        value={value || ''}\n        onChange={(e) => {\n          setValue(e.target.value);\n          onChange(e.target.value);\n        }}\n        placeholder={`Search ${count} rows...`}\n      />\n    </div>\n  );\n};\n\n/**\n *\n * @param {Array} columns - an array of table columns.\n * @param {Array} data - an array of data for the table.\n * @param {boolean} disablePagination - a boolean value to whether disable the pagination or not.\n * @param {boolean} showHeader - a boolean value to indicate whether the header is shown. Default is true.\n * @param {Array} defaultSort - specifies which column to be soted by default.\n * @param {function} highlightRows - If present, row rendering will use this function to highlight rows in specified color. (Usage example in MolecularFeaturesTable.js)\n */\nconst Table = ({ \n  columns, \n  data, \n  disablePagination = false, \n  defaultSort, \n  highlightRows = undefined, \n  showPageNumSelect = true, \n  showHeader = true,\n}) => {\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    preGlobalFilteredRows,\n    setGlobalFilter,\n    state: { pageIndex, pageSize, globalFilter },\n  } = useTable({\n    columns,\n    data,\n    initialState: { pageIndex: 0, sortBy: defaultSort ? defaultSort : [] },\n  },\n    useGlobalFilter,\n    useSortBy,\n    usePagination);\n\n  /**\n   * Function to format and render table rows.\n   * Handles merging of cells with an identical value.\n   * In order for the merge to work, the values need to be sorted.\n   * @returns rows to be rendered\n   */\n  const renderRows = () => {\n    // Get all the columns that are marked as merged\n    let mergedCols = columns.filter(col => col.merged);\n\n    // Count the number of values to be merged\n    for(let col of mergedCols){\n      let values = data.map(item => item[col.accessor]);\n      col.mergedValues = [...new Set(values)].map(item => ({\n        value: item, // Unique cell value\n        count: values.filter(value => value === item).length, // Count of the value\n        rendered: false // Indicates whether the value has been rendered or not.\n      }));\n    }\n\n    let rows = page.map((row) => {\n      prepareRow(row);\n      return (\n        <tr style={highlightRows ? highlightRows(row.original) : {}} {...row.getRowProps()}>\n          {\n            row.cells.map(\n              (cell) => {\n                let rowSpan = 0;\n                /**\n                 * If a column is marked as merged,\n                 *  1. Find the values to be merged.\n                 *  2. Set the rowSpan to the number of occurences of the merged value.\n                 *  3. Set the rendered property as true (rendered only once)\n                 */\n                if(cell.column.merged){\n                  let merged = mergedCols.find(item => cell.column.id === item.accessor)\n                                .mergedValues.find(item => item.value === cell.value);\n                  if(merged.count > 1){\n                    if(!merged.rendered){\n                      rowSpan = merged.count;\n                      merged.rendered = true;\n                    }\n                  }else{\n                    rowSpan = cell.column.rowSpan ? cell.column.rowSpan : 1;\n                  }\n                }else{\n                  rowSpan = cell.column.rowSpan ? cell.column.rowSpan : 1;\n                }\n                return rowSpan > 0 ?\n                <td className={cell.column.center ? 'center' : ''}{...cell.getCellProps()} rowSpan={rowSpan}>\n                  {cell.render('Cell')}\n                </td>\n                :\n                undefined\n              }\n            )\n          }\n        </tr>\n      );\n    });\n    return (rows)\n  }\n\n  // Render the UI for your table\n  return (\n    <TableStyles showPageNumSelect={showPageNumSelect} style={{maxWidth: getMaxWidth(window.innerWidth)}}>\n      {!disablePagination ? (\n        <div className=\"top-settings\">\n          <GlobalFilter\n            preGlobalFilteredRows={preGlobalFilteredRows}\n            globalFilter={globalFilter}\n            setGlobalFilter={setGlobalFilter}\n          />\n          {\n            showPageNumSelect &&\n            <div className=\"show-page\">\n              Show\n              {' '}\n              {' '}\n              <select\n                value={pageSize}\n                onChange={(e) => {\n                  setPageSize(Number(e.target.value));\n                }}\n              >\n                {[10, 20, 30, 40, 50].map((pageSize) => (\n                  <option key={pageSize} value={pageSize}>\n                    {pageSize}\n                  </option>\n                ))}\n              </select>\n              {' '}\n              {' '}\n              entries per page\n            </div>\n          }\n        </div>\n\n      ) : null}\n      <table {...getTableProps()}>\n        {\n          showHeader && \n          <thead>\n            {headerGroups.map((headerGroup) => (\n              <tr {...headerGroup.getHeaderGroupProps()}>\n                {\n                  headerGroup.headers.map((column) => (\n                    // Add the sorting props to control sorting. For this example\n                    // we can add them into the header props\n                    <th {...column.getHeaderProps(column.getSortByToggleProps())}\n                        {...column.getHeaderProps({\n                          style: { width: '60' },\n                        })}\n                        colSpan={column.rowSpan ? column.rowSpan: 1}\n                        >\n                      {column.render('Header')}\n                      {/* Add a sort direction indicator */}\n                      <span>\n                        {column.isSorted\n                          ? column.isSortedDesc\n                            ? ' 🔽'\n                            : ' 🔼'\n                          : ''}\n                      </span>\n                    </th>\n                  ))\n                }\n              </tr>\n            ))}\n          </thead>\n        }\n        <tbody {...getTableBodyProps()}>\n          {\n            renderRows()\n          }\n        </tbody>\n      </table>\n      {!disablePagination ? (\n        <div className=\"pagination\">\n          <button className=\"prev\" onClick={() => previousPage()} disabled={!canPreviousPage}>\n            Prev\n          </button>\n          <span>\n            Page\n            {' '}\n            <strong>\n              <input\n                type=\"number\"\n                value={pageIndex + 1}\n                onChange={(e) => {\n                  const page = e.target.value ? Number(e.target.value) - 1 : 0;\n                  gotoPage(page);\n                }}\n                style={{ width: '40px' }}\n              />\n              {' '}\n              of\n              {' '}\n              {pageOptions.length}\n            </strong>\n            {' '}\n          </span>\n          <button className=\"next\" onClick={() => nextPage()} disabled={!canNextPage}>\n            Next\n          </button>\n        </div>\n      ) : null}\n    </TableStyles>\n  );\n};\n\nTable.propTypes = {\n  columns: PropTypes.arrayOf(Object).isRequired,\n  data: PropTypes.arrayOf(Object).isRequired,\n  disablePagination: PropTypes.bool,\n  defaultSort: PropTypes.arrayOf(Object)\n};\n\nTable.defaultProps = {\n  data: [],\n  columns: [],\n  disablePagination: false,\n};\n\nexport default Table;\n","import { select } from 'd3';\n\n// default margin.\nconst defaultMargin = {\n    top: 20,\n    right: 20,\n    bottom: 20,\n    left: 20\n}\n\n// default width and height of the SVG canvas.\nconst defaultWidth = 600 - defaultMargin.left - defaultMargin.right;\nconst defaultHeight = 600 - defaultMargin.top - defaultMargin.bottom;\n\n\n/**\n * @param {Object} svgParam - object with height, width, margin and id.\n * @param {number} svgParam.height - canvas height with a default value passed as variable.\n * @param {number} svgParam.width - canvas width with a default value passed as variable.\n * @param {Object} svgParam.margin - margin object having the margin values with a default value passed as an object.\n * @param {string} svgParam.id - selecting the id to attach the svg with a default value of an empty string.\n * @returns - an svg canvas with the given height and width.\n */\nconst createSvgCanvas = (\n    { height = defaultHeight, width = defaultWidth, margin = defaultMargin, id = '', canvasId = 'canvas' }\n) => {\n    return (\n        select(`#${id}`)\n            .append('svg')\n            .attr('width', width + margin.left + margin.right)\n            .attr('height', height + margin.top + margin.bottom)\n            .attr('id', canvasId)\n            .append('g')\n            .attr('transform',\n                'translate(' + margin.left + ',' + margin.top + ')')\n    );\n}\n\nexport default createSvgCanvas;\n","import { select } from 'd3';\n\nconst createToolTip = (id) => {\n    select(`#${id}`)\n        .append('div')\n        .attr('id', 'tooltip')\n        .style('position', 'absolute')\n        .style('visibility', 'hidden')\n        .style('border', 'solid')\n        .style('border-width', '1px')\n        .style('border-radius', '5px')\n        .style('padding', '5px')\n        .style('font-size', '14px')\n        .attr('top', 10)\n        .attr('left', 10);\n};\n\nexport default createToolTip;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Switch from 'react-switch';\nimport colors from '../../styles/colors';\n\nconst CustomSwitchContainer = styled.span`\n    display: flex;\n    alight-items: center;\n    .switch-label {\n        font-size: 12px;\n    }\n    .switch-highlight {\n        font-weight: bold;\n        color: ${colors.dark_pink_highlight};\n    }\n`;\n\nconst StyledCustomSwitch = styled(Switch)`\n    margin-left: 5px;\n    margin-right: 5px;\n`;\n\n/**\n * A styled switch component to be used for toggle UI.\n */\nconst CustomSwitch = (props) => {\n    const { checked, onChange, labelLeft, labelRight, height, width } = props;\n    return(\n        <CustomSwitchContainer>\n            {\n                labelLeft && labelLeft.length > 0 ?\n                <span className={`switch-label ${!checked ? 'switch-highlight' : ''}`}>{labelLeft}</span>\n                : ''\n            }\n            <StyledCustomSwitch \n                checked={checked}\n                onChange={onChange} \n                onColor={colors.dark_teal_heading}\n                onHandleColor={colors.light_teal}\n                uncheckedIcon={false}\n                checkedIcon={false}\n                height={height ? height : 20}\n                width={width ? width : 40}\n            />\n            {\n                labelRight && labelRight.length > 0 ?\n                <span className={`switch-label ${checked ? 'switch-highlight' : ''}`}>{labelRight}</span>\n                : ''\n            }\n        </CustomSwitchContainer>\n    );\n};\n\nexport default CustomSwitch;","export const convertMDataType = (mDataType) => {\n    switch (mDataType) {\n        case 'rna':\n            return 'rna microarray';\n        case 'rnaseq':\n            return 'rna sequence';\n        default:\n            return /rnaseq$/.test(mDataType) ? 'rna sequence' : mDataType;\n    }\n}\n\nexport const mDataTypeList = {\n    rna_sequence: 'rna sequence',\n    rnaseq: 'rna sequence',\n    'Kallisto_0.46.1.rnaseq': 'rna sequence',\n    rna_microarray: 'rna microarray',\n    rna: 'rna microarray',\n    microarray: 'rna microarray',\n    cnv: 'cnv',\n    mutation: 'mutation',\n};\n","import React, { useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport PropTypes from 'prop-types';\nimport createSvgCanvas from '../../utils/createSvgCanvas';\nimport colors from '../../styles/colors';\nimport createToolTip from '../../utils/toolTip';\nimport CustomSwitch from '../UtilComponents/CustomSwitch';\nimport { mDataTypeList as mDataTypeMapping } from '../../utils/convertMDataType';\nimport styled from 'styled-components';\n\n// style for forest plot.\nconst StyledForestPlot = styled.div`\n    width: 100%;\n    margin-left: 10px;\n    .title {\n        font-size: 14px;\n    }\n    .switch-wrapper {\n        margin: 0px 60px 40px 40px;\n        display: flex;\n        flex-direction: row;\n        justify-content: flex-start;\n        .disclaimer {\n            margin-left: 10px;\n            font-size: 14px;\n            line-height: 1.5;\n        }\n    }\n`;\n\n// data length and multiplier variables.\nconst ADDITIONAL = 2;\n\n// variable to calculate chart width relative to the svg width.\nconst CHART_WIDTH = 0.70;\n\n// width & height of square/rectangle for legend.\nconst RECTANGLE_DIMENSIONS = 20;\n\n// canvas id.\nconst CANVAS_ID = 'forestplot-canvas';\n\n// tooltip ID.\nconst TOOLTIP_ID = 'forestplot-tooltip';\n\n// legend variable.\nconst legend = [\n    { text: 'FDR < 0.05 and r > 0.7', color: `${colors.dark_pink_highlight}` },\n    { text: 'FDR > 0.05 and r < 0.7', color: `${colors.silver}` },\n];\n\n// margin for the svg element.\nconst margin = {\n    top: 40,\n    right: 20,\n    bottom: 150,\n    left: 20,\n};\n\n// width and height of the SVG canvas.\nconst width = 900 - margin.left - margin.right;\nconst height = 550 - margin.top - margin.bottom;\n\n/**\n * update the data to change the data type names using the mapping variable.\n * @param {Array} data \n * @param {Object} dataTypeMapping \n */\nconst updateDataBasedOnTypeMapping = (data, dataTypeMapping) => {\n    return data.map(el => {\n        return {\n            ...el,\n            mDataType: dataTypeMapping[el.mDataType],\n        };\n    })\n};\n\n/**\n * updates the data based on if we want analytic or permuted values.\n * @param {Array} data\n * @param {boolean} isAnalytic\n */\nconst updateData = (data, isAnalytic) => {\n    // new data array to select analytic or permuted values.\n    const updatedData = data.map(el => {\n        return {\n            compound: el.compound,\n            dataset: el.dataset,\n            gene: el.gene,\n            tissue: el.tissue,\n            estimate: el.estimate,\n            id: el.id,\n            mDataType: el.mDataType,\n            n: el.n,\n            permutation_done: el.permutation_done,\n            sens_stat: el.sens_stat,\n            significant_permutation: el.significant_permutation,\n            fdr: Number.parseFloat(`${isAnalytic ? el.fdr_analytic : el.fdr_permutation}`).toExponential(2),\n            pvalue: Number.parseFloat(`${isAnalytic ? el.pvalue_analytic : el.pvalue_permutation}`).toExponential(2),\n            upper: Number.parseFloat(`${isAnalytic ? el.upper_analytic : el.upper_permutation}`).toExponential(2),\n            lower: Number.parseFloat(`${isAnalytic ? el.lower_analytic : el.lower_permutation}`).toExponential(2),\n        };\n    });\n\n    // filter data if lower and upper values are not available.\n    return updatedData.filter(el => {\n        if (el.upper !== 'NaN' && el.lower !== 'NaN') {\n            return el;\n        }\n    });\n};\n\n/**\n * \n * @param {Array} data\n * @returns {Array} - of different data types. \n */\nconst getAllDataTypes = (data) => {\n    // variable to store the different data types.\n    const dataTypes = [];\n    // looping through and storing the data type if it's not already present.\n    data.forEach(el => {\n        if (!dataTypes.includes(el.mDataType)) {\n            dataTypes.push(el.mDataType);\n        }\n    });\n    return dataTypes;\n};\n\n/**\n * data based on the default molecular type.\n * @param {Array} data \n * @param {string} mDataType \n */\nconst createFilteredData = (data, mDataType) => {\n    const filteredData = data.filter(el => {\n        if (el.mDataType === mDataType) {\n            return el;\n        }\n    });\n    return filteredData;\n};\n\n/**\n * @param {Array} data - input data.\n */\nconst calculateMinMax = (data) => {\n    // calculates the minimum and maximum estimate from the data.\n    const minEstimate = Math.min(...data.map((val) => val.estimate));\n    const maxEstimate = Math.max(...data.map((val) => val.estimate));\n\n    // calculates the minimum and maximum analytic from the data.\n    const min = Math.min(...data.map((val) => val.lower));\n    const max = Math.max(...data.map((val) => val.upper));\n\n    return {\n        min,\n        max,\n    }\n};\n\n/**\n * @param {Array} data \n */\nconst calculateMinMaxN = (data) => {\n    const minN = Math.min(...data.map((val) => val.n));\n    const maxN = Math.max(...data.map((val) => val.n));\n\n    return { minN, maxN };\n};\n\n/**\n * mouseover event for horizontal line as well as the circle.\n * @param {Object} event \n * @param {Object} element \n * @param {boolean} isAnalytic\n */\nconst mouseOverEvent = (event, element, isAnalytic) => {\n    // make the visibility of the tool tip to visible.\n    const toolTip = d3.select('#tooltip')\n        .style('visibility', 'visible')\n        .style('left', `${event.pageX + 10}px`)\n        .style('top', `${event.pageY + 10}px`)\n        .style('color', `${colors.black}`)\n        .style('background-color', `${colors.white}`);\n\n    // append text.\n    const fdr = isAnalytic ? element.fdr_analytic : element.fdr_permutation;\n    const pc = isAnalytic ? element.upper_analytic : element.upper_permutation;\n    const text = fdr < 0.05 && pc > 0.70 ? 'Strong Biomarker' : 'Weak Biomarker';\n\n    toolTip.\n        append('text')\n        .attr('id', 'tooltiptext')\n        .text(text);\n\n    // show pearson correlation cofficient on mouse over.\n    d3.select(`#estimate-${element.dataset.name}-x1`).attr('visibility', 'visible');\n    d3.select(`#estimate-${element.dataset.name}-x2`).attr('visibility', 'visible');\n};\n\n/**\n * mouseout event handler for horizontal line as well as the circle.\n * @param {Object} event \n * @param {Object} element \n */\nconst mouseOutEvent = (event, element) => {\n    // make visibility hidden.\n    d3.select('#tooltip')\n        .style('visibility', 'hidden');\n    // remove all the divs with id tooltiptext.\n    d3.selectAll('#tooltiptext').remove();\n    // hide pearson correlation cofficient on mouse over.\n    d3.select(`#estimate-${element.dataset.name}-x1`).attr('visibility', 'hidden');\n    d3.select(`#estimate-${element.dataset.name}-x2`).attr('visibility', 'hidden');\n};\n\n/**\n * @returns - d3 linear scale for circles.\n * mapped the min and max values to a range.\n */\nconst circleScaling = (min, max) => d3.scaleLinear().domain([min, max]).range([5, 15]);\n\n/**\n * \n * @param {number} min - min value to be passed to the domain.\n * @param {number} max - max value to be passed to the domain.\n * @returns - d3 linear scale for x-axis.\n */\nconst createXScale = (min, max, width) => {\n    // set min to zero if it's greater than zero else it's a min.\n    const updatedMin = (min > 0 || min === 0) ? -0.1 : min;\n\n    return d3.scaleLinear()\n        .domain([updatedMin, max])\n        .range([100, (width * CHART_WIDTH)])\n        .nice();\n};\n\n\n/**\n * Appends x-axis to the main svg element.\n * @param {Object} svg - svg selection.\n */\nconst createXAxis = (svg, scale, height, width, margin) => {\n    svg.append('g')\n        .attr('id', 'x-axis')\n        .attr('transform', `translate(0, ${height})`)\n        .call(d3.axisBottom(scale));\n\n    // append x-axis label.\n    svg.append('g')\n        .attr('id', 'x-axis-label')\n        .append('text')\n        .attr('font-weight', 500)\n        .attr('x', (width * CHART_WIDTH * 0.40))\n        .attr('y', height + margin.bottom / 5 + 10)\n        .attr('fill', `${colors.dark_teal_heading}`)\n        .text('pearson correlation coefficient (r)')\n        .attr('font-size', '16px');\n\n};\n\n/**\n * Creates a vertical main line for the forest plot.\n * @param {Object} svg - svg selection for the global canvas.\n * @param {Object} scale - x axis scale.\n */\nconst createVerticalLine = (svg, scale, height) => {\n    svg.append('g')\n        .attr('id', 'vertical-line')\n        .append('line')\n        .style('stroke', `${colors.dark_gray_text}`)\n        .attr('x1', scale(0))\n        .attr('y1', 0)\n        .attr('x2', scale(0))\n        .attr('y2', height);\n};\n\n/**\n * Creates horizontal lines for the forest plot.\n * @param {Object} svg - svg selection for the global canvas.\n * @param {Object} scale - x axis scale.\n * @param {boolean} isAnalytic\n */\nconst createHorizontalLines = (svg, scale, data, height) => {\n    const horizontal = svg.append('g')\n        .attr('id', `horizontal-lines`)\n\n    data.forEach((element, i) => {\n        if (element.lower && element.upper) {\n            horizontal\n                .append('line')\n                .attr('id', `horizontal-line-${element.dataset.name}`)\n                .style('stroke', `${colors.dark_gray_text}`)\n                .style('stroke-width', 1.25)\n                .attr('x1', scale(element.lower))\n                .attr('y1', ((i + 1) * height) / (data.length + ADDITIONAL))\n                .attr('x2', scale(element.upper))\n                .attr('y2', ((i + 1) * height) / (data.length + ADDITIONAL))\n                .on('mouseover', (event) => {\n                    mouseOverEvent(event, element);\n                })\n                .on('mouseout', (event) => {\n                    mouseOutEvent(event, element);\n                });\n        }\n    })\n\n};\n\n/**\n * Creates circles for the horizontal lines.\n * @param {Object} svg - svg selection for the global canvas.\n * @param {Object} xScale - x axis scale.\n * @param {Object} circleScale - scale to set the radius of the circle.\n * @param {Array} data - data array.\n */\nconst createCircles = (svg, xScale, circleScale, data, height) => {\n    const circles = svg.append('g')\n        .attr('id', 'cirlces');\n\n    data.forEach((element, i) => {\n        // fdr and pearson cofficient.\n        const fdr = element.fdr;\n        const pc = element.upper;\n\n        circles\n            .append('circle')\n            .attr('id', `cirlce-${element.dataset.name}`)\n            .attr('cx', xScale(element.estimate))\n            .attr('cy', ((i + 1) * height) / (data.length + ADDITIONAL))\n            .attr('r', circleScale(element.n))\n            .attr('fill', (fdr < 0.05 && pc > 0.70) ? `${colors.dark_pink_highlight}` : `${colors.silver}`)\n            .on('mouseover', (event) => {\n                mouseOverEvent(event, element);\n            })\n            .on('mouseout', (event) => {\n                mouseOutEvent(event, element);\n            });\n    });\n};\n\n/**\n * creates the rhombus for the forest plot.\n * @param {Object} svg - svg selection for the global canvas.\n * @param {Object} scale - x axis scale.\n */\n// const createPolygon = (svg, scale) => {\n//     const lineFunction = d3\n//         .line()\n//         .x(function (d) {\n//             return d.x;\n//         })\n//         .y(function (d) {\n//             return d.y;\n//         });\n\n//     svg.append('path')\n//         .attr('d', lineFunction(poly))\n//         .attr('stroke', `${colors.dark_gray_text}`)\n//         .attr('fill', `${colors.teal}`);\n// };\n\n/**\n * Appends dataset name to the right of the forest plot.\n * @param {Object} svg\n * @param {Array} data - data array.\n */\nconst appendDatasetName = (svg, data, height) => {\n    // append header (dataset)\n    svg.append('g')\n        .attr('id', 'dataset-header')\n        .append('text')\n        .attr('font-weight', 700)\n        .attr('x', 10)\n        .attr('y', -20)\n        .attr('fill', `${colors.dark_teal_heading}`)\n        .text('Dataset Name')\n        .attr('font-size', '20px');\n\n    const dataset = svg.append('g')\n        .attr('id', 'dataset-names');\n\n    // append dataset name.\n    data.forEach((element, i) => {\n        dataset\n            .append('text')\n            .attr('id', `dataset-${element.dataset.name}`)\n            .attr('font-weight', 200)\n            .attr('x', 10)\n            .attr('y', ((i + 1) * height) / (data.length + ADDITIONAL))\n            .attr('fill', `${colors.dark_teal_heading}`)\n            .text(`${element.dataset.name}`)\n            .attr('font-size', '16px');\n    });\n};\n\n/**\n * Appends estimate text to the chart.\n * @param {Object} svg\n * @param {Array} data - data array.\n */\nconst appendEstimateText = (svg, data, height, width, scale) => {\n    const estimate = svg.append('g')\n        .attr('id', 'estimate');\n\n    // append dataset name.\n    data.forEach((element, i) => {\n\n        if (element.lower) {\n            estimate\n                .append('text')\n                .attr('id', `estimate-${element.dataset.name}-x1`)\n                .attr('font-weight', 200)\n                .attr('x', scale(element.lower) - 15)\n                .attr('y', ((i + 1) * height) / (data.length + ADDITIONAL) - 10)\n                .attr('fill', `${colors.dark_teal_heading}`)\n                .text(`${(element.lower)}`)\n                .attr('visibility', 'hidden')\n                .attr('font-size', '14px');\n        }\n\n        if (element.upper) {\n            estimate\n                .append('text')\n                .attr('id', `estimate-${element.dataset.name}-x2`)\n                .attr('font-weight', 200)\n                .attr('x', scale(element.upper) - 15)\n                .attr('y', ((i + 1) * height) / (data.length + ADDITIONAL) - 10)\n                .attr('fill', `${colors.dark_teal_heading}`)\n                .text(`${(element.upper)}`)\n                .attr('visibility', 'hidden')\n                .attr('font-size', '14px');\n        }\n    });\n};\n\n/**\n * Appends estimate text to the chart.\n * @param {Object} svg\n * @param {Array} data - data array.\n */\nconst appendFdrText = (svg, data, height, width) => {\n    // append header (dataset)\n    svg.append('g')\n        .attr('id', 'estimate-header')\n        .append('text')\n        .attr('font-weight', 700)\n        .attr('x', (width * CHART_WIDTH) + 10)\n        .attr('y', -20)\n        .attr('fill', `${colors.dark_teal_heading}`)\n        .text('FDR')\n        .attr('font-size', '20px');\n\n    const estimate = svg.append('g')\n        .attr('id', 'estimate');\n\n    // append dataset name.\n    data.forEach((element, i) => {\n        if (element.fdr) {\n            estimate\n                .append('text')\n                .attr('id', `estimate-${element.dataset.name}`)\n                .attr('font-weight', 200)\n                .attr('x', (width * CHART_WIDTH) + 10)\n                .attr('y', ((i + 1) * height) / (data.length + ADDITIONAL))\n                .attr('fill', `${colors.dark_teal_heading}`)\n                .text(`${element.fdr}`)\n                .attr('font-size', '16px');\n        }\n    });\n};\n\n/**\n * Creates legend text and label.\n * @param {Object} svg - svg element\n * @param {number} height - height of the graph\n * @param {number} width - width of the graph\n */\nconst createLegend = (svg, height, width) => {\n    // append legends.\n    const legends = svg.append('g')\n        .attr('id', 'legends');\n\n    legend.forEach((el, i) => {\n        legends.append('rect')\n            .attr('x', width - 160)\n            .attr('y', ((height * 0.2) + ((i + 1) * RECTANGLE_DIMENSIONS)))\n            .attr('width', RECTANGLE_DIMENSIONS)\n            .attr('height', RECTANGLE_DIMENSIONS)\n            .attr('stroke', 'none')\n            .attr('fill', `${el.color}`);\n    });\n\n    // append legend text.\n    const legendText = svg.append('g')\n        .attr('id', 'legend-text');\n\n    legend.forEach((el, i) => {\n        legendText\n            .append('text')\n            .attr('id', `legend-${el}`)\n            .attr('x', width - 135)\n            .attr('y', ((height * 0.2) + (((i + 1) * RECTANGLE_DIMENSIONS) + (0.75 * RECTANGLE_DIMENSIONS))))\n            .text(`${el.text}`)\n            .attr('font-size', '12px')\n            .attr('fill', `${colors.dark_teal_heading}`);\n    });\n};\n\n/**\n * \n * @param {Array} mDataTypes - an array of mDataTypes.\n */\nconst createSelectionOptions = (mDataTypes, data, molecularType, setMolecularType) => {\n    // options for the selection.\n    d3.select('.select')\n        .selectAll('option')\n        .data(mDataTypes)\n        .enter()\n        .append('option')\n        .text((d) => d)\n        .attr('value', (d) => d);\n\n    // on change event handler on selection.\n    d3.select('.select').on('change', function () {\n        // selection.\n        const selection = d3.select(this).property('value');\n\n        // update molecular type.\n        setMolecularType(selection);\n\n        // create the filtered data based on the selection.\n        const filteredData = createFilteredData(data, selection);\n\n        // remove the already drawn forest plot with it's id.\n        d3.select(`#${CANVAS_ID}`).remove();\n\n        createForestPlot(margin, 350, width, filteredData);\n    });\n};\n\n/**\n * Main function to create the forest plot.\n * @param {Object} margin - margin for the svg canavas.\n * @param {number} height - height of the svg canvas.\n * @param {number} width - width of the svg canvas.\n * @param {Array} data - array of data.\n */\nconst createForestPlot = (margin, heightInput, width, data) => {\n    // calculate the height based on the data size.\n    const height = data.length * 50 - margin.top - margin.bottom > heightInput\n        ? data.length * 50 - margin.top - margin.bottom\n        : heightInput;\n\n    // creating the svg canvas.\n    const svg = createSvgCanvas({ id: 'forestplot', width, height, margin, canvasId: CANVAS_ID });\n\n    // min and max.\n    const { min, max } = calculateMinMax(data);\n\n    // min and max n value.\n    const { minN, maxN } = calculateMinMaxN(data);\n\n    // scale for x-axis.\n    const xScale = createXScale(min, max, width);\n\n    // scale for circles.\n    const circleScale = circleScaling(minN, maxN);\n\n    // creating x axis.\n    createXAxis(svg, xScale, height, width, margin);\n\n    // create vertical line at 0 on x-axis.\n    createVerticalLine(svg, xScale, height);\n\n    // create horizontal lines for the plot.\n    createHorizontalLines(svg, xScale, data, height);\n\n    // create the circles for the plot.\n    createCircles(svg, xScale, circleScale, data, height);\n\n    // create polygon/rhombus.\n    // createPolygon(svg, xScale);\n\n    // append the estimate text along the horizontal lines.\n    appendEstimateText(svg, data, height, width, xScale);\n\n    // append the dataset names corresponding to each horizontal line.\n    appendDatasetName(svg, data, height);\n\n    // append estimate as text to the svg.\n    appendFdrText(svg, data, height, width);\n\n    // create legend.\n    createLegend(svg, height, width);\n};\n\n/**\n * @returns {component} - returns the forest plot component.\n */\nconst ForestPlot = ({ height, width, margin, data }) => {\n    // check for analytic and permuted data.\n    const isPermutedAvailable = data.filter(el => el.lower_permutation && el.upper_permutation).length > 0;\n    const isAnalyticAvailable = data.filter(el => el.lower_analytic && el.upper_analytic).length > 0;\n\n    // initial analytic state value.\n    const initialAnalyticValueState = !isPermutedAvailable && isAnalyticAvailable;\n\n    // set state for toggle.\n    const [isAnalytic, setAnalyticValue] = useState(initialAnalyticValueState);\n    const [molecularType, setMolecularType] = useState('rna microarray');\n\n    // create updated data, updating the molecular type using the mapping.\n    const molecularTypeUpdatedData = updateDataBasedOnTypeMapping(data, mDataTypeMapping);\n\n    // update the data based on the isAnalytic state.\n    const updatedData = updateData(molecularTypeUpdatedData, isAnalytic);\n\n    // get all the data types available in the data.\n    const mDataTypes = getAllDataTypes(updatedData);\n\n    // filtered data.\n    const filteredData = createFilteredData(updatedData, molecularType);\n\n    useEffect(() => {\n        // remove the svg canvas.\n        d3.select('#forestplot-canvas').remove();\n\n        // create tooltip.\n        createToolTip(`${TOOLTIP_ID}`);\n\n        // create selection options.\n        createSelectionOptions(mDataTypes, updatedData, molecularType, setMolecularType);\n\n        // create forest plot.\n        createForestPlot(margin, height, width, filteredData);\n    }, [isAnalytic, molecularType]);\n\n    return (\n        <StyledForestPlot>\n            {\n                isPermutedAvailable && isAnalyticAvailable ?\n                    (\n                        <div className='switch-wrapper'>\n                            <CustomSwitch\n                                checked={isAnalytic}\n                                onChange={(isAnalytic) => setAnalyticValue(isAnalytic)}\n                                labelLeft='Permuted'\n                                labelRight='Analytical'\n                            />\n                        </div>\n                    ) : (\n                        // <h6> {isPermutedAvailable ? 'Permuted' : 'Analytical'} </h6>\n                        ''\n                    )\n            }\n            <div style={{ position: 'relative', marginTop: '20px' }}>\n                <select\n                    className='select'\n                    id='selection'\n                    style={{\n                        display: 'block',\n                        align: 'right',\n                        height: '30px',\n                        position: 'absolute',\n                        width: '140px',\n                        right: '20px',\n                        fontSize: '16px',\n                        color: `${colors.dark_teal_heading}`,\n                        borderRadius: '5px',\n                        border: `1px solid ${colors.dark_teal_heading}`,\n                    }}\n                />\n            </div>\n            <div id='forestplot' />\n            <div id='forestplot-tooltip' />\n        </StyledForestPlot>\n    );\n};\n\n// default props.\nForestPlot.defaultProps = {\n    height,\n    width,\n    margin,\n};\n\n// proptypes for the forest plot component.\nForestPlot.propTypes = {\n    height: PropTypes.number,\n    width: PropTypes.number,\n    margin: PropTypes.shape({\n        top: PropTypes.number,\n        right: PropTypes.number,\n        bottom: PropTypes.number,\n        left: PropTypes.number,\n    }),\n    data: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default ForestPlot;\n","import React from 'react';\nimport ReactLoading from 'react-loading';\nimport styled from 'styled-components';\nimport colors from '../../styles/colors';\n\nconst Container = styled.div`\n  margin-top: 250px;\n  display: flex;\n  flex-direction: column;\n  align-items: center !important;\n  justify-content: center !important;\n`;\n\nconst Loading = () => (\n  <Container>\n    <ReactLoading\n      type=\"bubbles\"\n      color={colors.dark_teal_heading}\n      height={160}\n      width={160}\n    />\n  </Container>\n);\n\nexport default Loading;\n","import React from 'react';\nimport styled from 'styled-components';\nimport colors from '../../styles/colors';\nimport FileSaver from 'file-saver';\nimport Plotly from 'plotly.js';\nimport PropTypes from 'prop-types';\nimport downloadImg from '../../images/download.webp';\n\n/**\n * Button used to download plot in .svg or .png format,\n * or table data in .csv format.\n * The implementation examples can be found in the files in IndivDatasets/Tables,\n * and Plots/DatasetHorizontalPlot.js\n */\n\nconst StyledButton = styled.button`\n    width: 70px;\n    height: 30px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 4px;\n    letter-spacing: 0.5px;\n    padding: 0.2rem 0.4rem 0.1rem 0.4rem;\n    background-color: #ffffff;\n    border: 1px solid ${colors.dark_teal_heading};\n    font-size: clamp(12px, calc(1vw + 1px), 14px);\n    color: ${colors.dark_teal_heading};\n    cursor: pointer;\n\n    .download-icon {\n        margin-left: 3px;\n        font-size: clamp(12px, calc(1vw + 1px), 14px);\n    }\n\n    :hover {\n        outline: ${colors.light_blue};\n        border: 1px solid ${colors.light_blue};\n        // color: ${colors.dark_teal_heading};\n        // .download-icon {\n        //     color: ${colors.dark_teal_heading};\n        // }\n    }\n\n    img {\n        width: 25px;\n        height: 25px;\n    }\n`;\n\nconst getCSVData = (data) => {\n    let header = Object.keys(data[0]);\n    let csv = [[...header]];\n    for(let obj of data){\n        let row = header.map(item => `\"${obj[item]}\"`);\n        csv.push([...row]);\n    }\n    csv = csv.map(item => item.join(',')).join('\\n');\n    return csv;\n}\n\nconst DownloadButton = (props) => {\n    /**\n     * Props\n     * className: Optional. String. Used to add additional style to the button.\n     * label: Required. String. Button label to be displayed.\n     * mode: Required. String. Accepts 'csv', 'svg', or 'png'. Used to determine the download mode.\n     * filename: Required. String. Filename of the downloaded file.\n     * data: Required for CSV file download. An array of objects, each representing a row in the CSV file.\n     * plotId: Required for plot download. String. HTML id for the plot to be downloaded. A plot needs to be given an id so that the download button can identify it.\n     */\n    const { className, label, mode, filename, data, plotId } = props;\n\n    const download = (e) => {\n        e.preventDefault();\n        switch(mode){\n            case 'csv':\n                let csv = getCSVData(data);\n                const csvData = new Blob([csv], {type: 'text/csv;charset=utf-8;'});\n                FileSaver.saveAs(csvData, `${filename}.csv`);\n                break;\n            case 'png':\n                Plotly.downloadImage(plotId, {format: 'png', scale: 7, filename: filename});\n                break;\n            case 'svg':\n                Plotly.downloadImage(plotId, {format: 'svg', scale: 2, filename: filename});\n                break;\n            default:\n                break;\n        }\n    }\n\n    return (\n        <StyledButton className={className} onClick={download} disabled={props.disabled} >\n            {label}<img alt='hello' src={downloadImg} />\n        </StyledButton>  \n    );\n}\n\nDownloadButton.propTypes = {\n    className: PropTypes.string, // class name for the button (optional)\n    label: PropTypes.string.isRequired, // label for the button\n    data: PropTypes.arrayOf(PropTypes.object), // data for CSV download\n    mode: PropTypes.string.isRequired, // accepts 'csv', 'png' or 'svg'\n    filename: PropTypes.string.isRequired, // downloaded filename\n    plotId: PropTypes.string // id of the plot to be downloaded. Used for downloading a plot.\n};\n\nexport default DownloadButton;\n","import React, { useState, useEffect } from 'react';\nimport Plot from 'react-plotly.js';\nimport CustomSwitch from '../UtilComponents/CustomSwitch';\nimport DownloadButton from '../UtilComponents/DownloadButton';\nimport styled from 'styled-components';\n\nconst StyledManhattanPlot = styled.div`\n    .header {\n        width: 100%;\n        margin-left: 10px;\n        .title {\n            font-size: 14px;\n        }\n        .switch-wrapper {\n            display: flex;\n            align-items: center;\n            .disclaimer {\n                margin-left: 10px;\n                font-size: 10px;\n                line-height: 1.5;\n            }\n        }\n    }\n    .download-buttons {\n        display: flex;\n        justify-content: flex-end;\n        .left {\n            margin-right: 5px;\n        }\n    }\n`;\n\nconst ManhattanPlot = (props) => {\n    const { title, data, biomarker, xRange, xLabelValues, plotId } = props;\n    const layout = {\n        autoresize: true,\n        height: 400,\n        margin: {\n            t: 40,\n            b: 50,\n            l: 65,\n            r: 10,\n        },\n        xaxis: {\n            title: {\n                text: 'Chromosome'\n            },\n            zeroline: false,\n            showticklabels: true,\n            range: xRange,\n            tickangle: -90,\n            tickmode: \"array\",\n            tickvals: xLabelValues.values,\n            ticktext: xLabelValues.labels,\n            tickfont: {\n                size: 11\n            },\n            showgrid: false\n        },\n        yaxis: {\n            title: {\n                text: '-log10(FDR value)'\n            },\n            zeroline: false,\n            range: [0, Math.max(...data.map(item => item.y)) + 0.5]\n        },\n        hovermode: \"closest\",\n    };\n\n    const config = {\n        responsive: true,\n        displayModeBar: false,\n        staticPlot: false\n    }\n\n    const [traces, setTraces] = useState([]);\n    const [highRes, setHighRes] = useState(false);\n\n    useEffect(() => {\n        let plotData = [];\n\n        plotData.push({\n            x: data.map(item => item.x),\n            y: data.map(item => item.y),\n            name: '',\n            mode: 'markers',\n            type: highRes ? 'scatter' : 'scattergl',\n            marker: {\n                color: data.map(item => item.color),\n                size: data.map(item => item.y >= 1.5 ? 8 : item.y >= -Math.log10(0.5) ? 5 : 3),\n                opacity: data.map(item => item.y < -Math.log10(0.5) ? 0.3 : 1),\n                line: {\n                    width: 0\n                }\n            },\n            showlegend: false,\n            hoverlabel: {\n                bgcolor: data.map(item => item.color),\n                font: {\n                    size: 11\n                }\n            },\n            hovertemplate: data.map(item => (\n                `Gene: ${item.gene.symbol}<br>` +\n                `Dataset: ${item.dataset.name}<br>` +\n                `Chromosome: ${item.chrLabel}<br>` +\n                `-log10(FDR value): ${item.y.toFixed(2)}`\n            ))\n        });\n\n        plotData.push({\n            x: xRange,\n            y: [-Math.log10(0.5), -Math.log10(0.5)],\n            mode: 'lines',\n            type: highRes ? 'scatter' : 'scattergl',\n            line: {\n                color: '#666666',\n                width: 1\n            },\n            showlegend: false,\n            hoverinfo: 'skip',\n        });\n\n        if(biomarker.length){\n            let pointLabels = [...new Set(biomarker.map(item => item.y))].map(item => {\n                let datasetNames = biomarker.filter(p => p.y === item).map(p => p.dataset.name);\n                return {\n                    y: item,\n                    datasets: datasetNames.join(', ')\n                }\n            });\n            plotData.push({\n                x: biomarker.map(item => item.x),\n                y: biomarker.map(item => item.y),\n                text: biomarker.map(item => `${item.gene.symbol}(${pointLabels.find(label => label.y === item.y).datasets})`),\n                textposition: 'top',\n                mode: 'markers+text',\n                type: highRes ? 'scatter' : 'scattergl',\n                marker: {\n                    color: '#666666',\n                    size: 8,\n                    opacity: biomarker.map(item => item.y < -Math.log10(0.5) ? 0.3 : 1),\n                    line: {\n                        width: 0\n                    }\n                },\n                showlegend: false,\n                hoverlabel: {\n                    bgcolor: '#666666',\n                    font: {\n                        size: 11\n                    }\n                },\n                hovertemplate: biomarker.map(item => (\n                    `Selected Biomarker: ${item.gene.symbol}<br>` +\n                    `Dataset: ${item.dataset.name}<br>` +\n                    `Chromosome: ${item.chrLabel}<br>` +\n                    `-log10(FDR value): ${item.y.toFixed(2)}`\n                ))\n            });\n        }\n        setTraces(plotData);\n    }, [highRes]);\n\n    return (\n        <StyledManhattanPlot>\n            <div className='header'>\n                <div className='title'>Plot Resolution</div>\n                <div className='switch-wrapper'>\n                    <CustomSwitch \n                        checked={highRes}\n                        onChange={(checked) => {setHighRes(checked)}} \n                        labelLeft='Low'\n                        labelRight='High'\n                    />\n                    <div className='disclaimer'>\n                        Please allow up to 15 seconds to switch to high resolution due to re-rendering of large amount of data points. <br />\n                        Please note that switching to high resolution adds strain to your web browser. \n                        It may significantly slow down plot rendering and other features such as hover-over legends and downloading plot image.\n                    </div>\n                </div>\n            </div>\n            <Plot\n                divId={plotId}\n                data={traces}\n                layout={layout}\n                config={config}\n            />\n            <div className='download-buttons'>\n                <DownloadButton className='left' label='SVG' mode='svg' filename={title} plotId={plotId} />\n                <DownloadButton label='PNG' mode='png' filename={title} plotId={plotId} />\n            </div>\n        </StyledManhattanPlot>\n    );\n};\n\nexport default ManhattanPlot;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport circle from '../../images/x-circle-fill.svg';\nimport colors from '../../styles/colors';\n\n/**\n * A component used to display error message.\n * The implementation examples can be found in the files in IndivDatasets/PlotSection, and IndivDatasets/Tables.\n */\n\nconst StyledError = styled.div`\n    width: 100%;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    font-family: Raleway, sans-serif;\n    .stop-icon {\n        font-size: clamp(32px, calc(20vw + 10px), 250px);\n        color: ${colors.dark_pink_highlight};\n        opacity: 0.6;\n        margin: 50px 0;\n    }\n    h3 {\n        color: ${colors.dark_pink_highlight};\n        opacity: 0.8;\n        font-family: Raleway, sans-serif;\n    }\n    p {\n        font-size: clamp(12px, calc(1vw + 1px), 16px);\n        font-family: Raleway, sans-serif;\n    }\n`;\n\nconst Error = (props) => {\n    const { message } = props;\n    return(\n        <StyledError>\n            <div className='stop-icon'>\n                <img src={circle} alt='cross' />\n            </div>\n            <h3>An Error Occurred.</h3>\n            {\n                message && message.length > 0 &&\n                <p>\n                    { message }\n                </p>\n            }\n        </StyledError>\n    );\n}\n\nError.propTypes = {\n    message: PropTypes.string // an optional detailed error message.\n};\n\nexport default Error;","const plotColors = {\n    gradients: [\n        ['#4b7916', \"#6BAC20\", \"#9EDF53\" ,\"#C5EC98\"],\n        ['#d95f02', \"#FD9749\", \"#FEBA86\", \"#FEDCC2\"],\n        ['#5A54A0', \"#7F79B9\", \"#A6A1CE\", \"#CDCAE3\"],\n        ['#DC187E', \"#ED5AA6\", \"#F17EBA\", \"#F7B6D7\"],\n        ['#0a7bcc', \"#1FB0FF\", \"#85D4FF\", \"#C2EAFF\"],\n        ['#CA9502', \"#FDC221\", \"#FED872\", \"#FEE9AE\"],\n        ['#378169', \"#54B697\", \"#8DCEB9\", \"#C6E7DC\"],\n        ['#525252', \"#7A7A7A\", \"#A3A3A3\", \"#CCCCCC\"],\n        ['#a11235', '#cf1744', \"#e9305d\", \"#ee5e81\"],\n        ['#2341ab', '#2e51d4', '#5875dc', '#8298e5'],\n        ['#4d2700', '#673300', '#9a4d00', '#cd6600'],\n        ['#0db7dd', '#2acff3', '#5ad9f5', '#8ae4f8'],\n        ['#dd320d', '#f34e2a', '#f5765a', '#f89e8a'],\n        ['#343400', '#676700', '#9a9a00', '#cdcd00'],\n        ['#4d004d', '#670067', '#9a009a', '#cd00cd'],\n        ['#9ed512', '#b7ed2e', '#c7f15c', '#d7f58b'],\n        ['#f577a5', '#f68fb5', '#f8a6c4', '#fabed4'],\n        ['#2e655f', '#3e8880', '#4eaaa0', '#6fbdb4'],\n        ['#652e34', '#883e46', '#aa4e58', '#bd6f77'],\n        ['#b372ff', '#c18bff', '#cea5ff', '#dcbeff']\n    ],\n    default: ['#525252', \"#7A7A7A\", \"#A3A3A3\", \"#CCCCCC\"],\n    unique24: ['#9acd32', '#000080', '#483d8b', '#808000', '#006400', '#8b4513', '#2f4f4f', '#dc143c', '#00ff7f', '#8a2be2', '#00ff00', '#ffff00', '#ffa500', '#ff4500', '#48d1cc', '#8b008b', '#ee82ee', '#ffa07a', '#ff1493', '#f0e68c', '#db7093', '#1e90ff', '#ff00ff', '#00bfff'],\n    tissues: [\n        '#CAD2C5', '#84a98c', '#52796F', '#354F52', '#2F3E46', '#284B63',\n        '#2F4858', '#1B263B', '#415A77', '#778DA9', '#E0E1DD', '#6F523B',\n    ]\n};\n\nexport default plotColors;","import React, { useState, useEffect } from 'react';\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport ManhattanPlot from '../Plots/ManhattanPlot';\nimport { getTissueSpecificManhattanPlotDataQuery, getPanCancerManhattanPlotDataQuery } from '../../queries/gene_compound';\nimport Loading from '../UtilComponents/Loading';\nimport Error from '../UtilComponents/Error';\nimport chromosomeInfo from '../../utils/chromosomeInfo.json';\nimport plotColors from '../../styles/plot_colors';\nimport colors from '../../styles/colors';\nimport styled from 'styled-components';\nimport Select from 'react-select';\n\nconst StyledManhattanPlotContainer = styled.div`\n    .dropdown-container {\n        width: 100%;\n        display: flex;\n        justify-content: flex-end;\n        align-items: center;\n        .dropdown {\n            width: 140px;\n            font-size: 14px;\n            color: ${colors.dark_teal_heading};\n            .dropdown__control {\n                min-height: 20px;\n                .dropdown__single-value {\n                    color: ${colors.dark_teal_heading};\n                }\n                .dropdown__indicators {\n                    .dropdown__indicator {\n                        padding: 0px;\n                    }\n                }\n            }\n            .dropdown__menu {\n                .dropdown__menu-list {\n                    padding 3px\n                    .dropdown__option {\n                        padding: 3px;\n                    }\n                }\n            }\n        }\n    }\n`;\n\nconst mDataTypeOptions = [\n    { label: 'cnv', value: 'cnv' },\n    { label: 'microarray', value: 'rna' },\n    { label: 'rnaseq', value: 'Kallisto_0.46.1.rnaseq' },\n];\n\nconst ManhattanPlotContainer = (props) => {\n    const { biomarker, compound, tissue } = props;\n    const [mDataType, setMDataType] = useState('cnv');\n    const [plotData, setPlotData] = useState({\n        ready: false\n    });\n\n    // Use lazy query to trigger query upon mDataType selection.\n    const [getTissueSpecificData, { loading: loadingTissueSpecific, error: errorTissueSpecific }] = useLazyQuery(getTissueSpecificManhattanPlotDataQuery, {\n        onCompleted: (data) => {\n            setPlotData(parsePlotData(biomarker.symbol, compound, tissue, data.gene_compound_tissue_dataset_biomarker));\n        },\n        onError: (error) => {\n            console.log(error);\n        }\n    });\n\n    const [getPanCancerData, { loading: loadingPanCancer, error: errorPanCancer }] = useLazyQuery(getPanCancerManhattanPlotDataQuery, {\n        onCompleted: (data) => {\n            setPlotData(parsePlotData(biomarker.symbol, compound, tissue, data.gene_compound_dataset_biomarker));\n        },\n        onError: (error) => {\n            console.log(error);\n        }\n    });\n\n    useEffect(() => {\n        setPlotData({ ready: false }); // reset the plot data every time the mDataType changes.\n        if (typeof tissue !== 'undefined') {\n            getTissueSpecificData({ variables: { compoundName: compound, tissueName: tissue, mDataType: mDataType } });\n        } else {\n            getPanCancerData({ variables: { compoundName: compound, mDataType: mDataType } });\n        }\n\n    }, [mDataType]);\n\n    const parsePlotData = (gene, compound, tissue, data) => {\n        let parsed = data.map((item, i) => ({\n            pointId: i,\n            dataset: item.dataset,\n            gene: {\n                id: item.gene.id,\n                name: item.gene.name,\n                symbol: item.gene.annotation.symbol\n            },\n            chr: item.gene.annotation.chr,\n            fdr: item.fdr_permutation ? item.fdr_permutation : item.fdr_analytic,\n            gene_seq_start: item.gene.annotation.gene_seq_start\n        }));\n\n        let chromosomes = chromosomeInfo[\"Chromosome Info\"]\n            .filter(item => item[\"molecule-name\"] !== 'all')\n            .map((item, i) => ({\n                name: `chr${item[\"molecule-name\"]}`,\n                label: item[\"molecule-name\"],\n                start: item.value,\n                length: item.value,\n                color: plotColors.unique24[i]\n            }));\n        let start = 0;\n        chromosomes.forEach(chr => {\n            let prev = chr.start;\n            chr.start = start;\n            chr.end = start + chr.length;\n            chr.labelValue = start + Math.floor(((start + chr.length) - start) / 2);\n            start += prev + 1\n        });\n\n        let chromosomeNames = chromosomes.map(item => item.name);\n        let formatted = [];\n        parsed.forEach(item => {\n            if (chromosomeNames.includes(item.chr)) {\n                let chromosome = chromosomes.find(chr => chr.name === item.chr);\n                item.x = item.gene_seq_start + chromosome.start;\n                item.y = -Math.log10(item.fdr);\n                item.color = chromosome.color;\n                item.chrLabel = chromosome.label;\n                formatted.push(item);\n            }\n        });\n        formatted.sort((a, b) => a.x - b.x);\n        let selectedBiomarker = formatted.filter(item => item.gene.symbol === biomarker.symbol);\n        let biomarkerPointIds = selectedBiomarker.map(p => p.pointId);\n        formatted = formatted.filter(item => !biomarkerPointIds.includes(item.pointId));\n        return {\n            title: `${gene}-${compound}${tissue ? `-${tissue}` : ''}`,\n            data: formatted,\n            selectedBiomarker: selectedBiomarker,\n            xRange: [0, Math.max(...chromosomes.map(item => item.end))],\n            xLabelValues: {\n                values: chromosomes.map(item => item.labelValue),\n                labels: chromosomes.map(item => item.label)\n            },\n            ready: true\n        };\n    };\n\n    return (\n        <StyledManhattanPlotContainer>\n            <div className='dropdown-container'>\n                <Select\n                    className='dropdown'\n                    classNamePrefix='dropdown'\n                    options={mDataTypeOptions}\n                    defaultValue={mDataTypeOptions[0]}\n                    onChange={(e) => setMDataType(e.value)}\n                />\n            </div>\n            {\n                loadingTissueSpecific || loadingPanCancer ? <Loading />\n                    :\n                    errorTissueSpecific || errorPanCancer ? <Error />\n                        :\n                        plotData.ready &&\n                        <ManhattanPlot\n                            plotId='biomarkerManhattanPlot'\n                            title={plotData.title}\n                            data={plotData.data}\n                            biomarker={plotData.selectedBiomarker}\n                            xRange={plotData.xRange}\n                            xLabelValues={plotData.xLabelValues}\n                        />\n            }\n        </StyledManhattanPlotContainer>\n    );\n}\n\nexport default ManhattanPlotContainer;","import React, { useState, useEffect } from 'react';\nimport { useQuery, useLazyQuery } from '@apollo/react-hooks';\nimport { Link, Element } from 'react-scroll';\nimport queryString from 'query-string';\nimport { getCompoundQuery } from '../../queries/compound';\nimport { getGeneQuery } from '../../queries/gene';\nimport { getTissueIdBasedOnTissueName } from '../../queries/tissue';\nimport {\n    getGeneCompoundTissueDatasetQuery,\n    getGeneCompoundDatasetQuery,\n} from '../../queries/gene_compound';\nimport TitleCase from '../../utils/convertToTitleCase';\nimport Layout from '../UtilComponents/Layout';\nimport StyledWrapper from '../../styles/utils';\nimport { StyledIndivPage, StyledSidebarList } from '../../styles/IndivPageStyles';\nimport Table from '../UtilComponents/Table/Table';\nimport ForestPlot from '../Plots/ForestPlot';\nimport Loading from '../UtilComponents/Loading';\nimport ManhattanPlotContainer from './ManhattanPlotContainer';\n\n// side links.\nconst SIDE_LINKS = [\n    { label: 'Forest Plot', name: 'forest_plot' },\n    { label: 'Manhattan Plot', name: 'manhattan_plot' },\n    { label: 'Gene Information', name: 'gene_info' },\n    { label: 'Compound Information', name: 'compound_info' },\n];\n\n// gene information columns.\nconst GENE_INFO_COLUMNS = [\n    {\n        Header: 'Gene Status as Compound Target',\n        accessor: 'target',\n        center: true\n    },\n    {\n        Header: 'Symbol',\n        accessor: 'symbol',\n        center: true,\n        Cell: (row) => <a href={`genes/${row.row.original.gene_id}`} target='_blank'>{row.row.original.symbol}</a>\n    },\n    {\n        Header: 'Ensembl Gene ID',\n        accessor: 'ensg',\n        center: true\n    },\n    {\n        Header: 'Gene Location',\n        accessor: 'location',\n        center: true\n    },\n];\n\n// compound information columns.\nconst COMPOUND_INFO_COLUMNS = [\n    {\n        Header: 'Name',\n        accessor: 'name',\n        Cell: (row) => <a href={`compounds/${row.row.original.uid}`} target='_blank'>{row.row.original.name}</a>\n    },\n    {\n        Header: 'FDA Approval Status',\n        accessor: 'status',\n    },\n    // {\n    //     Header: 'Active Trials',\n    //     accessor: 'trials',\n    // },\n    {\n        Header: 'Compound Targets',\n        accessor: 'target',\n    },\n    {\n        Header: 'Genes',\n        accessor: 'genes',\n        Cell: (row) => {\n            const geneArray = row.row.original.genes;\n\n            const genes = geneArray.map((gene, i) => {\n                let returnData = ''\n                if (i + 1 === geneArray.length) {\n                    returnData = <a href={`genes/${gene.id}`} target='_blank' key={gene.symbol}>{gene.symbol}</a>\n                } else {\n                    returnData = (\n                        <>\n                            <a href={`genes/${gene.id}`} target='_blank' key={gene.symbol}>{gene.symbol}</a>\n                            <span>, </span>\n                        </>\n                    )\n                }\n                return returnData;\n            });\n\n            return genes;\n        }\n    }\n];\n\n\n/**\n *\n * @param {Object} data - compound information data.\n * @returns {Array} - transformed data [{status: fdaStatus, targets: ['', '']}]\n */\nconst transformCompoundTableData = (data) => {\n    // grabs the fda status and targets from the data.\n    const name = data.compound.name;\n    const uid = data.compound.uid;\n    const fdaStatus = data.compound.annotation.fda_status;\n    // const targets = data.targets.map((el) => el.name).join(', ');\n    // return an array of object(s).\n    return data.targets.map((target) => ({\n        status: fdaStatus,\n        target: target.target_name,\n        genes: target.genes.map(gene => ({\n            id: gene.id,\n            symbol: gene.annotation.symbol,\n        })),\n        name,\n        uid,\n    }));\n};\n\n/**\n *\n * @param {Object} geneData - gene information data.\n * @param {Object} compoundData - compound information data.\n * @param {string} gene - input gene from the param.\n * @returns {Array} - data array.\n */\nconst transformGeneTableData = (geneData, compoundData, gene) => {\n    // grab the ensg and gene location.\n    const ensg = geneData.name;\n    const location = geneData.annotation.gene_seq_start;\n    const symbol = geneData.annotation.symbol;\n    const gene_id = geneData.id;\n    const genes = [];\n\n    // get the list of genes.\n    compoundData.targets.forEach(target => {\n        target.genes.forEach(gene => genes.push(gene.annotation.symbol));\n    });\n\n    const target = genes.includes(gene) ? 'Yes' : 'No';\n\n    // return the transformed data.\n    return [\n        {\n            ensg,\n            location,\n            target,\n            symbol,\n            gene_id,\n        },\n    ];\n};\n\n/**\n * Biomarker component.\n *\n * @component\n *\n * returns (\n *   <Biomarker/>\n * )\n */\nconst Biomarker = (props) => {\n    // get the compound, gene and tissue parameters.\n    const { location } = props;\n    const params = queryString.parse(location.search);\n    const { compound, gene, tissue } = params;\n    // set states for transformed data for tables.\n    const [transformedCompoundData, setTransformedCompoundData] = useState([]);\n    const [transformedGeneData, setTransformedGeneData] = useState([]);\n    const [finalGeneCompoundTissueDatasetData, setGeneCompoundTissueDatasetData] = useState([]);\n    const [compoundUID, setCompoundUID] = useState('');\n    const [geneId, setGeneId] = useState('');\n\n    // A section to display on the page\n    const [display, setDisplay] = useState('forest_plot');\n\n    /**\n     * @param {String} link\n     */\n    const createSideLink = (link, i) => (\n        <li key={i} className={display === link.name ? 'selected' : undefined}>\n            <button type='button' onClick={() => setDisplay(link.name)}>\n                {link.label}\n            </button>\n        </li>\n    );\n\n    // query to grab the gene and compound data based on the compound and gene name.\n    const {\n        loading: compoundDataLoading,\n        error: compoundDataError,\n        data: compoundQueryData,\n    } = useQuery(getCompoundQuery, {\n        variables: { compoundName: `${compound}` },\n    });\n\n    const {\n        loading: geneDataLoading,\n        error: geneDataError,\n        data: geneQueryData,\n    } = useQuery(getGeneQuery, { variables: { geneName: `${gene}` } });\n\n    const { data: tissueData } = useQuery(getTissueIdBasedOnTissueName, { variables: { tissueName: `${tissue}` } });\n\n    // query based on gene, compound and tissue.\n    const [getGeneCompoundTissueDatasetData] = useLazyQuery(getGeneCompoundTissueDatasetQuery, {\n        onCompleted: (data) => {\n            setGeneCompoundTissueDatasetData(data.gene_compound_tissue_dataset);\n        },\n        onError: (error) => {\n            console.log(error);\n        }\n    });\n\n    // query based on compound and gene.\n    const [getGeneCompoundDatasetData] = useLazyQuery(getGeneCompoundDatasetQuery, {\n        onCompleted: (data) => {\n            setGeneCompoundTissueDatasetData(data.gene_compound_dataset);\n        },\n        onError: (error) => {\n            console.log(error);\n        }\n    });\n\n    // compound and gene information columns.\n    const compoundInfoColumns = React.useMemo(() => COMPOUND_INFO_COLUMNS, []);\n    const geneInfoColumns = React.useMemo(() => GENE_INFO_COLUMNS, []);\n\n    // setting the state on load of compound data.\n    useEffect(() => {\n        // transform the data for the tables in the biomarker page.\n        if (compoundQueryData && geneQueryData) {\n            setTransformedCompoundData(\n                transformCompoundTableData(compoundQueryData.singleCompound)\n            );\n            setTransformedGeneData(\n                transformGeneTableData(\n                    geneQueryData.gene,\n                    compoundQueryData.singleCompound,\n                    gene,\n                )\n            );\n            setCompoundUID(compoundQueryData.singleCompound.compound.uid);\n            setGeneId(geneQueryData.gene.id);\n        };\n\n        // calling right function based on the params.\n        if (gene && compound && tissue) {\n            getGeneCompoundTissueDatasetData({ variables: { geneName: gene, compoundName: compound, tissueName: tissue } });\n        } else if (gene && compound) {\n            getGeneCompoundDatasetData({ variables: { geneName: gene, compoundName: compound } });\n        }\n\n    }, [compoundQueryData, geneQueryData]);\n\n    return (\n        <Layout>\n            {\n                compoundUID && geneId ?\n                    <StyledWrapper>\n                        <StyledIndivPage >\n                            <div className='heading'>\n                                <span className='title' style={{ fontSize: '2vw' }}>\n                                    <span> Association of </span>\n                                    <span>\n                                        <a href={`/compounds/${compoundUID}`} target='_blank'> {`${TitleCase(compound)}`} </a>\n                                    </span>\n                                    <span> and </span>\n                                    <span className='link'>\n                                        <a href={`/genes/${geneId}`} target='_blank'> {`${gene.toUpperCase()}`}  </a>\n                                    </span>\n                                    {\n                                        tissue\n                                            ? <React.Fragment>\n                                                <span> in </span>\n                                                <span className='link'>\n                                                    <a href={`/tissues/${tissueData.tissue.id}`} target='_blank'> {`${tissue.toUpperCase()}`}  </a>\n                                                </span>\n                                                <span> tissue </span>\n                                            </React.Fragment>\n                                            : ''\n                                    }\n                                </span>\n                            </div>\n                            <div className='wrapper'>\n                                <StyledSidebarList>\n                                    {SIDE_LINKS.map((link, i) => createSideLink(link, i))}\n                                </StyledSidebarList>\n                                <div className='container'>\n                                    <div className='content'>\n                                        {\n                                            finalGeneCompoundTissueDatasetData.length > 0\n                                                ? (\n                                                    display === 'forest_plot' &&\n                                                    <Element className='section' name='forest_plot'>\n                                                        <ForestPlot data={finalGeneCompoundTissueDatasetData} />\n                                                    </Element>\n                                                )\n                                                : <Loading />\n                                        }\n                                        {\n                                            display === 'manhattan_plot' &&\n                                            <Element className=\"section\" name=\"manhattan_plot\">\n                                                <ManhattanPlotContainer biomarker={transformedGeneData[0]} compound={compound} tissue={tissue} />\n                                            </Element>\n                                        }\n                                        {\n                                            display === 'gene_info' &&\n                                            <Element\n                                                className='section'\n                                                name='gene_information'\n                                            >\n                                                <div className='section-title'>Gene Information</div>\n                                                <Table\n                                                    columns={geneInfoColumns}\n                                                    data={transformedGeneData}\n                                                    disablePagination\n                                                />\n                                            </Element>\n                                        }\n                                        {\n                                            display === 'compound_info' &&\n                                            <Element\n                                                className='section'\n                                                name='compound_information'\n                                            >\n                                                <div className='section-title'>Compound Information</div>\n                                                <Table\n                                                    columns={compoundInfoColumns}\n                                                    data={transformedCompoundData}\n                                                />\n                                            </Element>\n                                        }\n                                    </div>\n                                </div>\n                            </div>\n                        </StyledIndivPage>\n                    </StyledWrapper>\n                    : <Loading />\n            }\n        </Layout>\n    );\n};\n\n// proptypes for the biomarker component.\nBiomarker.propTypes = {};\n\nexport default Biomarker;\n","import Plot from 'react-plotly.js';\nimport { useQuery } from '@apollo/react-hooks';\nimport datasets from '../../utils/datasetsList';\nimport { useHistory } from 'react-router-dom';\nimport Loading from '../UtilComponents/Loading';\nimport Error from '../UtilComponents/Error';\nimport React, { useState, useMemo, useEffect } from 'react';\nimport { getDatasetStatsQuery } from '../../queries/dataset'\n\n\nconst config = {\n  responsive: true,\n  displayModeBar: false,\n};\n\nconst parsePlotData = (data) => {\n  let plotData = {\n    x: [],\n    y: [],\n    type: 'bar',\n    marker: {\n      color: ['#084081', '#0868ac', '#2b8cbe', '#4eb3d3', '#7bccc4', '#a8ddb5', '#ccebc5', '#e0f3db', '#eef6c9', '#f7fcf0'],\n    },\n  }\n  if (typeof data !== 'undefined') {\n    // descendingly sort datasets based on counts\n    const sorted = data.sort((a, b) => (a.compound_count < b.compound_count) ? 1 : -1);\n\n    sorted.forEach(item => {\n      plotData.x.push(item.dataset.name);\n      plotData.y.push(item.compound_count);\n    })\n  };\n  return plotData;\n}\n\nconst extractDatasets = (data) => {\n  const datasets = {}\n  data.forEach(item => datasets[item.dataset.name] = item.dataset.id)\n  return datasets;\n}\n\nconst BarPlot = () => {\n  // load data from query into state\n  const [count, setCount] = useState({\n    data: {},\n    loaded: false,\n    notFound: false,\n    error: false\n  });\n  const [plotData, setPlotData] = useState({\n    x: [],\n    y: [],\n    type: 'bar',\n    marker: {\n      color: ['#084081', '#0868ac', '#2b8cbe', '#4eb3d3', '#7bccc4', '#a8ddb5', '#ccebc5', '#e0f3db', '#eff8e4', '#f7fcf0'],\n    },\n  });\n\n  const [datasets, setDatasets] = useState({});\n\n  const [error, setError] = useState(false);\n\n  const history = useHistory();\n\n  /**\n   * Redirects to dataset page when a bar is clicked.\n   * @param {*} e onclick event\n   */\n  const redirectToDataset = (e) => {\n    history.push(`/datasets/${datasets[e.points[0].x]}#compounds`);\n  }\n  // query to get the data for the single gene.\n  const { loading } = useQuery(getDatasetStatsQuery, {\n    onCompleted: (data) => {\n      setPlotData(parsePlotData(data.dataset_stats));\n      setDatasets(extractDatasets(data.dataset_stats));\n    },\n    onError: (err) => {\n      console.log(err);\n      setError(true);\n    }\n  });\n\n  const layout = {\n    autosize: true,\n    height: 530,\n    margin: {\n      t: 50,\n    },\n    yaxis: {\n      type: 'log',\n      tickvals : [0, 10, 100, 1000, 10000, 50000, 100000, 500000, 1000000, 5000000, 10000000],\n      ticktext : [0, 10, 100, 1000, '10k', '50k', '100k', '500k', '1M', '5M', '10M'],\n    },\n  };\n\n  return (\n    <React.Fragment>\n      {\n        loading ? <Loading />\n          :\n          error ? <Error />\n            :\n            <Plot\n                data={[plotData]}\n                layout={layout}\n                config={config}\n                onClick={redirectToDataset}\n                onHover={(e) => {if(e.event.toElement.style) e.event.toElement.style.cursor = \"pointer\";}}\n            />\n      }\n    </React.Fragment>\n  );\n}\n\nexport default BarPlot;\n","import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport Table from '../../UtilComponents/Table/Table';\nimport Layout from '../../UtilComponents/Layout';\nimport { Link } from 'react-router-dom';\nimport { getCompoundsQuery } from '../../../queries/compound';\nimport StyledWrapper from '../../../styles/utils';\nimport BarPlot from '../../Plots/BarPlot';\nimport Loading from '../../UtilComponents/Loading';\nimport getMaxWidth from '../../../utils/maxWidthOfAnElement';\n\n// links for pubchem and dtc.\nconst PUBCHEM_LINK = 'https://pubchem.ncbi.nlm.nih.gov/compound/';\nconst CHEMBL_LINK = 'https://www.ebi.ac.uk/chembl/compound_report_card/';\n\nconst table_columns = [\n  {\n    Header: 'Name',\n    accessor: 'name',\n    Cell: (row) => (<Link to={`/compounds/${row.row.original.uid}`}>{row.value}</Link>),\n  },\n  {\n    Header: 'PubChem',\n    accessor: 'pubchem',\n    Cell: (item) => {\n      let pubchem = item.cell.row.original.pubchem;\n      if (pubchem) {\n        return(pubchem.map((id, i) => (\n          <span key={i}>\n            <a href={`${PUBCHEM_LINK}${id}`} target='_blank' rel='noopener noreferrer'>{id}</a>{ i + 1 < pubchem.length ? ', ' : ''}\n          </span>)\n        ));\n      } else {\n        return '';\n      }\n    }\n  },\n  {\n    Header: 'ChEMBL',\n    accessor: 'chembl',\n    Cell: (row) => (<a href={`${CHEMBL_LINK}${row.value}`} target='_blank' rel='noopener noreferrer'>{row.value}</a>),\n  },\n  {\n    Header: 'FDA Status',\n    accessor: 'fda_status',\n  },\n];\n\n/**\n *\n * @param {Array} data - compound data from the compounds API call.\n */\nconst getTableData = (data) => {\n  let table_data = [];\n  if (data) {\n    table_data = data.compounds.map((value) => {\n      const { name, annotation, id, uid } = value;\n      const {\n        smiles, inchikey, fda_status, chembl\n      } = annotation;\n      const pubchem = annotation.pubchem ? annotation.pubchem.split(\"///\") : null;\n      return {\n        id,\n        name,\n        uid,\n        smiles,\n        inchikey,\n        pubchem,\n        fda_status,\n        chembl\n      };\n    });\n  }\n  return table_data;\n};\n\n/**\n *\n * @param {Boolean} loading\n * @param {Boolean} error\n * @param {Array} columns\n * @param {Array} data\n *\n * @returns - (\n *  <h3> Title for the barplot </h3>\n *  <BarPlot/>\n *  <h2> Title for the table </h2>\n *  <Table/>\n * )\n */\nconst renderComponent = (loading, error, columns, data) => {\n  if (loading) {\n    return <Loading />;\n  }\n  if (error) {\n    return <p> Error! </p>;\n  }\n  return (\n    <>\n      <h2 className=\"new-section\"> Number of Compounds tested in each Dataset </h2>\n      <div style={{maxWidth: getMaxWidth(window.innerWidth)}}>\n        <BarPlot />\n      </div>\n      <h2 className=\"new-section\">List of Compounds</h2>\n      <Table columns={columns} data={data} defaultSort={[{ id: 'fda_status' }]} />\n    </>\n  );\n};\n\n/**\n * Parent component for the compounds page.\n *\n * @component\n * @example\n *\n * return (\n *   <Compounds/>\n * )\n */\nconst Compounds = () => {\n  const { loading, error, data: compound_data } = useQuery(getCompoundsQuery);\n  const columns = React.useMemo(() => table_columns, []);\n  const data = React.useMemo(() => getTableData(compound_data), [compound_data]);\n  return (\n    <Layout page=\"compounds\">\n      <StyledWrapper>\n        {\n          renderComponent(loading, error, columns, data)\n        }\n      </StyledWrapper>\n    </Layout>\n  );\n};\n\nexport default Compounds;\n","import { gql } from 'apollo-boost';\n\n/**\n * @returns - Query returns the list of cell lines with it's id and name,\n * and also returns the tissue object for the particular cell line.\n */\nconst getCellLinesQuery = gql`\n  query getAllCellLines {\n    cell_lines(all: true) {\n      id\n      uid\n      name\n      tissue {\n        id\n        name\n      }\n      datasets {\n        id\n        name\n      }\n    }\n  }\n`;\n\n/**\n * @param { Number } cellId - cell id of the cell line to be queried.\n * @returns - all the information returns by the cell lines query,\n * diseases, accessions, and synonym for the cell line in different datasets.\n */\nconst getCellLineQuery = gql`\n  query getSingleCellLine($cellId: Int, $cellName: String, $cellUID: String) {\n    cell_line(cellId: $cellId, cellName: $cellName, cellUID: $cellUID) {\n      id\n      uid\n      name\n      diseases\n      accession_id\n      tissue {\n        id\n        name\n      }\n      synonyms {\n        name\n        dataset {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport {\n  getCellLinesQuery,\n  getCellLineQuery,\n};\n","import React from 'react';\nimport Plot from 'react-plotly.js';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst StyledPieChart = styled.div`\n  width: 100%;\n  .slice {\n    cursor: ${(props) => props.clickable ? 'pointer' : ''};\n  }\n`;\n\nconst config = {\n  responsive: true,\n  displayModeBar: false,\n};\n\nconst PieChart = ({ className, id, data, height=700, onClick }) => (\n  <StyledPieChart className={className} clickable={onClick} >\n    <Plot \n      divId={id}\n      data={data} \n      layout={{\n        height: height,\n        // width: 900,\n        autosize: true,\n        showlegend: window.matchMedia('(min-width: 800px)').matches,\n        legend: {\n          font: {\n            size: 13,\n          },\n        },\n      }} \n      config={config} \n      onClick={onClick}\n    />\n  </StyledPieChart>\n);\n\nPieChart.propTypes = {\n  data: PropTypes.arrayOf(Object).isRequired,\n};\n\nexport default PieChart;\n","import React, { useState, useEffect } from \"react\";\nimport { Link } from 'react-router-dom';\nimport styled from \"styled-components\";\nimport PieChart from '../../Plots/PieChart';\nimport Table from '../../UtilComponents/Table/Table';\nimport plotColors from '../../../styles/plot_colors';\n\nconst StyledTissueCellsPieChart = styled.div`\n  width: 100%;\n  display: flex;\n  .tissue-pie-chart {\n    width: 85%;\n  }\n  .tissue-cells-list-container {\n    width: 15%;\n    min-width: 250px;\n    margin-top: 100px;\n    margin-left: 10px;\n    .tissue-cells-list {\n      \n    }\n  }\n  @media only screen and (max-width: 765px) {\n    flex-direction: column;\n    .tissue-pie-chart {\n      width: 100%;\n    }\n    .tissue-cells-list-container {\n      width: 100%;\n      margin-top: 50px;\n      margin-left: 0px;\n    }\n  }\n`;\n\nconst cellTableColumns = [\n    {\n        Header: 'Name',\n        accessor: 'name',\n        center: true,\n        Cell: (row) => (<Link to={`/cell_lines/${row.row.original.uid}`}>{row.value}</Link>),\n    },\n];\n\n/**\n *\n * @param {Array} data - cell line data from the cell lines API.\n * @returns {Object} - returns an object of multiple objects,\n * where each object is represented as follows -\n * tissue_name: {\n *  cells: {Array},\n *  total: Number\n * }\n *\n */\nconst cellLinesGroupedByTissue = (data) => {\n    const tissues = [];\n    const returnData = {};\n    if (data) { \n        data.cell_lines.forEach((cell) => {\n        const { name, cell_uid, tissue } = cell;\n        if (tissues.includes(tissue.name)) {\n            returnData[tissue.name].cells.push({name: name, uid: cell_uid});\n            returnData[tissue.name].total += 1;\n        } else {\n            tissues.push(tissue.name);\n            returnData[tissue.name] = {\n            cells: [{name: name, tissue_id: tissue.id, uid: cell_uid}],\n            total: 1,\n            id: tissue.id\n            };\n        }\n        });\n    }\n    return returnData;\n};\n\nconst pieChartDataObject = (data) => {\n    const returnData = [{\n            values: [],\n            labels: [],\n            hoverinfo: 'label+percent',\n            hole: 0.55,\n            type: 'pie',\n            marker: {\n            colors: plotColors.tissues\n        },\n    }];\n    Object.keys(data).forEach((key) => {\n        returnData[0].values.push(data[key].total);\n        returnData[0].labels.push(key);\n        });\n    return returnData;\n};\n\nconst TissueCellsPieChart = (props) => {\n    const { cells } = props;\n    const [selectedTissueCells, setSelectedTissueCells] = useState(undefined);\n    const [chartData, setChartData] = useState({\n        pie: [],\n        tissues: {}\n    });\n\n    useEffect(() => {\n        const groupedData = cellLinesGroupedByTissue(cells);\n        const pieData = pieChartDataObject(groupedData);\n        setChartData({\n            pie: pieData,\n            tissues: groupedData\n        });\n    }, [cells]);\n    \n    const onPieChartClick = (e) => {\n        const tissueObj = chartData.tissues[e.points[0].label];\n        setSelectedTissueCells({\n            tissue: e.points[0].label,\n            ...tissueObj\n        });\n    };\n    \n    return(\n        <StyledTissueCellsPieChart>\n            <div className='tissue-cells-list-container'>\n                <h4>\n                {\n                    selectedTissueCells ? \n                    `${selectedTissueCells.cells.length} ` : ''}Cell Lines of {selectedTissueCells ? \n                        <a href={`/tissues/${selectedTissueCells.id}`}>{selectedTissueCells.tissue}</a> \n                        : \n                        'a Selected Tissue'\n                }\n                </h4>\n                <div className='tissue-cells-list'>\n                {\n                    selectedTissueCells ?\n                    <Table columns={cellTableColumns} data={selectedTissueCells.cells} showHeader={false} showPageNumSelect={false} />\n                    :\n                    <p>Click on the pie chart to view the list of cell lines that belong to the seleted tissue.</p>\n                }\n                </div>\n            </div>\n            <PieChart className='tissue-pie-chart' data={chartData.pie} onClick={onPieChartClick} />\n        </StyledTissueCellsPieChart>\n    );\n}\n\nexport default TissueCellsPieChart;","import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport StyledWrapper from '../../../styles/utils';\nimport { Link } from 'react-router-dom';\nimport Table from '../../UtilComponents/Table/Table';\nimport Layout from '../../UtilComponents/Layout';\nimport { getCellLinesQuery } from '../../../queries/cell';\nimport Loading from '../../UtilComponents/Loading';\nimport Error from '../../UtilComponents/Error';\nimport TissueCellsPieChart from '../Tissues/TissueCellsPieChart';\nimport convertToTitleCase from '../../../utils/convertToTitleCase';\n\nconst tableColumns = [\n  {\n    Header: 'Name',\n    accessor: 'name',\n    Cell: (row) => (<Link to={`/cell_lines/${row.row.original.uid}`}>{row.value}</Link>),\n  },\n  {\n    Header: 'Tissue',\n    accessor: 'tissue',\n    Cell: (row) => (<Link to={`/tissues/${row.row.original.tissue_id}`}>{row.value}</Link>)\n  },\n];\n\n/**\n *\n * @param {Array} data - tissue data from the tissues API.\n */\nconst getTableData = (data) => {\n  let tableData = [];\n  if (data) {\n    tableData = data.cell_lines.map((value) => {\n      const { name, tissue, id, uid } = value;\n      return {\n        id,\n        uid,\n        name: name.replace(/_/g, ' '),\n        tissue: convertToTitleCase(tissue.name),\n        tissue_id: tissue.id\n      };\n    });\n  }\n  return tableData;\n};\n\n/**\n * Function to render the cell lines page component depending on \n * the API request outcome.\n * @param {*} loading \n * @param {*} error \n * @param {*} pieData \n * @param {*} tableData \n * @returns a component to be rendered.\n */\nconst renderComponent = (loading, error, pieData, tableData) => {\n  if (error) {\n    return (<Error />);\n  }\n\n  if (loading) {\n    return (<Loading />)\n  }\n\n  return (\n    <React.Fragment>\n      <h2>Relative Percentage of Cell lines per Tissue</h2>\n      <TissueCellsPieChart cells={pieData} />\n      <h2> List of Cell Lines </h2>\n      <Table columns={tableColumns} data={tableData} />\n    </React.Fragment>\n  );\n};\n\n/**\n * Parent component for the tissues page.\n *\n * @component\n * @example\n *\n * @returns ( <Cells/> )\n*/\nconst CellLines = () => {\n  // queries to get the cell line data.\n  const { loading, error, data } = useQuery(getCellLinesQuery);\n  // setting data for the table.\n  const cell_data = React.useMemo(() => getTableData(data), [data]);\n\n  return (\n    <Layout page=\"cells\">\n      <StyledWrapper>\n        {\n          renderComponent(loading, error, data, cell_data)\n        }\n      </StyledWrapper>\n    </Layout>\n  );\n};\n\nexport default CellLines;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport colors from '../../../styles/colors';\n\nconst StyledDescription = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    max-height: 370px;\n    text-align: justify;\n\n    width: 70%;\n    margin-top: 8vh;\n\n    .text-container {\n        width: 100%;\n\n        display: flex;\n        flex-direction: column;\n\n        span {\n            font-size: calc(0.5vw + 0.7em);\n            line-height: calc(1vw + 1em);\n        }\n\n        h1 {\n            color: ${colors.dark_teal_heading};\n            font-family: 'Roboto Slab', serif;\n            font-size: calc(1.8vw + 1em) !important;\n            margin-bottom: 4vh;\n        }\n    }\n\n    /* mobile */\n    @media only screen and (max-width: 1081px) {\n        .text-container{\n          width:100%;\n        }\n    } \n`;\n\n/**\n * Shows the description on cite us page\n *\n * @component\n * @example\n *\n * return (\n *   <Description/>\n * )\n */\nconst CiteUsDescription = () => (\n  <StyledDescription>\n    <div className=\"text-container\">\n      <h1>\n        Cite Us:\n      </h1>\n      <span>\n        We ask users who find our database of value to their research to cite us, using the following publications:<br/>\n        <ul>\n          <li>\n            <a href=\"https://academic.oup.com/nar/article/46/D1/D994/4372597\" target=\"_blank\">\n              Smirnov, Petr, et al. \"PharmacoDB: an integrative database for mining in vitro anticancer drug screening\n              studies.\" Nucleic Acids Research (2017).\n            </a>\n          </li>\n            <li>\n              <a href=\"https://academic.oup.com/bioinformatics/article/32/8/1244/1744214\" target=\"_blank\">\n                Smirnov, Petr, et al. \"PharmacoGx: an R package for analysis of large pharmacogenomic datasets.\"\n                Bioinformatics 32.8 (2015): 1244-1246.\n              </a>\n          </li>\n        </ul>\n        {/*We are always improving the quality of data in PharmacoDB. In order to ensure reproducibility of results use a*/}\n        {/* <a href=\"https://zenodo.org/record/1027721#.YTIuMdNKj0o\" target=\"_blank\"> Zenodo DOI</a> to specify the version of the data used in your study (see all available DOIs below):*/}\n        {/*<ul>*/}\n        {/*  <li>*/}\n        {/*    PharmacoDB-1.1.0 and PharmacoDB-1.0.0 share the same data (see Version 2 in Zenodo page) - <a href=\"https://zenodo.org/record/1038045\" target=\"_blank\">10.5281/zenodo.1038045</a>*/}\n        {/*  </li>*/}\n        {/*</ul>*/}\n      </span>\n    </div>\n  </StyledDescription>\n);\n\nexport default CiteUsDescription;\n","import React from 'react';\nimport styled from 'styled-components';\nimport ScrollToTop from 'react-scroll-to-top';\nimport Layout from '../../UtilComponents/Layout';\nimport CiteUsDescription from './CiteUsDescription';\nimport 'react-scroll-to-top/lib/index.css';\n\nconst StyledCiteUs = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`;\n\n/**\n * Parent component for the cite us page,\n * includes child components for the description.\n *\n * @component\n * @example\n *\n * return (\n *   <CiteUs/>\n * )\n */\nconst CiteUs = () => (\n    <Layout page=\"Cite Us\">\n        <ScrollToTop smooth />\n        <StyledCiteUs>\n            <CiteUsDescription />\n        </StyledCiteUs>\n    </Layout>\n);\n\nexport default CiteUs;\n","import styled from 'styled-components';\n\nconst StyledSelectContainer = styled.div`\n    display:flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    width: 100%;\n    .selector-container {\n        font-size: 14px;\n        display: flex;\n        align-items: center;\n        width: 49%;\n        min-width: 150px;\n        max-width: 350px;\n        margin-right: 15px;\n        .label {\n            margin-right: 10px;\n        }\n        .selector {\n            width: 60%;\n        }\n    }\n    .single-selector-container {\n      font-size: 14px;\n      align-items: center;\n      width: 49%;\n      min-width: 150px;\n      max-width: 350px;\n      margin-left: 65%;\n      .label {\n        margin-right: 10px;\n      }\n      .selector {\n        width: 60%;\n      }\n    }\n`;\n\nexport default StyledSelectContainer;\n","import React, { useState, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport PropTypes from 'prop-types';\nimport createSvgCanvas from '../../utils/createSvgCanvas';\nimport colors from '../../styles/colors';\nimport styled from 'styled-components';\nimport Loading from '../UtilComponents/Loading';\nimport getMaxWidth from '../../utils/maxWidthOfAnElement';\n\n// circle radius.\nconst CIRCLE_RADIUS = 8;\n// canvas id.\nconst CANVAS_ID = 'upsetplot-canvas';\n\n// styling the upset plot.\nconst UpsetPlotStyle = styled.div`\n    width: ${props => props.width};\n    overflow: auto;\n    margin-bottom: 50px;\n    text-align: center;\n`;\n\n// margin for the svg element.\nconst margin = {\n    top: 80,\n    right: 20,\n    bottom: 80,\n    left: 30\n};\n\n/**\n * scale for y-axis\n * @param {number} min - usually begins with zero.\n * @param {number} max - max value along the y axis.\n * @param {number} height - height of svg canvas.\n */\nconst yScale = (min = 0, max, height) => d3.scaleLinear()\n    .domain([min, max])\n    .range([height / 1.5, 0])\n    .nice();\n\n/**\n * scale for y-axis\n * @param {number} min - usually begins with one.\n * @param {number} max - max value along the y axis.\n * @param {number} height - height of svg canvas.\n */\nconst yLogScale = (min = 1, max, height) => d3.scaleLog()\n    .domain([min, max])\n    .range([height / 1.5, 0])\n    .nice();\n\n/**\n * creates a scale for x-axis.\n * @param {number} min - min value, usually zero.\n * @param {number} max - data length.\n * @param {number} width - width of the svg canvas.\n */\nconst xScale = (min = 0, max, width) => d3.scaleLinear()\n    .domain([min, max])\n    .range([0, width])\n    .nice();\n\n/**\n * y axis of the bar chart.\n * @param {Object} svg - svg canvas object.\n * @param {Object} scale - scale for creating the y axis.\n */\nconst yAxis = (svg, scale, tickNum) => svg\n    .append('g')\n    .attr('id', 'y-axis')\n    .attr('transform', `translate(${margin.left * 1.5}, 0)`)\n    .call(d3.axisLeft(scale)\n        .ticks(tickNum)\n        .tickFormat(d3.format('d')));\n\n/**\n * Creates x axis.\n * @param {Object} svg - svg canvas object.\n * @param {Object} scale - scale for creating the x axis.\n * @param {number} height - height of svg canvas.\n */\nconst xAxis = (svg, scale, height) => svg\n    .append('g')\n    .attr('id', 'x-axis')\n    .attr('transform', `translate(${margin.left * 1.5}, ${height / 1.5})`)\n    .call(d3.axisBottom(scale).tickSize(0).tickValues(0));\n\n\nconst appendTextYAxis = (svg, height, type) => svg\n    .append('g')\n    .attr('id', 'y-axis-text')\n    .attr('transform', `rotate(-90)`)\n    .append('text')\n    .attr('x', -200)\n    .attr('y', -20)\n    .attr('stroke', `${colors.dark_teal_heading}`)\n    .style('font-size', 13)\n    .style('position', 'sticky')\n    .text(`Number of ${type}s`);\n\n/**\n * append the rectangles to the bar chart (bars)\n * @param {Object} svg - svg canvas object.\n * @param {data} Object - data input object.\n * @param {scale} Object - y axis scale.\n * @param {number} height - height of svg canvas.\n */\nconst appendRectangles = (svg, data, scale, height, updateSelectedData) => {\n    // get the data object keys.\n    const keys = Object.keys(data);\n\n    const rectangles = svg.append('g')\n        .attr('class', 'bar-rectangles');\n\n    keys.forEach((key, i) => {\n        rectangles.append('rect')\n            .attr('height', height / 1.5 - scale(data[key].count))\n            .attr('width', CIRCLE_RADIUS * 2)\n            .attr('x', `${(margin.left * 1.8) + (i * CIRCLE_RADIUS * 3)}`)\n            .attr('y', scale(data[key].count))\n            .attr('id', `rect-${key}`)\n            .attr('fill', `${colors.dark_teal_heading}`)\n            .on('mouseover', function () {\n                // append the corresponding text to the bar chart.\n                rectangles.append('text')\n                    .attr('x', `${(margin.left * 1.8) + (i * CIRCLE_RADIUS * 3)}`)\n                    .attr('y', scale(data[key].count) - 5)\n                    .attr('id', `text-${key}`)\n                    .text(`${data[key].count}`)\n                    .attr('font-size', 9)\n                    .attr('font-weight', 600);\n                // changes the color.\n                d3.select(`#rect-${key}`)\n                    .attr('opacity', 0.7);\n                // change the cursor type.\n                d3.select(this).style('cursor', 'pointer');\n            })\n            .on('mouseout', function () {\n                // remove the text from the bar graph.\n                d3.select(`#text-${key}`).remove();\n                // fill the color again to default.\n                d3.select(`#rect-${key}`)\n                    .attr('opacity', 1.0);\n                // change the cursor to default.\n                d3.select(this).style('cursor', 'default');\n            })\n            .on('click', function () {\n                // makeTable(data[key].values);\n                updateSelectedData(data[key].values);\n            });\n    })\n};\n\n/**\n *\n * @param {Object} svg - svg canvas object.\n * @param {Array} datasets - array of the datasets.\n * @param {number} height - height of svg canvas.\n */\nconst circleAxis = (svg, datasets, height) => {\n    const circleText = svg.append('g')\n        .attr('class', 'circle-axis');\n\n    for (let i = 0; i < datasets.length; i++) {\n        circleText.append('text')\n            .attr('text-anchor', 'end')\n            .attr('transform', `translate(${margin.left * 1.5}, ${height / 1.5 + ((i + 1) * CIRCLE_RADIUS * 3.1)})`)\n            .attr('id', `text-circle-${datasets[i]}`)\n            .attr('font-size', 12)\n            .text(`${datasets[i]}`);\n    }\n};\n\n/**\n * creates the heatmap circles for the upset plot.\n * @param {Object} svg - svg canavas object.\n * @param {Object} data - input data object.\n * @param {Array} datasets - datasets array.\n * @param {number} length - length of the data.\n * @param {number} height - height of svg canvas.\n */\nconst upsetCircle = (svg, data, datasets, length, height, updateSelectedData) => {\n    // data keys.\n    const dataKeys = Object.keys(data);\n\n    const circles = svg.append('g')\n        .attr('class', 'circles');\n\n    // loop and set the circles.\n    for (let i = 0; i < length; i++) {\n        // get set.\n        const set = data[dataKeys[i]];\n        for (let j = 0; j < datasets.length; j++) {\n            // append circles.\n            circles.append('circle')\n                .attr('transform', `translate(${margin.left * 2}, ${height / 1.5 + CIRCLE_RADIUS * 3})`)\n                .style('fill', set.keys.includes(datasets[j]) ? `${colors.dark_teal_heading}` : `${colors.silver}`)\n                .attr('r', CIRCLE_RADIUS)\n                .attr('cx', i * CIRCLE_RADIUS * 3)\n                .attr('cy', j * CIRCLE_RADIUS * 3)\n                .attr('class', `circle-set-${i}`)\n                .on('mouseover', function () {\n                    // change the cursor type.\n                    d3.select(this).style('cursor', 'pointer')\n                })\n                .on('mouseout', function () {\n                    // change the cursor to default.\n                    d3.select(this).style('cursor', 'default');\n                })\n                .on('click', function () {\n                    updateSelectedData(data[dataKeys[i]].values);\n                });\n        }\n\n        // append line to the upset circles.\n        circles.append('line')\n            .attr('transform', `translate(${margin.left * 2}, ${height / 1.5 + CIRCLE_RADIUS * 3})`)\n            .attr('x1', i * CIRCLE_RADIUS * 3)\n            .attr('y1', datasets.indexOf(set.keys[0]) * CIRCLE_RADIUS * 3)\n            .attr('x2', i * CIRCLE_RADIUS * 3)\n            .attr('y2', datasets.indexOf(set.keys[set.keys.length - 1]) * CIRCLE_RADIUS * 3)\n            .style('stroke', `${colors.dark_teal_heading}`)\n            .attr('stroke-width', 3)\n            .attr('class', `line-set-${i}`)\n            .on('mouseover', function () {\n                // change the cursor type.\n                d3.select(this).style('cursor', 'pointer');\n            })\n            .on('mouseout', function () {\n                // change the cursor to default.\n                d3.select(this).style('cursor', 'default');\n            })\n            .on('click', function () {\n                updateSelectedData(data[dataKeys[i]].values);\n            });\n    }\n};\n\n\n/**\n * Main function to create upset plot.\n * @param {Object} data - input data object.\n * @param {Array} datasets - array of datasets.\n */\nconst createUpsetPlot = (data, datasets, type, updateSelectedData) => {\n    // width and height of the SVG canvas.\n    const width = CIRCLE_RADIUS * 3.1 * (Object.keys(data).length + 1);\n    const height = 700 - margin.top - margin.bottom;\n\n    const tableHeight = 400;\n    const tableWidth = 800;\n\n    // sort the data based on the count.\n    const sortedEnteries = Object.entries(data).sort((a, b) => b[1].count - a[1].count);\n    // sorted data.\n    const sortedData = {};\n    sortedEnteries.forEach((entry) => {\n        sortedData[entry[0]] = entry[1];\n    });\n\n    // get the max total value in the sortedData object.\n    const maxCount = Math.max(...Object.keys(sortedData).map(el => sortedData[el].count));\n\n    // get the length of the sortedData object.\n    const sortedDataLength = Object.keys(sortedData).length;\n\n    // svg canvas.\n    const svg = createSvgCanvas({ height, width, margin, id: 'upsetplot', canvasId: CANVAS_ID });\n\n    // create scale for x axis.\n    const scaleXAxis = xScale(0, sortedDataLength, width);\n\n    // create scale for y axis.\n    const scaleYAxis = type === 'Compound' ? yLogScale(1, maxCount, height) : yScale(0, maxCount, height);\n\n    // create x axis.\n    xAxis(svg, scaleXAxis, height);\n\n    // create y axis.\n    const tickNum = type === 'Compound' ? 5 : type === 'Tissue' ? 20 : 10;\n    yAxis(svg, scaleYAxis, tickNum);\n\n    // append text to the y axis.\n    appendTextYAxis(svg, height, type);\n\n    // append rectangle for the bar chart.\n    appendRectangles(svg, sortedData, scaleYAxis, height, updateSelectedData);\n\n    // upset circle.\n    upsetCircle(svg, sortedData, datasets, sortedDataLength, height, updateSelectedData);\n\n    // append text to the circles as axis.\n    circleAxis(svg, datasets, height);\n};\n\n/**\n * returns (\n *  <UpsetPlot/>\n * )\n */\nconst UpsetPlot = ({ data, datasets, type, updateSelectedPlotData }) => {\n    useEffect(() => {\n        // remove the alrady existing upset plot.\n        d3.select(`#${CANVAS_ID}`).remove();\n\n        // create upset plot.\n        if (!(data && Object.keys(data).length === 0 && Object.getPrototypeOf(data) === Object.prototype)) {\n            createUpsetPlot(data, datasets, type, updateSelectedPlotData);\n        }\n    }, [data]);\n\n    return (\n        <UpsetPlotStyle width={getMaxWidth(window.innerWidth)}>\n            {\n                data && datasets ? <div id='upsetplot' /> : <Loading />\n            }\n        </UpsetPlotStyle>\n    )\n};\n\n// Proptypes.\nUpsetPlot.propTypes = {\n    data: PropTypes.object.isRequired,\n    datasets: PropTypes.arrayOf(PropTypes.string).isRequired,\n    type: PropTypes.string.isRequired,\n};\n\nexport default UpsetPlot;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Select from 'react-select';\nimport StyledSelectorContainer from '../../../styles/Utils/StyledSelectorContainer';\nimport UpsetPlot from '../../Plots/UpsetPlot';\nimport Table from '../../UtilComponents/Table/Table';\nimport DownloadButton from '../../UtilComponents/DownloadButton';\nimport styled from 'styled-components';\nimport getMaxWidth from '../../../utils/maxWidthOfAnElement';\n\n// styles for the plot data table\nconst StyledPlotDataTable = styled.div`\n    width: ${props => props.width};\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n\n    .download-button {\n        align-self: flex-end;\n    }\n`; \n\n/**\n * \n * @param {Array} data \n * @returns {Array} - returns an array of objects\n */\nconst transformData = (data) =>  data.map(el => ({id: el, name: el}));\n\n/**\n * create table for list of types\n */\nconst makeTable = (data) => {\n    // an array with the columns of dataset table.\n    const tableColumns = [\n        {\n            Header: 'Name',\n            accessor: 'name',\n            center: true,\n            rowSpan: 2,\n        },\n    ];\n    // table data\n    const tableData = transformData(data);\n    \n    return <Table columns={tableColumns} data={tableData}/>\n};\n\n/**\n * main component\n */\nconst RenderUpsetPlot = ({ compoundData, cellData, tissueData, datasets, selectOptions }) => {\n    // state to store the data and selected type.\n    const [plotData, setPlotData] = useState({});\n    const [selectedType, setSelectedType] = useState('Cell Line');\n    const [selectedPlotData, updateSelectedPlotData] = useState();\n\n    // update data based on the selected type.\n    useEffect(() => {\n        if (selectedType === 'Tissue') {\n            return setPlotData(tissueData);\n        } \n        if (selectedType === 'Compound') {\n            return setPlotData(compoundData);\n        } \n        if (selectedType === 'Cell Line') {\n            return setPlotData(cellData);\n        }\n    })\n\n    return (\n        <>\n            <StyledSelectorContainer>\n                <div className='single-selector-container'>\n                    <Select\n                        className='selector'\n                        defaultValue={{ value: selectedType, label: selectedType }}\n                        options={selectOptions}\n                        onChange={(e) => setSelectedType(e.label)}\n                    />\n                </div>\n            </StyledSelectorContainer>\n            <UpsetPlot \n                data={plotData}    \n                datasets={datasets} \n                type={selectedType} \n                updateSelectedPlotData={updateSelectedPlotData}\n            />\n            {\n                selectedPlotData ? (\n                    <StyledPlotDataTable width={getMaxWidth(window.innerWidth)}>\n                        <div className='download-button'>\n                            <DownloadButton\n                                label='CSV'\n                                data={transformData(selectedPlotData)}\n                                mode='csv'\n                                filename={`data`}\n                            />\n                        </div>\n                        <div> {makeTable(selectedPlotData)} </div>\n                    </StyledPlotDataTable>\n                ) : <div/>\n            }\n        </>\n    );\n};\n\nRenderUpsetPlot.propTypes = {\n    cellData: PropTypes.objectOf(PropTypes.shape({\n        keys: PropTypes.arrayOf(PropTypes.string),\n        values: PropTypes.arrayOf(PropTypes.string),\n        count: PropTypes.number,\n    })).isRequired,\n    compoundData: PropTypes.objectOf(PropTypes.shape({\n        keys: PropTypes.arrayOf(PropTypes.string),\n        values: PropTypes.arrayOf(PropTypes.string),\n        count: PropTypes.number,\n    })).isRequired,\n    tissueData: PropTypes.objectOf(PropTypes.shape({\n        keys: PropTypes.arrayOf(PropTypes.string),\n        values: PropTypes.arrayOf(PropTypes.string),\n        count: PropTypes.number,\n    })).isRequired,\n    datasets: PropTypes.arrayOf(PropTypes.string),\n    selectOptions: PropTypes.arrayOf(PropTypes.shape({\n        value: PropTypes.string,\n        label: PropTypes.string,\n    })).isRequired,\n};\n\nexport default RenderUpsetPlot;","/**\n *\n * @param {Object} data - input data.\n * @param {Array} subsets - list of all the subsets.\n */\nconst createSetsWithData = (data, subsets) => {\n    const finalObject = {};\n    subsets.forEach((subset, i) => {\n        if (subset.length > 0) {\n            // union of the data.\n            // subset.forEach(el => uniqueValues.push(...data[el]));\n\n            // intersection\n            let result = [];\n            if (subset.length === 1) {\n                result = data[subset[0]];\n            } else {\n                result = subset.reduce((acc, cur) => {\n                    if (typeof (acc) === \"string\") {\n                        return data[acc].filter((el) => data[cur].includes(el));\n                    } else {\n                        return acc.filter((el) => data[cur].includes(el));\n                    }\n                });\n            }\n\n            // append the object to final object variable.\n            if (result.length > 0) {\n                finalObject[`set${i}`] = {\n                    keys: subset,\n                    values: [...new Set(result)],\n                    count: result.length,\n                }\n            }\n        }\n    })\n    return finalObject;\n};\n\nexport default createSetsWithData;\n","import React, { useState, useEffect } from 'react';\nimport Select from 'react-select';\nimport * as d3 from 'd3';\nimport * as venn from 'venn.js';\nimport PropTypes from 'prop-types';\nimport colors from '../../styles/colors';\nimport styled from 'styled-components';\nimport DownloadButton from '../UtilComponents/DownloadButton';\nimport Table from '../UtilComponents/Table/Table';\nimport getMaxWidth from '../../utils/maxWidthOfAnElement';\n\n// venn component styles and selection data table styles\nconst VennContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n\n    .venn-select-container {\n        width: 250px;\n        align-self: flex-end;\n    }\n\n    #venn {\n        align-self: center;\n    }\n\n    .venn-description {\n        color: ${colors.dark_pink_highlight};\n        margin-bottom: 20px;\n        text-align: center;\n        font-style: italic;\n\n        span {\n            font-weight: 700;\n        }\n    }\n\n    .table-container {\n        align-self: center;\n    }\n`;\n\nconst SelectionTableStyle = styled.div`\n    margin-top: 30px;\n    width: ${props => props.width};\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n\n    .download-button {\n        align-self: flex-end;\n    }\n`;\n\n\n// dimensions for the venn plot\nconst dimensions = {\n    width: 650,\n    height: 450,\n}\n\n/**\n * Creates the venn diagram structure.\n * @param {number} width - width of the venn diagram.\n * @param {number} height - height of the venn diagram.\n * @param {number} fontSize - font size of the text in the venn diagram.\n */\nconst createVennDiagramStructure = (width = dimensions.width, height = dimensions.height, fontSize = '18px') => {\n    return venn.VennDiagram()\n        .width(width)\n        .height(height)\n        .fontSize(fontSize)\n        .padding(20);\n};\n\n/**\n * Appends the data to the venn diagram.\n * @param {Object} chart - venn diagram object.\n * @param {Array} data - data array.\n * @param {string} id - div id to append the venn diagram to.\n */\nconst enterData = (chart, data, id = 'venn', updateSelectedData) => d3.select(`#${id}`)\n    .datum(data)\n    .call(chart)\n    .on('mouseover', function () {\n        // change the cursor type.\n        d3.select(this).style('cursor', 'pointer')\n    })\n    .on('mouseout', function () {\n        // change the cursor to default.\n        d3.select(this).style('cursor', 'default');\n    })\n    .on('click', function (d) { \n        updateSelectedData(d.target.__data__.values);\n    });\n\n/**\n * Changes the text color.\n * @param {string} id - parent id for the venn diagram.\n * @param {string} color - color for the text.\n */\nconst changeText = (id = 'venn', color = 'white') => {\n    d3.selectAll(`#${id} text`)\n        .style('fill', color);\n};\n\n/**\n * \n * @param {string} id - parent id for the venn diagram.\n * @param {string} circleClass - class for the main circles.\n * @param {string} color - color string.\n */\nconst changeCirclesColor = (id, circleClass, color = `${colors.dark_teal_heading}`) => {\n    d3.selectAll(`#${id} .${circleClass} path`)\n        .style('fill', color)\n        .style('fill-opacity', 0.80);\n};\n\n/**\n * \n * @param {string} id - parent id for the venn diagram.\n * @param {string} circleClass - class for the main circles.\n * @param {string} color - color string.\n */\nconst changeIntersectionColor = (id, circleClass, color = `${colors.green}`) => {\n    d3.selectAll(`#${id} .${circleClass} path`)\n        .style('fill', color)\n        .style('fill-opacity', 0.80);\n};\n\n/**\n * \n * @param {string} attr - attribute to be choosen.\n * @param {string} color - color string.\n */\nconst changeInnerIntersectionColor = (attr, color = `${colors.dark_pink_highlight}`) => {\n    d3.select(`g[data-venn-sets=${attr}] path`)\n        .style('fill', color)\n        .style('fill-opacity', 0.80);\n};\n\n/**\n * append text with the dataset information and total number of a particular data type.\n * @param {Array} data \n */\nconst appendText = (data) => {\n    // selecting svg element and adding a g element with id.\n    const svg = d3.select('#venn svg')\n        .append('g')\n        .attr('id', 'text-label');\n\n    // position of the text based on data length (2^2-1 or 2^3-1).\n    const location = data.length === 7 || data.length === 8\n        ? {\n            0: { x: (dimensions.width) / 8, y: dimensions.height - 30 },\n            1: { x: (dimensions.width * 2) / 2.65, y: dimensions.height - 30 },\n            2: { x: 140, y: 80 },\n        }\n        : {\n            0: { x: (dimensions.width) / 4, y: dimensions.height - 20 },\n            1: { x: (dimensions.width * 2) / 3 - 20, y: dimensions.height - 20 },\n        };\n\n    // appends the text.\n    let count = 0;\n    data.forEach((el) => {\n        if (el.sets.length === 1) {\n            svg\n                .append('text')\n                .attr('x', location[count]['x'])\n                .attr('y', location[count]['y'])\n                .attr('stroke', `${colors.dark_teal_heading}`)\n                .style('font-size', 13)\n                .style('font-weight', 500)\n                .text(`${el.sets.join('+')} (${el.label})`);\n            count += 1;\n        };\n    })\n}\n\n\n\nconst createVennDiagram = (data, updateSelectedData) => {\n    // remove the existing svg element.\n    d3.select('#venn svg').remove();\n    \n    // get the set and concat it in case the set size is three (3).\n    let innerInstersection = '';\n\n    data.forEach(el => {\n        if (el.sets.length === 3) {\n            innerInstersection = el.sets.join('_');\n        }\n    });\n\n    // creates the basic structure for the venn diagram.\n    const chart = createVennDiagramStructure();\n\n    // add the data to the venn diagram.\n    enterData(chart, data, 'venn', updateSelectedData);\n\n    // change the text color.\n    changeText('venn', 'white');\n\n    // change the color for the main circles.\n    changeCirclesColor('venn', 'venn-circle', `${colors.dark_teal_heading}`)\n\n    // change the color of the intersections.\n    changeIntersectionColor('venn', 'venn-intersection', `${colors.green}`)\n\n    // change the color of the intersection with 3 sets.\n    if (innerInstersection !== '') {\n        changeInnerIntersectionColor(innerInstersection, `${colors.dark_pink_highlight}`)\n    }\n\n    // append text to the individual circles.\n    appendText(data);\n};\n\n/**\n * \n * @param {Array} data \n * @returns {Array} - returns an array of objects\n */\nconst transformData = (data) =>  data.map(el => ({id: el, name: el}));\n\n/**\n * create table for list of types\n */\nfunction makeTable(data) {\n    // an array with the columns of dataset table.\n    const tableColumns = [\n        {\n            Header: 'Name',\n            accessor: 'name',\n            center: true,\n            rowSpan: 2,\n        },\n    ];\n\n    // table data\n    const tableData = transformData(data);\n\n    return <Table columns={tableColumns} data={tableData}/>\n};\n\n\n/**\n * Main Component\n */\nconst VennDiagram = ({ tissueData, cellData, compoundData, selectOptions }) => {\n    // select data type; by default cell line\n    const [selectedType, setSelectedType] = useState('Cell Line');\n    const [selectedData, updateSelectedData] = useState();\n\n    useEffect(() => {\n        if(selectedType === 'Cell Line') {\n            createVennDiagram(cellData, updateSelectedData);\n        }\n\n        if(selectedType === 'Tissue') {\n            createVennDiagram(tissueData, updateSelectedData);\n        }\n\n        if(selectedType === 'Compound') {\n            createVennDiagram(compoundData, updateSelectedData);\n        }\n    }, [selectedType])\n\n    return (\n       <VennContainer className='venn-component'>\n            <div className='venn-select-container'>\n                <Select \n                    className='venn-select'\n                    defaultValue={{ value: selectedType, label: selectedType }}\n                    options={selectOptions} \n                    onChange={(e) => setSelectedType(e.label)}\n                />\n            </div>\n            <div id='venn'/>\n            <div className='venn-description'>\n                <span> Note: </span>\n                Numbers represent total members of intersection, \n                not excluding those in other intersections, \n                unlike a usual Venn Diagram.\n            </div>\n            {\n                selectedData ? (\n                    <SelectionTableStyle width={getMaxWidth(window.innerWidth)} className='table-container'>\n                        <div className='download-button'>\n                            <DownloadButton\n                                label='CSV'\n                                data={transformData(selectedData)}\n                                mode='csv'\n                                filename={`data`}\n                            />\n                        </div>\n                        <div className='selection-table'> {makeTable(selectedData)} </div>\n                    </SelectionTableStyle>\n                ) : <div/>\n            } \n        </VennContainer>\n    )\n};\n\n\nVennDiagram.propTypes = {\n    tissueData: PropTypes.arrayOf(\n        PropTypes.shape({\n            sets: PropTypes.arrayOf(PropTypes.string).isRequired,\n            size: PropTypes.number.isRequired,\n            label: PropTypes.string.isRequired,\n            values: PropTypes.arrayOf(PropTypes.string),\n        }).isRequired,\n    ),\n    compoundData: PropTypes.arrayOf(\n        PropTypes.shape({\n            sets: PropTypes.arrayOf(PropTypes.string).isRequired,\n            size: PropTypes.number.isRequired,\n            label: PropTypes.string.isRequired,\n            values: PropTypes.arrayOf(PropTypes.string),\n        }).isRequired,\n    ),\n    cellData: PropTypes.arrayOf(\n        PropTypes.shape({\n            sets: PropTypes.arrayOf(PropTypes.string).isRequired,\n            size: PropTypes.number.isRequired,\n            label: PropTypes.string.isRequired,\n            values: PropTypes.arrayOf(PropTypes.string),\n        }).isRequired,\n    ),\n    selectOptions: PropTypes.arrayOf(PropTypes.shape({\n        value: PropTypes.string,\n        label: PropTypes.string,\n    })).isRequired,\n};\n\nexport default VennDiagram;","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useQuery } from '@apollo/react-hooks';\nimport { getDatasetsQuery } from '../../../queries/dataset';\nimport { getTypeInformationAllDatasetsQuery } from '../../../queries/dataset';\nimport RenderUpsetPlot from './RenderUpsetPlot';\nimport createSetsWithData from './CreateSetsWithData';\nimport StyledWrapper from '../../../styles/utils';\nimport Layout from '../../UtilComponents/Layout';\nimport createAllSubsets from '../../../utils/createAllSubsets';\nimport VennDiagram from '../../Plots/VennDiagram';\nimport Loading from '../../UtilComponents/Loading';\nimport Error from '../../UtilComponents/Error';\n\n// datatype options \nconst dataTypeOptions = [\n    { value: 'cell', label: 'Cell Line' },\n    { value: 'tissue', label: 'Tissue' },\n    { value: 'compound', label: 'Compound' },\n];\n\n/**\n *\n * @param {Object} data - data for the venn diagram.\n */\nconst createVennDiagramData = (data) => {\n    // size object for the venn diagram.\n    const size = {\n        1: 16,\n        2: 4,\n        3: 2,\n    };\n\n    // data for the venn diagram.\n    const vennData = Object.values(data).map(el => {\n        return {\n            sets: el.keys,\n            label: String(el.values.length),\n            values: el.values,\n            size: size[el.keys.length],\n        }\n    });\n    return vennData;\n};\n\n/**\n *\n * @param {Array | string} datasets - array or string of datasets.\n * @returns {Array} - an array of datasets in the upper case.\n */\nconst createDatasetArray = (datasets) => (\n    typeof (datasets) === \"string\" ? datasets.split(',') : datasets\n);\n\n\n/**\n *\n * @param {Array} datasets\n * @param {Array} keys\n */\nconst createUpdatedDatasetArray = (datasets, keys) => {\n    let data = [];\n    if (typeof (datasets) === 'object' && datasets.length > 0) {\n        const regex = new RegExp(datasets.join('|'), 'i');\n        data = keys.filter(key => key.match(regex));\n    } else {\n        data = keys;\n    }\n    return data;\n};\n\n/**\n *\n * @param {boolean} loading\n * @param {boolean} datasetDataLoading\n * @param {Object} parsedCellData\n * @param {Array} updatedDatasets\n */\nconst renderComponent = (loading, datasetDataLoading, error, datasetDataError, parsedCellData, parsedCompoundData, parsedTissueData, updatedDatasets, data, isVenn = false) => {\n    if (loading || datasetDataLoading) {\n        return <Loading />\n    }\n\n    if (error || datasetDataError) {\n        return <Error />\n    }\n\n    if (isVenn) {\n        return (\n            <>\n                <h2>Overlap among datasets</h2>\n                <VennDiagram \n                    tissueData={createVennDiagramData(parsedTissueData)} \n                    compoundData={createVennDiagramData(parsedCompoundData)}\n                    cellData={createVennDiagramData(parsedCellData)}\n                    selectOptions={dataTypeOptions}\n                />\n            </>\n        )\n    } else {\n        return (\n            <>\n                <h2>Overlap among datasets</h2>\n                <RenderUpsetPlot\n                    compoundData={parsedCompoundData}\n                    tissueData={parsedTissueData}\n                    cellData={parsedCellData}\n                    datasets={updatedDatasets}\n                    selectOptions={dataTypeOptions}\n                />\n            </>\n        )\n    }\n};\n\n\n/**\n * Parses data from the cell line query for the upset plot.\n * @component\n */\nconst DatasetIntersection = ({ datasets: datasetProp = [], isIntersection = false }) => {\n\n    // array of the datasets from the prop.\n    const datasetsPropArray = createDatasetArray(datasetProp);\n\n    // cell line and dataset data from the APIs.\n    const { loading, error, data } = useQuery(getTypeInformationAllDatasetsQuery);\n\n    const { loading: datasetDataLoading, error: datasetDataError, data: datasetData } = useQuery(getDatasetsQuery);\n\n    // setting the state to grab the updated dataset array and cell line data.\n    const [updatedDatasets, setDatasets] = useState([]);\n    const [parsedCellData, setParsedCellData] = useState({});\n    const [parsedCompoundData, setParsedCompoundData] = useState({});\n    const [parsedTissueData, setParsedTissueData] = useState({});\n    const [isVenn, setIsVenn] = useState(false);\n    const [plotData, setPlotData] = useState([]);\n\n    useEffect(() => {\n        if (data && datasetData) {\n\n            // array of the datasets from the database.\n            const datasets = datasetData.datasets.map(dataset => dataset.name);\n\n            // cell data object.\n            const cells = {}, tissues = {}, compounds = {};\n            data.datatypes_information_all_datasets.forEach(el => cells[el.dataset.name] = el.cells_tested.map(cell => cell.name));\n            data.datatypes_information_all_datasets.forEach(el => tissues[el.dataset.name] = el.tissues_tested.map(tissue => tissue.name));\n            data.datatypes_information_all_datasets.forEach(el => compounds[el.dataset.name] = el.compounds_tested.map(compound => compound.name));\n\n            // update the dataset names according to the names in the database.\n            const updatedDatasetArray = createUpdatedDatasetArray(datasetsPropArray, datasets);\n\n            // all the subsets of the dataset array and upset plot data for cell lines.\n            const datasetSubSets = createAllSubsets(updatedDatasetArray);\n\n            // dataset subsets with cell data, tissue data and compound data.\n            const subSetCells = createSetsWithData(cells, datasetSubSets);\n            const subSetTissues = createSetsWithData(tissues, datasetSubSets);\n            const subSetCompounds = createSetsWithData(compounds, datasetSubSets);\n\n            // update the state to include a dataset list and\n            setDatasets(updatedDatasetArray);\n            setParsedCellData(subSetCells);\n            setParsedCompoundData(subSetCompounds);\n            setParsedTissueData(subSetTissues);\n            setPlotData(data.datasets_types);\n\n            // set the state of isVenn to true if the dataset prop length is 3 or less than 3.\n            if (datasetsPropArray.length <= 3) {\n                setIsVenn(true);\n            }\n        }\n    }, [data, datasetData])\n\n    return (\n        isIntersection\n            ? (\n                <Layout page=\"dataset_intersection\">\n                    <StyledWrapper>\n                        {\n                            renderComponent(loading, datasetDataLoading, error, datasetDataError, parsedCellData, parsedCompoundData, parsedTissueData, updatedDatasets, plotData, isVenn)\n                        }\n                    </StyledWrapper>\n                </Layout>\n            )\n            : (\n                <>\n                    {\n                        renderComponent(loading, datasetDataLoading, error, datasetDataError, parsedCellData, parsedCompoundData, parsedTissueData, updatedDatasets, plotData)\n                    }\n                </>\n            )\n    )\n};\n\n\nDatasetIntersection.propTypes = {\n    datasets: PropTypes.string,\n    isIntersection: PropTypes.bool,\n}\n\nexport default DatasetIntersection;","import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport Table from '../../UtilComponents/Table/Table';\nimport { Link } from 'react-router-dom';\nimport Layout from '../../UtilComponents/Layout';\nimport { getDatasetsQuery } from '../../../queries/dataset';\nimport Error from '../../UtilComponents/Error';\nimport StyledWrapper from '../../../styles/utils';\nimport Loading from '../../UtilComponents/Loading';\nimport DatasetIntersection from '../../IntersectionComponents/DatasetIntersection/DatasetIntersection';\n\n// an array with the columns of dataset table.\nconst table_columns = [\n  {\n    Header: 'Name',\n    accessor: 'name',\n    center: true,\n    rowSpan: 2,\n    Cell: (row) => (<Link to={`/datasets/${row.row.original.id}`}>{row.value}</Link>),\n  },\n];\n\n/**\n *\n * @param {boolean} loading\n * @param {Error} error - takes the error as a param that is returned by the useQuery in case there is one.\n * @param {Array} columns\n * @param {Array} data\n */\nconst renderComponent = (loading, error, columns, data) => {\n  if (loading) {\n    return <Loading />;\n  }\n  if (error) {\n    return <Error />;\n  }\n  return (\n    <>\n      <DatasetIntersection />\n      <h2 style={{marginTop: '50px'}}> List of Datasets </h2>\n      <Table columns={columns} data={data} center={true} />\n    </>\n  );\n};\n\n/**\n * Parent component for the datasets page.\n *\n * @component\n * @example\n *\n * returns (\n *   <Datasets/>\n * )\n */\nconst Datasets = () => {\n  const { loading, error, data } = useQuery(getDatasetsQuery);\n  const columns = React.useMemo(() => table_columns, []);\n  const dataset_data = React.useMemo(() => (data ? data.datasets : []), [data]);\n  return (\n    <Layout page=\"datasets\">\n      <StyledWrapper>\n        {\n          renderComponent(loading, error, columns, dataset_data)\n        }\n      </StyledWrapper>\n    </Layout>\n  );\n};\n\nexport default Datasets;\n","import styled from 'styled-components';\nimport colors from './colors';\n\nconst StyledDocPage = styled.div`\n  .heading {\n    width: 100%;\n    margin-top: 10px;\n    margin-bottom: 30px;\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    color: ${colors.dark_teal_heading};\n\n    .title {\n      color: ${colors.dark_pink_highlight};\n      font-size: clamp(32px, calc(2vw + 10px), 44px);\n      font-weight: bold;\n      margin-left: 20%;\n      white-space: normal;\n      line-height: 40px;\n    }\n  };\n\n  .wrapper {\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n  }\n\n  .container {\n    width: 75%;\n    margin-top: 10px;\n    margin-left: 25px;\n    color: ${colors.dark_gray_text};\n    font-size: calc(1vw + 9px);\n    \n    display:flex;\n    align-items: flex-start;\n    flex-direction: column;\n    .heading {\n      width: 100%;\n      margin-top: 10px;\n      margin-bottom: 30px;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      color: ${colors.dark_teal_heading};\n\n      .title {\n        color: ${colors.dark_pink_highlight};\n        font-size: clamp(32px, calc(2vw + 10px), 44px);\n        font-weight: bold;\n        margin-left: 20%;\n        margin-top: 20px;\n        margin-bottom: 20px;\n        white-space: normal;\n        line-height: 40px;\n      }\n    };\n    .section{\n      width: 100%;\n      margin-bottom: 50px;\n      text-align: justify;\n      p {\n        font-size: clamp(14px, calc(1vw + 2px), 18px);\n      }\n      .text {\n        font-size: clamp(12px, calc(1vw + 1px), 16px);\n      }\n      .documentation{\n        p{\n          margin-bottom: 20px;\n        }\n        .center{\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          width: 100%;\n          resize-mode: 'contain';\n          margin-bottom: 10px;\n          .small {\n            width: 90%;\n            max-width: 750px;\n            height: auto;\n            margin-top: 0px;\n            margin-bottom: 25px;\n            resize-mode: 'contain';\n          }\n          .smaller {\n            width: 60%;\n            max-width: 600px;\n            height: auto;\n            margin-top: 0px;\n            margin-bottom: 25px;\n            resize-mode: 'contain';\n          }\n          .bar {\n            width: 100%;\n            max-width: 800px;\n            height: auto;\n            margin-top: 0px;\n            margin-bottom: 25px;\n            resize-mode: 'contain';\n          }\n          img {\n            width: 100%;\n            max-width: 900px;\n            height: auto;\n            margin-top: 0px;\n            margin-bottom: 25px;\n            resize-mode: 'contain';\n          }\n        }\n        h2 {\n          text-align: center;\n          font-family: Raleway, sans-serif;\n          font-weight: normal;\n          font-size: clamp(28px, calc(1vw + 2px), 36px);\n        }\n        h6 {\n          text-align: left;\n          margin-top: 0px;\n          margin-bottom: 10px;\n          color: ${colors.dark_teal_heading};\n          font-size: clamp(12px, calc(1vw + 2px), 15px);;\n        }\n        h7 {\n          text-align: left;\n          font-family: Raleway, sans-serif;\n          font-weight: bold;\n          color: ${colors.dark_teal_heading};\n          line-height: 46px;\n          margin-bottom: 10px;\n          font-size: clamp(18px, calc(1vw + 2px), 28px);\n        }\n      }\n    }\n  }\n\n  // full size container when too small\n  @media only screen and (max-width: 765px) {\n    .heading {\n      .title {\n        margin-left: 0px;\n      }\n    }\n    .container {\n      margin-left: 0px;\n    }\n    .wrapper {\n      flex-direction: column;\n    }\n    .content {\n      width: 100% !important;\n    }\n  }\n`;\n\n/**\n * Used to reduce text size for a long individual page title.\n * Used in IndivCompounds.js to accommodate long compound names.\n */\nconst StyledDocPageTitle = styled.span`\n  color: ${colors.dark_pink_highlight};\n  font-size: ${props => props.smalltxt ? `clamp(14px, calc(1vw + 10px), 20px)` : 'clamp(32px, calc(2vw + 10px), 44px)'};\n  font-weight: bold;\n  margin-left: 20%;\n  margin-right: 10px;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  white-space: normal;\n  line-height: 40px;\n  @media only screen and (max-width: 765px) {\n    margin-left: 0px;\n  }\n`;\n\nconst StyledDocSidebar = styled.div`\n  width: calc(5vw + 4em);\n  margin-top: 5vh;\n  padding: 5px 0px;\n  position:fixed;\n  .link {\n    display:block;\n    color: ${colors.dark_teal_heading};\n    border-left: 5px solid ${colors.light_blue_header};\n    font-size: calc(0.5vw + 0.7em);\n    font-family: 'Overpass', sans-serif;\n    text-align: right;\n    padding:20px 20px 20px 0px;\n    transition: all 0.25s ease-out 0s;\n    cursor: pointer;\n  }\n  .link:hover {\n    color: ${colors.dark_pink_highlight};\n    border-left: 5px solid ${colors.dark_pink_highlight};\n    transition: all 0.25s ease-out 0s;\n  }\n  .selected {\n    color: ${colors.dark_pink_highlight};\n    border-left: 5px solid ${colors.dark_pink_highlight};\n  }\n  // hide sidebar when too small\n  @media only screen and (max-width: 765px) {\n    display:none;\n  }\n`;\n\nconst StyledDocSidebarList = styled.ul`\n  width:18%;\n  padding: 5px 0px;\n\n  list-style-type: none;\n  li {\n    button {\n      width: 100%;\n      background-color: transparent;\n      border: none;\n      outline: none;\n      cursor: pointer;\n      text-align: left;\n      padding-top: 15px;\n      padding-bottom: 15px;\n      padding-left: 15px;\n      color: ${colors.dark_teal_heading};\n      font-size: clamp(12px, calc(1vw + 2px), 16px);\n      font-family: Raleway, sans-serif;\n      // letter-spacing: 1px;\n    }\n    button:hover {\n      color: ${colors.dark_pink_highlight};\n    }\n  }\n\n  .selected {\n    button {\n      color: ${colors.dark_pink_highlight};\n      border-left: 3px solid ${colors.dark_pink_highlight};\n    }\n  }\n\n  // hide sidebar when too small\n  @media only screen and (max-width: 765px) {\n    width: 100%;\n    li {\n      display: inline-block;\n      button {\n        padding-top: 5px;\n        padding-bottom: 5px;\n        padding-left: 10px;\n      }\n    }\n    .selected {\n      button {\n        border: none;\n      }\n    }\n}\n`;\n\nexport {\n  StyledDocPage,\n  StyledDocPageTitle,\n  StyledDocSidebar,\n  StyledDocSidebarList\n};\n","import React, {useState} from 'react';\nimport  styled , { createGlobalStyle }from 'styled-components';\nimport logo from '../../../../images/DocumentationImages/pharmacodb-logo-capsule.png';\n\nconst OverviewStyles = styled.div`\n    .documentation {\n      width: 90%;\n      min-height: 900px;\n        background: linear-gradient(\n            to right top,\n            rgba(255, 255, 255, 0.5),\n            rgba(255, 255, 255, 0.5)\n            ),url(${logo});\n        background-size: auto;\n        background-position: center;\n        background-repeat: no-repeat;\n    }\n`;\n\n\n/**\n * Shows the Overview of the documentation page.\n *\n * @component\n * @example\n *\n * return (\n *   <DocOverview/>\n * )\n */\nconst DocOverview = () => {\n    return(\n        <OverviewStyles>\n            <div className='documentation'>\n            <h2>Welcome to PharmacoDB!</h2><br/>\n            <p>This web-application is a valuable tool in maximizing the usefulness of pharmacogenomics datasets for comparing and assessing drug response phenotypes of cancer models.</p>\n            <p>PharmacoDB integrates multiple cancer pharmacogenomics datasets profiling approved and investigational drugs across cell lines from diverse tissue types. The web-application enables users to efficiently navigate across datasets, view and compare drug dose-response data for a specific drug-cell line pair.</p>\n            </div>\n        </OverviewStyles>\n    );\n}\nexport default DocOverview;\n","import React from 'react';\nimport cellSearch from '../../../../images/DocumentationImages/cellSearch.png';\nimport intersectionSearch from '../../../../images/DocumentationImages/datasetsIntersection.png';\nimport cellDrugSearch from '../../../../images/DocumentationImages/cellDrugSearch.png';\nimport drugTissueSearch from '../../../../images/DocumentationImages/drugTissueSearch.png';\nimport homeNav from '../../../../images/DocumentationImages/homeNav.png';\n\n/**\n * Shows the Search description of the documentation page.\n *\n * @component\n * @example\n *\n * return (\n *   <DocSearch/>\n * )\n */\nconst DocSearch = () => {\n    return(\n        <div className='documentation'>\n            <p>The main way to interact with PharmacoDB is through its Search interface. The search bar, found on the homepage of the website, allows the user to query all the data contained in the database, and functions as the main navigation tool around the web app.</p>\n            <p>The search bar takes several distinct types of queries. The simplest is to query for a single specific entity in the database. One can use the search to query for a specific cell line (e.g. MCF-7), compound (e.g. 17-AAG), tissue (e.g. breast) or dataset (e.g. CTRPv2). This query would then take you to the corresponding page for that instance. It is feasible to search for the synonyms of a compound name or cell line names as long as they are included in one of the PharmacoDB datasets.</p>\n            <p>The search bar also allows the user to specify a data type (e.g. cell line, compound, dataset), where it would take the user to a page listing all instances of that data type in the database.</p>\n            {/*<img width=\"650px\" alt=\"Searching cell line data\" src={logo} title=\"Searching cell\"/>*/}\n            <p>Queries consisting of the names of multiple datasets, with a space between dataset names, are also allowed. This query will link the user to a page describing the intersection between the datasets, with tables listing the common cell lines, compounds and tissue types.</p>\n            <div className=\"center\"><img className=\"bar\" src={intersectionSearch}/></div>\n            <p>Queries consisting of combinations of the name of a compound with cell line or tissue, delimited by a space, will direct to a page plotting all the available compound dose response curves for that combination across all datasets in PharmacoDB.</p>\n            <h6>cell line vs. compound/ compound vs. cell line</h6>\n            <div className=\"center\"><img className=\"bar\" src={cellDrugSearch}/></div>\n            <h6>compound vs. tissue/ tissue vs. compound</h6>\n            <div className=\"center\"><img className=\"bar\" src={drugTissueSearch}/></div>\n            <p>Another main way of interacting with PharmacoDB is by clicking on the data types provided at the bottom of the homepage. Data types are also accessible through the Data drop down menu on the top right side of the homepage.</p>\n            <div className=\"center\"><img className=\"bar\" src={homeNav}/></div>\n        </div>\n    );\n}\nexport default DocSearch;\n","import React from 'react';\nimport datasetSearch from '../../../../images/DocumentationImages/datasetSearch.png';\nimport homeDataset from '../../../../images/DocumentationImages/homeDatasets.png';\nimport upsetPlot from '../../../../images/DocumentationImages/datasetUpsetPlot.png';\nimport datasetList from '../../../../images/DocumentationImages/datasetList.png';\nimport individualDataset from '../../../../images/DocumentationImages/datasetInd.png';\nimport datasetResource from '../../../../images/DocumentationImages/datasetResource.png';\nimport dataTypes from '../../../../images/DocumentationImages/datasetDType.png';\nimport datasetBarPlotA from '../../../../images/DocumentationImages/datasetIndBarA.png';\nimport datasetBarPlotB from '../../../../images/DocumentationImages/datasetIndBarB.png';\nimport datasetCellList from '../../../../images/DocumentationImages/DatasetCellList.png';\nimport datasetDrugList from '../../../../images/DocumentationImages/DatasetDrugList.png';\n\n/**\n * Shows the Dataset description of the documentation page.\n *\n * @component\n * @example\n *\n * return (\n *   <DocDataset/>\n * )\n */\nconst DocDataset = () => {\n    return(\n        <div className='documentation'>\n            <p>Each study included in PharmacoDB has a dataset page associated with it. These pages can be accessed by searching for a study through the search bar, or from the datasets page accessible through clicking on the datasets link at the bottom of the homepage or from the Data drop down menu on the top right side of the homepage.</p>\n            <div className=\"center\"><img className=\"bar\" src={datasetSearch}/></div>\n            <div className=\"center\"><p>Or</p></div>\n            <div className=\"center\"><img className=\"bar\" src={homeDataset}/></div>\n            <p>Datasets link on the front page directs you to a page starting with a bar graph showing the number of cell lines per dataset as well as the number of common cell lines between any given datasets. Using the selector you can choose to view this information for tissues or compounds across datasets.</p>\n            <div className=\"center\"><img src={upsetPlot}/></div>\n            <p>Datasets page concludes with a table listing all the available datasets in PharmacoDB. Clicking on each dataset name takes you to the webpage corresponding to that dataset.</p>\n            <div className=\"center\"><img src={datasetList}/></div>\n            <p>Each dataset page has a sidebar including Dataset Information, Resources, Data types, Bar Plots, Cell Lines Summary, and Compounds Summary.</p>\n            <h7>Dataset Information</h7>\n            <p>Dataset Information page displays information about the study which collected the pharmacological data, the publications associated with the dataset, the name of the PharmacoSet object from the PharmacoGX R package associated with the data, and the link to the dataset on ORCESTRA.</p>\n            <h6>Example: CCLE dataset</h6>\n            <div className=\"center\"><img src={individualDataset}/></div>\n            <h7>Resources</h7>\n            <p>Resources page includes links to resources which provide access to the original data.</p>\n            <div className=\"center\"><img src={datasetResource}/></div>\n            <h7>Data Types</h7>\n            <p>Data types page includes a table of all the available pharmacological and molecular data in the dataset, with annotations about the assays used to collect them.</p>\n            <div className=\"center\"><img className=\"small\" src={dataTypes}/></div>\n            <h7>Bar Plots</h7>\n            <p>Bar Plots page includes plots comparing the number of cell lines, tissues, compounds and experiments in the chosen dataset to others in PharmacoDB. The dataset being displayed is highlighted in Red.</p>\n            <div className=\"center\"><img className=\"small\" src={datasetBarPlotA}/></div>\n            <div className=\"center\"><img className=\"small\" src={datasetBarPlotB}/></div>\n            <h7>Cell Lines Summary</h7>\n            <p>Cell Lines Summary page represents a table including a list of all the cell lines that were tested in this dataset. Each entry in the table links to the cell line page for that entry. They are also searchable using the search bar at the top of the table..</p>\n            <div className=\"center\"><img className=\"small\" src={datasetCellList}/></div>\n            <h7>Compounds Summary</h7>\n            <p>Compounds Summary page represents a table including a list of all the compounds that were tested in this dataset. Clicking on each entry in the table directs you to the compound page for that entry. Similarly, the compounds are also searchable using the search bar at the top of the table.</p>\n            <div className=\"center\"><img className=\"small\" src={datasetDrugList}/></div>\n        </div>\n    );\n}\nexport default DocDataset;\n","import React from 'react';\nimport tissueSearch from '../../../../images/DocumentationImages/tissueSearch.png';\nimport homeTissue from '../../../../images/DocumentationImages/homeTissues.png';\nimport pieChart from '../../../../images/DocumentationImages/pieChart.png';\nimport tissueList from '../../../../images/DocumentationImages/tissueList.png';\nimport tissueAnnotation from '../../../../images/DocumentationImages/bone_annot.png';\nimport tissueBar from '../../../../images/DocumentationImages/tissueIndBar.png';\nimport tissueCellList from '../../../../images/DocumentationImages/tissueCellList.png';\nimport tissueDrugList from '../../../../images/DocumentationImages/tissueDrugSummary.png';\n\n/**\n * Shows the Tissue description of the documentation page.\n *\n * @component\n * @example\n *\n * return (\n *   <DocTissue/>\n * )\n */\nconst DocTissue = () => {\n    return(\n        <div className='documentation'>\n            <p>Each tissue type included in PharmacoDB has a webpage associated with it. These pages can be accessed by searching for a tissue through the search bar, or by clicking on the tissues link at the bottom of the homepage or from the Data drop down menu on the top right side of the homepage.</p>\n            <div className=\"center\"><img className=\"bar\" src={tissueSearch}/></div>\n            <div className=\"center\"><p>Or</p></div>\n            <div className=\"center\"><img className=\"bar\" src={homeTissue}/></div>\n            <p>Tissues link takes you to a page starting with a pie chart representing the relative percentage of cell lines per tissue in PharmacoDB. Hovering over each color on the pie chart shows the name of the tissue associated with that color.</p>\n            <div className=\"center\"><img src={pieChart}/></div>\n            <p>The page also includes a table that lists the names of all the tissues included in PharmacoDB. Clicking on each tissue name takes you to the webpage associated with that tissue.</p>\n            <div className=\"center\"><img src={tissueList}/></div>\n            <p>Each tissue page has a sidebar including Annotations, Bar Plot, Cell Lines Summary, and Compounds Summary.</p>\n            <h7>Annotations</h7>\n            <p>Annotations page displays information about the datasets which performed experiments on the query tissue type, with synonyms for that tissue within each dataset. For demonstration, the tissue “Bone” is selected here.</p>\n            <div className=\"center\"><img className=\"small\" src={tissueAnnotation}/></div>\n            <h7>Bar Plots</h7>\n            <p>Bar Plots page includes plots comparing the number of cell lines and compounds tested on cell lines of the tissue type in each PharmacoDB dataset.</p>\n            <div className=\"center\"><img className=\"small\" src={tissueBar}/></div>\n            <h7>Cell Lines Summary</h7>\n            <p>Cell Lines Summary page includes a table of cell lines of the tissue type included in PharmacoDB. Clicking on each cell line name takes you to a page corresponding to that cell line. You can also use the search bar above the table to search for the cell line of interest.</p>\n            <div className=\"center\"><img className=\"small\" src={tissueCellList}/></div>\n            <h7>Compounds Summary</h7>\n            <p>Compounds Summary page includes a table of compounds tested on the tissue type, with the studies in which the compound - tissue combination can be found and the total number of experiments across all datasets. Clicking on each compound name or dataset name will take you to the corresponding page to that instance.</p>\n            <div className=\"center\"><img className=\"small\" src={tissueDrugList}/><br/></div>\n        </div>\n    );\n}\nexport default DocTissue;\n","import React from 'react';\nimport cellSearch from '../../../../images/DocumentationImages/cellSearch.png';\nimport homeCell from '../../../../images/DocumentationImages/homeCellLines.png';\nimport pieChart from '../../../../images/DocumentationImages/pieChart.png';\nimport cellSummaryList from '../../../../images/DocumentationImages/cellSummaryList.png';\nimport cellIndBar from '../../../../images/DocumentationImages/cellIndBar.png';\nimport cellInd from '../../../../images/DocumentationImages/cellline_hela_summary.png';\nimport cellAAC from '../../../../images/DocumentationImages/cellline_hela_aac.png';\n// import cellDrugList from '../../../../images/DocumentationImages/cellline_hela_compsummary.png';\nimport cellMolProf from '../../../../images/DocumentationImages/cellline_hela_molprof.png';\n\n/**\n * Shows the Cell line description of the documentation page.\n *\n * @component\n * @example\n *\n * return (\n *   <DocCell/>\n * )\n */\nconst DocCell = () => (\n  <div className=\"documentation\">\n    <p>Each cell line included in PharmacoDB has a cell line page associated with it. These pages can be accessed by searching for a cell line through the search bar, by clicking on the cell lines link at the bottom of the homepage or from the Data drop down menu on the top right side of the homepage.</p>\n    <div className=\"center\"><img className=\"bar\" src={cellSearch} alt=\"cell-search\" /></div>\n    <div className=\"center\"><p>Or</p></div>\n    <div className=\"center\"><img className=\"bar\" src={homeCell} alt=\"home-cell\" /></div>\n    <p>Cell lines link directs you to a page starting with a pie chart representing the relative percentage of cell lines per tissue in PharmacoDB. Hovering over each color on the pie chart shows the name of the tissue associated with that color.</p>\n    <div className=\"center\"><img src={pieChart} alt=\"pie-chart\" /></div>\n    <p>The page also includes a table that lists the names of all the cell lines included in PharmacoDB. Clicking on each cell line name takes you to the webpage associated with that cell line. Cell lines can also be searched using the search bar above the table.</p>\n    <div className=\"center\"><img src={cellSummaryList} alt=\"cell-summary\" /></div>\n    <p>Each cell line page has a sidebar including Annotations, Bar Plot, AAC (Compounds), Compounds Summary, and Molecular Profiling.</p>\n    <h7>Annotations</h7>\n    <p>Annotations page displays information about the synonyms in each dataset that used the cell line of the query, the diseases it was used to model, and its cellosaurus name. Clicking on a dataset name, disease name or cellosaurus link will direct you to the corresponding page for that instance.</p>\n    <div className=\"center\"><img className=\"small\" src={cellInd} alt=\"cell-line\" /></div>\n    <h7>Bar Plot</h7>\n    <p>Bar Plot page shows a plot comparing the total number of compounds tested on the cell line in each PharmacoDB dataset. Hovering over each bar shows the exact number of compounds.</p>\n    <div className=\"center\"><img className=\"small\" src={cellIndBar} alt=\"cell-line-barplot\" /></div>\n    <h7>AAC (Compounds)</h7>\n    <p>AAC (Compounds) page shows a waterfall plot displaying the most and least sensitive compounds tested with the cell line. There is a profile selector to show the AAC or IC50 values, and a dataset selector to show only the experiments in the desired dataset. Hovering over each bar shows the name of the compound, and the AAC/IC50 of the experiment. Also, it is possible to zoom out (using the zoom switch) to view more compounds.</p>\n    <div className=\"center\"><img className=\"small\" src={cellAAC} alt=\"waterfall-plot\" /></div>\n    <h7>Compounds Summary</h7>\n    <p>Compounds Summary page has a table of all the compounds tested on the cell line in each dataset, with the list of datasets where this combination was tested and the total number of experiments across all studies. Clicking on a compound name or dataset name will take you to the corresponding page.</p>\n    <div className=\"center\"><img className=\"small\" src={cellSummaryList} alt=\"cell-summary-table\" /></div>\n    <h7>Molecular Profiling</h7>\n    <p>Molecular Profiling page shows a table summarizing the available molecular profiling in PharmacoGx for the cell line.</p>\n    <div className=\"center\"><img className=\"small\" src={cellMolProf} alt=\"molecular-profiling\" /></div>\n  </div>\n);\nexport default DocCell;\n","import React from 'react';\nimport homeExperiment from '../../../../images/DocumentationImages/homeExperiments.png';\nimport experimentBarsPlot from '../../../../images/DocumentationImages/experimentsBars.png';\n\n/**\n * Shows the Experiment description of the documentation page.\n *\n * @component\n * @example\n *\n * return (\n *   <DocExperiment/>\n * )\n */\nconst DocExperiment = () => {\n    return(\n        <div className='documentation'>\n            <p>Experiments webpage is accessible from the experiments link at the bottom of the homepage or from the Data drop down menu on the top right side of the homepage.</p>\n            <div className=\"center\"><img className=\"bar\" src={homeExperiment}/></div>\n            <p>The webpage provides bar plots displaying the average number of experiments per cell line or compound in each PharmacoDB dataset.</p>\n            <div className=\"center\"><img className=\"small\" src={experimentBarsPlot}/></div>\n        </div>\n    );\n}\nexport default DocExperiment;\n","import React from 'react';\nimport homeGene from '../../../../images/DocumentationImages/homeGenes.png';\nimport geneSummaryBar from '../../../../images/DocumentationImages/genes_targets.png';\nimport geneSummaryPlot from '../../../../images/DocumentationImages/geneSummaryPlot.png';\nimport geneSummaryList from '../../../../images/DocumentationImages/geneSummaryList.png'\n\n/**\n * Shows the Gene description of the documentation page.\n *\n * @component\n * @example\n *\n * return (\n *   <DocGene/>\n * )\n */\nconst DocGene = () => {\n    return(\n        <div className='documentation'>\n            <p>Genes webpage is accessible from the experiments link at the bottom of the homepage or from the Data drop down menu on the top right side of the homepage.</p>\n            <div className=\"center\"><img className=\"bar\" src={homeGene}/></div>\n            <p>Genes webpage starts with a bar plot displaying the frequency of unique gene targets per compound. Hovering over each bar shows the exact frequency.</p>\n            <div className=\"center\"><img src={geneSummaryBar}/></div>\n            <p>The webpage concludes with a table listing the names and symbols of all the genes reported in any of the PharmacoDB datasets. The genes can be accessed either by clicking on their names, or by searching through the search bar above the table.</p>\n            <div className=\"center\"><img src={geneSummaryList}/></div>\n        </div>\n    );\n}\nexport default DocGene;\n","import React from 'react';\nimport homeCompound from '../../../../images/DocumentationImages/homeCompounds.png';\nimport drugSummaryBar from '../../../../images/DocumentationImages/drugSummaryBar.png';\nimport drugIndBar from '../../../../images/DocumentationImages/drugIndivBar.png';\nimport drugAACCell from '../../../../images/DocumentationImages/pacli_aac_celllines.png';\nimport drugAACTissue from '../../../../images/DocumentationImages/drugAACTissue.png';\nimport drugIndCellList from '../../../../images/DocumentationImages/drugIndCells.png';\nimport drugIndTissues from '../../../../images/DocumentationImages/drugIndTissues.png';\nimport drugSearch from '../../../../images/DocumentationImages/drugSearch.png';\nimport pacliSynonym from '../../../../images/DocumentationImages/pacli_synonym.png';\nimport pacliTarget from '../../../../images/DocumentationImages/pacli_target.png';\n\n/**\n * Shows the Compound description of the documentation page.\n *\n * @component\n * @example\n *\n * return (\n *   <DocDrug/>\n * )\n */\nconst DocDrug = () => {\n    return(\n        <div className='documentation'>\n            <p>Each compound included in PharmacoDB has a webpage page associated with it. These pages can be accessed by searching for a compound through the search bar, or by clicking on the compounds link at the bottom of the homepage or from the Data drop down menu on the top right side of the homepage.</p>\n            <div className=\"center\"><img className=\"bar\" src={drugSearch}/></div>\n            <div className=\"center\"><p>Or</p></div>\n            <div className=\"center\"><img className=\"bar\" src={homeCompound}/></div>\n            <p>Compounds link directs you to a page starting with a bar plot showing the number of compounds tested in each dataset included in PharmacoDB. Hovering over each bar shows the exact number of compounds.</p>\n            <div className=\"center\"><img src={drugSummaryBar}/></div>\n            <p>The page also contains a table showing the name, SMILES, InChIKeys, PubChem name, ChEMBL, and FDA status of all the compounds included in the PharmacoDB. Clicking on each compound name will take you to the corresponding compound page.</p>\n            {/*<img width=\"600px\" alt=\"compound summary page- list of compounds\" src={doseImg} title=\"Compounds\"/>*/}\n            <p>Each compound page has a sidebar including Synonyms and IDS, Annotated Targets, Bar Plots, AAC (Cell Lines), AAC (Tissues), Cell Line Summary, Tissue Summary, and Molecular Features.</p>\n            <h7>Annotations</h7>\n            <p>Annotations page displays information about the datasets which performed experiments with the compound of query as well as the name each gave to it. External identifiers such as SMILES, InChiKey and PubChem ID are also available on this page. Clicking on PubChem ID will direct you to the corresponding page on PubChem.</p>\n            <div className=\"center\"><img className=\"small\" src={pacliSynonym}/></div>\n            <h7>Annotated Targets</h7>\n            <p>Annotated Targets page shows a table which includes the name of compound targets, genes associated with the targets, and Ensembl IDs of the genes.</p>\n            <div className=\"center\"><img className=\"small\" src={pacliTarget}/></div>\n            <h7>Bar Plots</h7>\n            <p>Bar Plots page shows bar plots comparing the number of cells and tissues tested on with that compound in each PharmacoDB dataset. Hovering over each bar shows the exact number of cells/tissues for that dataset.</p>\n            <div className=\"center\"><img className=\"small\" src={drugIndBar}/></div>\n            <h7>AAC (Cell Lines)</h7>\n            <p>AAC (Cell Lines) page shows a waterfall plot displaying the most and least sensitive cell lines tested with the compound. There is a profile selector to show the AAC or IC50 values, and a dataset selector to show only the experiments in the desired dataset. Hovering over each bar shows the name of the cell line, and the AAC/IC50 of the experiment.</p>\n            <div className=\"center\"><img className=\"small\" src={drugAACCell}/></div>\n            <h7>AAC (Tissues)</h7>\n            <p>AAC (Tissues) page shows a box plot displaying the sensitivity range of the tissues tested with the compound across all datasets. Each dot represents a cell line and similarly there is a profile selector to show the AAC/IC50 values, and a dataset selector to show only the experiments in the desired dataset. Hovering over each box shows the tissue name, minimum, maximum, sample median, and the first and third quartiles of the AAC/IC50 of the experiment for that tissue.</p>\n            <div className=\"center\"><img className=\"small\" src={drugAACTissue}/></div>\n            <h7>Cell Lines Summary</h7>\n            <p>Cell Lines Summary page includes a table of cells and tissues on which that compound has been tested, with the studies in which the cell - compound combination can be found and the total number of experiments across all datasets. Clicking on each cell line, tissue or dataset name will take you to the corresponding page.</p>\n            <div className=\"center\"><img className=\"small\" src={drugIndCellList}/></div>\n            <h7>Tissues Summary</h7>\n            <p>Tissues Summary page includes a table of tissue on which that compound has been tested, with the studies in which the compound - tissue combination can be found and the total number of experiments across all cell lines of the tissue type in all datasets. Similarly, clicking on tissue,  dataset names, and experiment numbers will take you to the corresponding page.</p>\n            <div className=\"center\"><img className=\"small\" src={drugIndTissues}/></div>\n            <h7>Molecular Features</h7>\n            <p>Molecular Features page shows a table summarizing the top molecular features associated with the compound.</p>\n            {/*<img width=\"600px\" alt=\"compound indiv page- Molecular feature table\" src={doseImg} title=\"Molecular feature\"/>*/}\n        </div>\n    );\n}\nexport default DocDrug;\n","import React from 'react';\nimport cellDrug from '../../../../images/DocumentationImages/mcf-7PacliSearch.png';\nimport cellDrugPlot from '../../../../images/DocumentationImages/mcf_pacli_plot.png';\nimport cellDrugTable from '../../../../images/DocumentationImages/mcf7_pacli_table.png';\n\n/**\n * Shows the Cell line Vs Compound description of the documentation page.\n *\n * @component\n * @example\n *\n * return (\n *   <DocCellVsDrug/>\n * )\n */\nconst DocCellVsDrug = () => {\n    return(\n        <div className='documentation'>\n            <p>Each cell line-compound combination included in PharmacoDB has a webpage associated with it. This page can be accessed by typing the names of the cell line and compound into the search bar, separated by a space. The order of cell line and compound names do not matter.</p>\n            <div className=\"center\"><img className=\"bar\" src={cellDrug}/></div>\n            <p>The page starts with a plot recording the doses at which the compound of query tested on the cell line of query in each dataset, along with the cell viability values that were observed at those doses. Each replicate from each dataset of the experiment is plotted separately. Hovering over each point on the plot shows the name of the associated dataset as well as the dose and viability response measures of the experiment.</p>\n            <div className=\"center\"><img src={cellDrugPlot}/></div>\n            <p>The page concludes with a table summarising measurements such as AAC, IC50, EC50 and Einf where available. Clicking on each dataset name or value directs you to the corresponding page.</p>\n            <div className=\"center\"><img className=\"small\" src={cellDrugTable}/></div>\n        </div>\n    );\n}\nexport default DocCellVsDrug;\n","import React from 'react';\nimport tissueDrug from '../../../../images/DocumentationImages/tissuebreast_drugpacli.png';\nimport tissueDrugPlot from '../../../../images/DocumentationImages/breast_pacli_plot 3.16.23 PM.png';\nimport tissueDrugTable from '../../../../images/DocumentationImages/breast_pacli_table.png';\n/**\n * Shows the Tissue vs. Drug description of the documentation page.\n *\n * @component\n * @example\n *\n * return (\n *   <DocTissueVsDrug/>\n * )\n */\nconst DocTissueVsDrug = () => {\n    return(\n        <div className='documentation'>\n            <p>Each tissue-compound combination included in PharmacoDB has a webpage associated with it. This page can be accessed by typing the names of the tissue and compound into the search bar, separated by a space. The order of tissue and compound names do not matter.</p>\n            <div className=\"center\"><img className=\"bar\" src={tissueDrug}/></div>\n            <p>The page starts with a plot recording the doses of the compound of query tested on the tissue of query in each dataset, along with the cell viability values that were observed at those doses. The curves can be filtered by datasets and highlighted by cell lines using the selection squares on the right side of the plot. Clicking on each curve highlights all the curves associated with the cell line pertaining to that curve.</p>\n            <div className=\"center\"><img src={tissueDrugPlot}/></div>\n            <p>The page concludes with a table reporting the cell line names, datasets including each cell line, and statistics such as AAC, IC50, EC50 and Einf. Clicking on each name or value in the table directs you to the corresponding page.</p>\n            <div className=\"center\"><img className=\"small\" src={tissueDrugTable}/></div>\n        </div>\n    );\n}\nexport default DocTissueVsDrug;\n","import React, {useState} from 'react';\nimport geneCompoundSearch from '../../../../images/DocumentationImages/geneCompoundSearch.png';\nimport geneCompounTissueSearch from '../../../../images/DocumentationImages/geneCompoundTissueSearch.png';\nimport biomarkerComp from '../../../../images/DocumentationImages/biomarker_comp.png';\nimport biomarkerForest from '../../../../images/DocumentationImages/biomarker_forest.png';\nimport biomarkerGene from '../../../../images/DocumentationImages/biomarker_gene.png';\nimport biomarkerManhattan from '../../../../images/DocumentationImages/biomarker_manhattan.png';\n\n/**\n * Shows the Biomarker description of the documentation page.\n *\n * @component\n * @example\n *\n * return (\n *   <DocBiomarker/>\n * )\n */\nconst DocBiomarker = () => {\n    return(\n        <div className='documentation'>\n            <p>Biomarker query is feasible through searching for a combination of a compound, gene and tissue from the search bar. Through this query you can view the association of a marker (gene) of interest with the compound pan cancer as well as in a specific tissue. If the tissue is not specified the query will be pan-cancer.</p>\n            <div className=\"center\"><img className=\"bar\" src={geneCompoundSearch}/></div>\n            <div className=\"center\"><img className=\"bar\" src={geneCompounTissueSearch}/></div>\n            <p>Biomarker query directs you to the corresponding page with a sidebar including Forest Plot, Manhattan Plot, Gene Information, and Compound Information.</p>\n            <p>Forest plot page includes a forest plot indicating the association between the compound and gene of the query in the tissue type of interest in each PharmacoDB dataset that includes them.  There is a molecular profile selector allowing to review the association according to the chosen profile. The significant associations (FDR &lt; 0.05 and pearson correlation coefficient, r &gt; 0.7) are highlighted in pink. You can view the strength of the association as well as the correlation confidence intervals by hovering over the horizontal lines.</p>\n            <div className=\"center\"><img src={biomarkerForest}/></div>\n            <p>Manhattan Plot page includes a plot showing the association between the compound and gene of query in the tissue type of interest. There is a molecular profile selector allowing to review the association according to the chosen profile. The genomic coordinates are displayed on the x-axis, and negative logarithm of the association p-value is displayed on the y-axis. The different colors of each block show the extent of each chromosome. Hovering over each colored block shows the name of the corresponding gene, the PharmacoDB dataset from which the data is fetched, chromosome number, and negative logarithm of the association p-value.</p>\n            <div className=\"center\"><img src={biomarkerManhattan}/></div>\n            <p>The Gene Information page contains a table representing whether the gene is a compound target, Ensembl ID of the gene, and it’s location.</p>\n            <div className=\"center\"><img src={biomarkerGene}/></div>\n            <p>Compound Information page has a table showing the FDA approval status of the compound, active trials pertaining to it, and the annotated targets of the compound.</p>\n            <div className=\"center\"><img src={biomarkerComp}/></div>\n        </div>\n    );\n}\nexport default DocBiomarker;\n","/* eslint-disable radix */\n/* eslint-disable no-nested-ternary */\nimport React, { useState, useEffect } from 'react';\nimport { Element } from 'react-scroll';\nimport PropTypes from 'prop-types';\nimport Layout from '../../UtilComponents/Layout';\nimport { StyledDocPage, StyledDocSidebarList } from '../../../styles/DocumentationStyles';\nimport StyledWrapper from '../../../styles/utils';\n\nimport DocOverview from './Documentations/DocOverview';\nimport DocSearch from \"./Documentations/DocSearch\";\nimport DocDataset from './Documentations/DocDataset';\nimport DocTissue from './Documentations/DocTissue';\nimport DocCell from './Documentations/DocCell';\nimport DocExperiment from './Documentations/DocExperiment';\nimport DocGene from './Documentations/DocGene';\nimport DocDrug from './Documentations/DocDrug';\nimport DocDatasetsIntersection from './Documentations/DocDatasetsIntersection';\nimport DocCellVsDrug from './Documentations/DocCellVsDrug';\nimport DocTissueVsDrug from './Documentations/DocTissueVsDrug';\nimport DocBiomarker from './Documentations/DocBiomarker';\n\nconst SIDE_LINKS = [\n    { label: 'Overview', name: 'overview' },\n    { label: 'Search', name: 'search' },\n    { label: 'Datasets', name: 'dataset' },\n    { label: 'Tissues', name: 'tissue' },\n    { label: 'Cell Lines', name: 'cell' },\n    { label: 'Experiments', name: 'experiment' },\n    { label: 'Genes', name: 'gene' },\n    { label: 'Compounds', name: 'drug' },\n    // { label: 'Datasets Intersection', name: 'intersection' },\n    { label: 'Cell line vs. Compound', name: 'cell-drug' },\n    { label: 'Tissue vs. Compound', name: 'tissue-drug' },\n    { label: 'Biomarker', name: 'biomarker' },\n];\n\n/**\n * Shows the description of the documentation page.\n *\n * @component\n * @example\n *\n * return (\n *   <DocDescription/>\n * )\n */\nconst DocDescription = () => {\n\n    const [dataset, setDataset] = useState({\n        resources: [],\n        publications: [],\n        datatypes: [],\n        notFound: false\n    });\n\n    // A section to display on the page\n    const [display, setDisplay] = useState('overview');\n\n    /**\n     *\n     * @param {String} link\n     */\n    const createSideLink = (link, i) => (\n        <li key={i} className={display === link.name ? 'selected': undefined}>\n            {\n                link.name=== \"gap\" ?\n                <br/> :\n                <button type='button' onClick={() => setDisplay(link.name)}>\n                    {link.label}\n                </button>\n            }\n        </li>\n    );\n\n    return (\n        <StyledDocPage className=\"container\">\n            <div className='heading'>\n                <span className='title'>{SIDE_LINKS.filter(item=> item.name === display)[0].label}</span>\n            </div>\n            <div className='wrapper'>\n                <StyledDocSidebarList>\n                    {SIDE_LINKS.map((link, i) => createSideLink(link, i))}\n                </StyledDocSidebarList>\n                <div className=\"container\">\n                        {\n                            display === 'overview' &&\n                            <Element className=\"section\" name=\"overview\">\n                                <DocOverview />\n                            </Element>\n                        }\n                        {\n                            display === 'search' &&\n                            <Element className=\"section\" name=\"search\">\n                                <DocSearch />\n                            </Element>\n                        }\n                        {\n                            display === 'dataset' &&\n                            <Element className=\"section\" name=\"dataset\">\n                                <DocDataset />\n                            </Element>\n                        }\n                        {\n                            display === 'tissue' &&\n                            <Element className=\"section\" name=\"tissue\">\n                                <DocTissue />\n                            </Element>\n                        }\n                        {\n                            display === 'cell' &&\n                            <Element className=\"section\" name=\"cell\">\n                                <DocCell />\n                            </Element>\n                        }\n                        {\n                            display === 'experiment' &&\n                            <Element className=\"section\" name=\"tissue\">\n                                <DocExperiment />\n                            </Element>\n                        }\n                        {\n                            display === 'gene' &&\n                            <Element className=\"section\" name=\"tissue\">\n                                <DocGene />\n                            </Element>\n                        }\n                        {\n                            display === 'drug' &&\n                            <Element className=\"section\" name=\"drug\">\n                                <DocDrug />\n                            </Element>\n                        }\n                        {/*{*/}\n                        {/*    display === 'intersection' &&*/}\n                        {/*    <Element className=\"section\" name=\"intersection\">*/}\n                        {/*        <DocDatasetsIntersection />*/}\n                        {/*    </Element>*/}\n                        {/*}*/}\n                        {\n                            display === 'cell-drug' &&\n                            <Element className=\"section\" name=\"cell-drug\">\n                                <DocCellVsDrug />\n                            </Element>\n                        }\n                        {\n                            display === 'tissue-drug' &&\n                            <Element className=\"section\" name=\"tissue-drug\">\n                                <DocTissueVsDrug />\n                            </Element>\n                        }\n                        {\n                            display === 'biomarker' &&\n                            <Element className=\"section\" name=\"biomarker\">\n                                <DocBiomarker />\n                            </Element>\n                        }\n                </div>\n            </div>\n        </StyledDocPage>\n    );\n};\n\n\n\nexport default DocDescription;\n\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport ScrollToTop from 'react-scroll-to-top';\nimport Layout from '../../UtilComponents/Layout';\nimport DocDescription from './DocDescription';\nimport 'react-scroll-to-top/lib/index.css';\nimport colors from '../../../styles/colors';\nimport StyledWrapper from '../../../styles/utils';\n\n/**\n * Parent component for the Documentation page,\n * includes child components for the DocDescription.\n *\n * @component\n * @example\n *\n * return (\n *   <Documentation/>\n * )\n */\nconst Documentation = () => (\n    <Layout page=\"documentation\">\n        <StyledWrapper>\n            <DocDescription/>\n        </StyledWrapper>\n    </Layout>\n);\n\nexport default Documentation;\n","// export default ['#08589e', '#2b8cbe', '#4eb3d3', '#7bccc4', '#a8ddb5', '#ccebc5', '#f0f9e8'];\nexport default ['#084081', '#0868ac', '#2b8cbe', '#4eb3d3', '#7bccc4', '#a8ddb5', '#ccebc5', '#e0f3db', '#eef6c9', '#f7fcf0']\n","import styled from 'styled-components';\n\n// container that wraps around horizontal bar plot\n// use 'single' prop value to indicate rapper for single plot.\nconst PlotsWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: space-around;\n\n  .plot {\n    width: ${props => props.single ? '100%' : 'calc(50% - 10px)'};\n    .download-buttons {\n      width: 100%;\n      display: flex;\n      justify-content: flex-end;\n      .left {\n        margin-right: 5px;\n      }\n    }\n  }\n\n  @media only screen and (max-width: 765px) {\n    flex-direction: column;\n    .plot {\n      width: 100%;\n    }\n  }\n`;\n\nexport default PlotsWrapper;\n","import React from 'react';\nimport Plot from 'react-plotly.js';\nimport PropTypes from 'prop-types';\nimport { useQuery } from '@apollo/react-hooks';\nimport colors from '../../styles/colors';\nimport { getDatasetsQuery } from '../../queries/dataset';\nimport DownloadButton from '../UtilComponents/DownloadButton';\n\nconst config = {\n  responsive: true,\n  displayModeBar: false,\n};\n\n/**\n * Generates single data point for plotly.\n *\n * @param {Array} data - array of objects that contain name, count and color properties\n *\n * @returns - {\n *  x: [446, 204, 113, 52, 11, 9, 1],\n    y: [\"CTRPv2\", \"GDSC1000\", \"GRAY\", \"FIMM\", \"CCLE\", \"gCSI\", \"UHNBreast\"],\n    type: 'bar',\n    orientation: 'h',\n    marker: {\n      color: [\"#2b8cbe\", \"#a8ddb5\", \"#ccebc5\", \"#4eb3d3\", \"#08589e\", \"#7bccc4\", \"#f0f9e8\"],\n    },\n * }\n */\nconst generatePlotlyData = (data, logScale) => {\n  const output = {\n    x: [],\n    y: [],\n    text: [],\n    type: 'bar',\n    orientation: 'h',\n    marker: {\n      color: [],\n    },\n  };\n  data.forEach((dataset) => {\n    output.x.push(Math.ceil(dataset.count));\n    output.y.push(dataset.name);\n    output.marker.color.push(dataset.color);\n  });\n  return output;\n};\n\n/**\n * A component that visualizes average statistic (experiments per cell lines or experiments per compounds)\n * for each dataset. Component uses plotly.js to render the plot\n *\n * @component\n * @example\n *\n * returns (\n *   <Plot data={[plotlyData]} layout={layout} config={config} />\n * )\n */\nconst DatasetHorizontalPlot = (props) => {\n  const { plotId, data, xaxis, title, logScale } = props;\n\n  // add datasets with 0 experiments to the plot\n  const { loading, error, data: allDatasets } = useQuery(getDatasetsQuery);\n  if (allDatasets) {\n    allDatasets.datasets.forEach((dataset) => {\n      let exist = false;\n      data.forEach((d) => { if (d.name === dataset.name) exist = true; });\n      if (!exist) data.push({ name: dataset.name, count: 0, color: '#ffffff' });\n    });\n  }\n\n  // sorts data by count values\n  data.sort((dataset1, dataset2) => dataset2.count - dataset1.count);\n  const plotlyData = generatePlotlyData(data, logScale);\n  const layout = {\n    autoresize: true,\n    height: 400,\n    margin: {\n      t: 20,\n      b: 50,\n      l: 65,\n      r: 0,\n    },\n    xaxis: {\n      color: colors.dark_teal_heading,\n      title: {\n        text: xaxis,\n        font: {\n          size: 14,\n          family: 'arial',\n\n        },\n        standoff: 10,\n      },\n      type: logScale ? 'log' : 'linear'\n    },\n    yaxis: {\n      color: colors.dark_teal_heading,\n    },\n  };\n\n  if(logScale){\n    layout.xaxis.tickvals = [0, 10, 100, 1000, 10000, 50000, 100000, 500000, 1000000, 5000000, 10000000];\n    layout.xaxis.ticktext = [0, 10, 100, 1000, '10k', '50k', '100k', '500k', '1M', '5M', '10M'];\n  };\n\n  return (\n    <div className=\"plot\">\n      <div className=\"title\">\n        <h5>{title}</h5>\n      </div>\n      <Plot divId={plotId} data={[plotlyData]} layout={layout} config={config} />\n      <div className='download-buttons'>\n        <DownloadButton className='left' label='SVG' mode='svg' filename={title} plotId={plotId} />\n        <DownloadButton label='PNG' mode='png' filename={title} plotId={plotId} />\n      </div>\n    </div>\n  );\n};\n\nDatasetHorizontalPlot.propTypes = {\n  /**\n   * [{name: \"GDSC1000\", count: 901.92, color: \"#a8ddb5\"}, ...]\n   */\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n  xaxis: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  logScale: PropTypes.bool\n};\n\nexport default DatasetHorizontalPlot;\n","import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport Layout from '../../UtilComponents/Layout';\nimport dataset_colors from '../../../styles/dataset_colors';\nimport StyledWrapper from '../../../styles/utils';\nimport PlotsWrapper from '../../../styles/PlotsWrapper';\nimport AverageDatasetBarPlot from '../../Plots/DatasetHorizontalPlot';\nimport { getDatasetStatsQuery } from '../../../queries/dataset';\nimport Loading from '../../UtilComponents/Loading';\n\n/**\n *\n * @param {Boolean} loading\n * @param {Boolean} error\n * @param {Array} data\n *\n * @returns - (\n *  <div className=\"plot\">\n        <h3>Average experiments per cell line in each data set</h3>\n        <AverageDatasetBarPlot />\n      </div>\n      <div className=\"plot\">\n        <h3>Average experiments per compound in each dataset</h3>\n        <AverageDatasetBarPlot />\n      </div>\n * )\n */\nconst renderComponent = (loading, error, data) => {\n  if (loading) {\n    return <Loading />;\n  }\n  if (error) {\n    return <p> Error! </p>;\n  }\n  const experimentsPerCell = [];\n  const experimentsPerCompound = [];\n  const experimentsPerCellXAxis = {\n    tickvals: [],\n    ticktext: []\n  }\n  if (data.dataset_stats) {\n    data.dataset_stats.forEach((el, i) => {\n      const { dataset } = el;\n      const { id, name } = dataset;\n\n      experimentsPerCell.push({\n        id, name,\n        // count: Math.log10(el.experiment_count / el.cell_line_count),\n        count: el.experiment_count / el.cell_line_count,\n        color: dataset_colors[i],\n      });\n      experimentsPerCompound.push({\n        id, name,\n        // count: Math.log10(el.experiment_count / el.compound_count),\n        count: el.experiment_count / el.compound_count,\n        color: dataset_colors[i],\n      });\n    });\n    experimentsPerCellXAxis.tickvals = [...new Set(experimentsPerCell.map(item => Math.ceil(item.count)).sort((a, b) => a - b))];\n    experimentsPerCellXAxis.ticktext = experimentsPerCellXAxis.tickvals.map(item => Math.pow(10, item));\n  }\n\n  return (\n    <>\n      <PlotsWrapper>\n        <AverageDatasetBarPlot\n            data={experimentsPerCell}\n            xaxis=\"Experiments\"\n            title=\"Average experiments per cell line in each dataset\"\n            logScale={true}\n        />\n      </PlotsWrapper>\n      <PlotsWrapper>\n        <AverageDatasetBarPlot\n            data={experimentsPerCompound}\n            xaxis=\"Experiments\"\n            title=\"Average experiments per compound in each dataset\"\n            logScale={true}\n        />\n      </PlotsWrapper>\n    </>\n  );\n};\n\n/**\n * Parent component for the experiments page.\n *\n * @component\n * @example\n *\n * return (\n *   <Experiments/>\n * )\n */\nconst Experiments = () => {\n  const { loading, error, data } = useQuery(getDatasetStatsQuery);\n\n  return (\n    <Layout page=\"experiments\">\n      <StyledWrapper>\n          {renderComponent(loading, error, data)}\n      </StyledWrapper>\n    </Layout>\n  );\n};\n\nexport default Experiments;\n","import { gql } from 'apollo-boost';\n\n\nconst getSingleCompoundTarget = gql`\n    query getSingleCompoundTarget($compoundId: Int, $compoundName: String) {\n        single_compound_target(compoundId: $compoundId, compoundName: $compoundName) {\n            compound_id\n            compound_name\n            compound_uid\n            targets {\n                target_id\n                target_name\n                genes {\n                    id\n                    name\n                    annotation {\n                        symbol\n                    }\n                }\n            }\n        }\n    }  \n`;\n\n\nconst getSingleGeneTarget = gql`\n    query getSingleGeneTarget($geneId: Int, $geneName: String) {\n        single_gene_target(geneId: $geneId, geneName: $geneName) {\n            gene_id\n            gene_name\n            gene_annotation {\n                symbol\n            }\n            targets {\n                target_id\n                target_name\n                compounds {\n                    id\n                    name\n                    uid\n                }\n            }\n        }\n    }  \n`;\n\n\nconst getAllCompoundTargetsQuery = gql`\n    query getAllCompoundTargets {\n        all_compound_targets {\n            compound_id\n            targets {\n                target_id\n            }\n        }\n    }\n`;\n\n\nconst getGeneTargetCountCompoundsByDataset = gql`\n    query getGeneTargetCountCompoundByDataset($geneId: Int, $geneName: String) {\n        compound_targeting_gene_count_per_dataset(geneId: $geneId, geneName: $geneName) {\n            gene_id,\n            gene_name,\n            targetsStat\n                {\n                  dataset {\n                            id \n                            name\n                            }\n                compound_count\n                }\n        }\n    }   \n`;\n\nexport {\n    getSingleCompoundTarget,\n    getSingleGeneTarget,\n    getAllCompoundTargetsQuery,\n    getGeneTargetCountCompoundsByDataset,\n};\n","import React, { useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { getAllCompoundTargetsQuery } from '../../../queries/target';\nimport Plot from 'react-plotly.js';\nimport Loading from '../../UtilComponents/Loading';\nimport Error from '../../UtilComponents/Error';\nimport styled from 'styled-components';\n\nconst StyledGenePlot = styled.div`\n    margin-top: 30px;\n    margin-bottom: 30px;\n`;\n\nconst layout = {\n    autosize: true,\n    height: 530,\n    margin: {\n        t: 50,\n    },\n    xaxis: {\n        title: {\n            text: 'Number of Targets'\n        },\n        tickvals: [ 10, 20, 30, 40, 50],\n        ticktext: [ '10', '20', '30', '40', '50+'],\n    },\n    yaxis: {\n        title: {\n            text: 'Number of Compounds'\n        },\n        tickvals : [0, 10, 20, 50, 100, 200, 500, 1000, 1500, 2000, 5000, 10000],\n        ticktext : [0, 10, 20, 50, 100, 200, 500, '1k', 1500, '2k', '5k', '10k'],\n        type: 'log'\n    }\n};\n\nconst config = {\n    responsive: true,\n    displayModeBar: false,\n};\n\nconst GenesPlot = () => {\n\n    const [plotData, setPlotData] = useState([]);\n    const [error, setError] = useState(false);\n\n    const parsePlotData = (data) => {\n        let compoundTargets = data.map(item => ({\n            compound_id: item.compound_id,\n            numTargets: item.targets.length\n        }));\n        let targetNums = compoundTargets.map(item => item.numTargets);\n        targetNums = [...new Set(targetNums)];\n        let parsed = [];\n        let fiftyAndMore = 0\n        for(let targetNum of targetNums){\n            let filtered = compoundTargets.filter(item => item.numTargets === targetNum);\n            // combine 50 and more as a single bar\n            if (targetNum >= 50) {\n                fiftyAndMore += filtered.length;\n            } else {\n                parsed.push({\n                    compoundNum: filtered.length,\n                    targetNum: targetNum\n                });\n            }\n        }\n        parsed.sort((a, b) => b.compoundNum - a.compoundNum);\n        parsed.push({compoundNum: fiftyAndMore, targetNum: 50});\n        return({\n            x: parsed.map(item => item.targetNum),\n            y: parsed.map(item => item.compoundNum),\n            type: 'bar',\n            marker: {\n                color: '#0868ac',\n            },\n        });\n    }\n\n    const { loading } = useQuery(getAllCompoundTargetsQuery, {\n        variables: { compoundId: 0 },\n        onCompleted: (data) => {\n            setPlotData([parsePlotData(data.all_compound_targets)]);\n        },\n        onError: (err) => {\n            console.log(err);\n            setError(true);\n        }\n    });\n\n    return (\n        <StyledGenePlot>\n            {\n                loading ? <Loading />\n                :\n                error ? <Error />\n                :\n                <React.Fragment>\n                    <h3>Frequency of Unique Targets per Compound</h3>\n                    <Plot\n                        data={plotData}\n                        layout={layout}\n                        config={config}\n                    />\n                </React.Fragment>\n            }\n        </StyledGenePlot>\n    );\n}\n\nexport default GenesPlot;\n","import React, { useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Link } from 'react-router-dom';\nimport Table from '../../UtilComponents/Table/Table';\nimport { getGenesQuery } from '../../../queries/gene';\nimport Loading from '../../UtilComponents/Loading';\nimport Error from '../../UtilComponents/Error';\n\nconst table_columns = [\n  {\n    Header: 'Name',\n    accessor: 'symbol',\n    Cell: (row) => (<Link to={`/genes/${row.row.original.id}`}>{row.value}</Link>),\n    center: true,\n  },\n  {\n    Header: 'Ensembl ID',\n    accessor: 'name',\n    Cell: (row) => (\n        <a href={`http://useast.ensembl.org/Homo_sapiens/Gene/Summary?g=${row.row.original.name}`} target=\"_blank\">\n          <div style={{ textAlign: 'center' }}> {row.row.original.name} </div>\n        </a>),\n  },\n];\n\n/**\n *\n * @param {Array} data - gene data from the genes API call.\n */\nconst getTableData = (data) => {\n  let table_data = [];\n  // create updated data.\n  if (data) {\n    table_data = data.genes.map((value) => {\n      const { name, annotation, id } = value;\n      const { symbol, ensg, gene_seq_end, gene_seq_start } = annotation;\n      return {\n        id,\n        name: name,\n        symbol: symbol || \"N/A\",\n        ensg,\n        gene_seq_start,\n        gene_seq_end,\n      };\n    });\n  }\n  // sorting the data based on the symbol.\n  table_data.sort((a, b) => a.symbol.toUpperCase().localeCompare(b.symbol.toUpperCase()));\n\n  return table_data;\n};\n\nconst GenesTable = () => {\n\n  const [genes, setGenes] = useState([]);\n  const [error, setError] = useState(false);\n\n  const { loading } = useQuery(getGenesQuery, {\n    onCompleted: (data) => {\n      setGenes(getTableData(data));\n    },\n    onError: (err) => {\n      console.log(err);\n      setError(true);\n    }\n  });\n\n  return (\n    <React.Fragment>\n      <h3>Gene names</h3>\n      {\n        loading ? <Loading />\n          :\n          error ? <Error />\n            :\n            genes.length > 0 &&\n            <Table columns={table_columns} data={genes} />\n      }\n    </React.Fragment>\n  )\n}\n\nexport default GenesTable;\n","import React from 'react';\nimport StyledWrapper from '../../../styles/utils';\nimport Layout from '../../UtilComponents/Layout';\nimport GenesPlot from './GenesPlot';\nimport GenesTable from './GenesTable';\n\n/**\n * Parent component for the compounds page.\n *\n * @component\n * @example\n *\n * return (\n *   <Genes/>\n * )\n */\nconst Genes = () => {\n  return (\n    <Layout page=\"genes\">\n      <StyledWrapper>\n        <GenesPlot />\n        <GenesTable />\n      </StyledWrapper>\n    </Layout>\n  );\n};\n\nexport default Genes;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport doseImg from '../../images/desc-dosecurves.webp';\nimport colors from '../../styles/colors';\n\nconst StyledDescription = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    max-height:370px;\n\n    width: 70%;\n    margin-top: 8vh;\n\n    .text-container {\n        width: 65%;\n\n        display: flex;\n        flex-direction: column;\n\n        span {\n            font-size: calc(0.5vw + 0.7em);\n            line-height: calc(1vw + 1em);\n        }\n\n        h1 {\n            color: ${colors.dark_teal_heading};\n            font-family: 'Roboto Slab', serif;\n            font-size: calc(1.8vw + 1em) !important;\n            margin-bottom: 4vh;\n        }\n    }\n\n    .dose-img {\n        width: 25%;\n        max-width: 370px;\n    }\n\n    /* mobile */\n    @media only screen and (max-width: 1081px) {\n        .dose-img {\n            display: none;\n        }\n        .text-container{\n          width:100%;\n        }\n    } \n`;\n\n/**\n * Shows the description on the home page\n * and the dose-response-curves graphic.\n *\n * @component\n * @example\n *\n * return (\n *   <Description/>\n * )\n */\nconst Description = () => (\n  <StyledDescription>\n    <div className=\"text-container\">\n      <h1>\n        Mine multiple cancer\n        {' '}\n        <br />\n        pharmacogenomic datasets\n      </h1>\n      <span>\n        PharmacoDB allows scientists to search across publicly\n        available datasets to find instances where a compound or cell\n        line of interest has been profiled, and to view and compare\n        the dose-response data for a specific cell line - compound pair\n        from any of the studies included in the database\n      </span>\n    </div>\n    <img alt=\"dose-response curves\" className=\"dose-img\" src={doseImg} />\n  </StyledDescription>\n);\n\nexport default Description;\n","import { gql } from 'apollo-boost';\n\n\n/**\n * @returns - \n */\nconst getAllDataTypeStatsQuery = gql`\n    query allDataTypeStats {\n        data_type_stats {\n            dataType\n            count\n        }\n    }\n`;\n\nexport {\n    getAllDataTypeStatsQuery,\n};\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport { useQuery } from '@apollo/react-hooks';\nimport compoundsImg from '../../images/compound.webp';\nimport cellsImg from '../../images/cell.webp';\nimport datasetsImg from '../../images/dataset.webp';\nimport experimentsImg from '../../images/experiment.webp';\nimport genesImg from '../../images/gene.webp';\nimport tissuesImg from '../../images/tissue.webp';\nimport colors from '../../styles/colors';\nimport { getAllDataTypeStatsQuery } from '../../queries/stat';\n\nconst StyledStats = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-evenly;\n\n    width: 80%;\n    margin-bottom: 20vh; //TODO: REMOVE\n    margin-top: 8vh;\n    background: ${colors.light_blue_bg};\n    height: 12vw;\n    border-radius: calc(0.8vw + 0.4em);\n\n    .item-container {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n\n        img {\n            width: calc(3.8vw + 30px);\n            margin-bottom: 1vw;\n        }\n        .text {\n            color: ${colors.dark_teal_heading};\n            font-size: calc(0.8vw + 0.3em);\n            text-align: center;\n            font-family: 'Rubik', sans-serif;\n            font-weight: 400;\n            line-height: calc(0.8vw + 0.5em);\n        }\n        .big {\n            font-size: calc(0.9vw + 0.5em);\n        }\n    }\n\n    /* mobile */\n    @media only screen and (max-width: 1081px) {\n      flex-wrap: wrap;\n      border-radius: calc(1vw + 0.5em);\n      height: auto;\n      \n      .item-container {\n        flex-basis: 33.333333%;\n        padding: 10px 0;\n\n        img {\n          width: calc(3vw + 20px);\n        }\n\n        .text {\n          font-size: calc(0.8vw + 0.5em);\n          line-height: calc(0.8vw + 0.8em);\n        }\n\n        .big {\n          font-size: calc(0.9vw + 0.7em);\n        }\n      }\n    } \n`;\n\n\n/**\n * @returns {Object} - returns an Object of different types with name and value.\n * TODO: Update the values in future if the stats gets updated; \n * TODO: though the API updates this object but the data is not updated in case API call gives an error.\n */\nconst statsObject = {\n  dataset: {\n    name: 'datasets', value: '10', image: datasetsImg, link: '/datasets',\n  },\n  tissue: {\n    name: 'tissues', value: '30', image: tissuesImg, link: '/tissues',\n  },\n  cell: {\n    name: 'cell lines', value: '1,758', image: cellsImg, link: '/cell_lines',\n  },\n  experiment: {\n    name: 'experiments',\n    value: '6,314,313',\n    image: experimentsImg,\n    link: '/experiments',\n  },\n  gene: {\n    name: 'genes', value: '61,211', image: genesImg, link: '/genes',\n  },\n  compound: {\n    name: 'compounds', value: '56,149', image: compoundsImg, link: '/compounds',\n  },\n};\n\n\n/**\n *\n * @param {Array} data - input array.\n */\nconst createStatsObject = (data) => {\n  const stats = {};\n\n  data.forEach(el => {\n    stats[el.dataType] = el;\n  })\n\n  return stats;\n}\n\n/**\n *\n * @param {Array} data\n */\nconst updateStatsObject = (data) => {\n  const stats = statsObject;\n\n  Object.keys(stats).forEach((el) => {\n    if (el !== 'gene') { //TODO: Update this when we can calculate the total number of genes.\n      stats[el].value = data[el]['count'].toLocaleString();\n    }\n  })\n\n  return stats;\n}\n\n/**\n * Shows the stats with graphics on the front page.\n *\n * @component\n * @example\n *\n * return (\n *   <Stats/>\n * )\n */\nconst Stats = () => {\n  const { loading, error, data } = useQuery(getAllDataTypeStatsQuery);\n  const [stats, setStats] = useState(statsObject);\n\n  useEffect(() => {\n    if (data) {\n      const stats = createStatsObject(data.data_type_stats);\n      const updatedStatsObject = updateStatsObject(stats);\n\n      setStats({...updatedStatsObject});\n    }\n  }, [data])\n\n  return (\n    < StyledStats >\n      {\n        Object.keys(stats).map((type) => (\n          <div key={stats[type].name} className=\"item-container\">\n            <Link to={stats[type].link}>\n              <img alt={stats[type].value} src={`${stats[type].image}`} />\n              <div className=\"text\">\n                <span className=\"big\">\n                  {`${stats[type].value}`}\n                </span>\n                <br />\n                {`${stats[type].name}`}\n              </div>\n            </Link>\n          </div>\n        ))\n      }\n    </StyledStats >\n  )\n};\n\nexport default Stats;\n","import React from 'react';\nimport styled from 'styled-components';\nimport ScrollToTop from 'react-scroll-to-top';\nimport Description from './Description';\nimport Layout from '../UtilComponents/Layout';\nimport Stats from './Stats';\nimport 'react-scroll-to-top/lib/index.css';\n\nconst StyledHome = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`;\n\n/**\n * Parent component for the home page,\n * includes child components for the description and stats.\n *\n * @component\n * @example\n *\n * return (\n *   <Home/>\n * )\n */\nconst Home = () => (\n  <Layout page=\"home\">\n    <ScrollToTop smooth />\n    <StyledHome>\n      <Description />\n      <Stats />\n    </StyledHome>\n  </Layout>\n);\n\nexport default Home;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Layout from './Layout';\n\nimport StyledWrapper from '../../styles/utils';\n\n/**\n * Returns JSX for the not found page. Meant to be reused.\n *\n * @returns {JSX} the content of the not found page.\n */\nexport const NotFoundContent = () => (\n  <>\n    <h1>Page Not Found.</h1>\n    <p style={{ textAlign: 'center', marginTop: '5vh', fontSize: 'calc(0.6vw + 0.9em)' }}>\n      <Link to=\"/\">← Go Home</Link>\n    </p>\n  </>\n);\n\n/**\n * Component for the Page Not Found error page.\n *\n * @component\n * @example\n *\n * return (\n *   <NotFoundPage/>\n * )\n */\nconst NotFoundPage = () => (\n  <Layout>\n    <StyledWrapper>\n      <h1>Page Not Found.</h1>\n      <p style={{ textAlign: 'center', marginTop: '5vh', fontSize: 'calc(0.6vw + 0.9em)' }}>\n        <Link to=\"/\">← Go Home</Link>\n      </p>\n    </StyledWrapper>\n  </Layout>\n);\n\nexport default NotFoundPage;\n","/* eslint-disable import/prefer-default-export */\nimport { gql } from 'apollo-boost';\n\n/**\n * @param { Number } compoundId - takes the compound id as the argument to the query.\n * @returns - Query returns all experiments for the given compound.\n */\nconst getSingleCompoundExperimentsQuery = gql`\n  query getSingleCompoundExperiments($compoundId: Int!) {\n    experiments(compoundId: $compoundId) {\n      id\n      cell_line {\n        id\n        uid\n        name\n        tissue {\n          id\n          name\n        }\n      }\n      tissue {\n        id\n        name\n      }\n      dataset {\n        id\n        name\n      }\n      profile {\n        AAC\n        IC50\n      }\n    }\n  }\n`;\n\n/**\n * @param { Number } cellLineId - takes the cell line id as the argument to the query.\n * @returns - Query returns all experiments for the given cell line.\n */\nconst getSingleCellLineExperimentsQuery = gql`\n  query getSingleCellLineExperiments($cellLineId: Int!) {\n    experiments(cellLineId: $cellLineId) {\n      id\n      compound {\n        id\n        uid\n        name\n      }\n      tissue {\n        id\n        name\n      }\n      dataset {\n        id\n        name\n      }\n      profile {\n        AAC\n        IC50\n      }\n    }\n  }\n`;\n\n/**\n * @param { Number } tissueId - takes the tissue id as the argument to the query.\n * @returns - Query returns all experiments for the given tissue.\n */\nconst getSingleTissueExperimentsQuery = gql`\n  query getSingleTissueExperiments($tissueId: Int!) {\n    experiments(tissueId: $tissueId) {\n      id\n      compound {\n        id\n        name\n      }\n      cell_line {\n        id\n        name\n        tissue {\n          id\n          name\n        }\n      }\n      dataset {\n        id\n        name\n      }\n      profile {\n        AAC\n        IC50\n      }\n    }\n  }\n`;\n\n/**\n * @param { Number } tissueId - takes the tissue id as the argument to the query.\n * @returns - Query returns celllines used in all experiments for the given tissue.\n */\nconst getSingleTissueCellLinesQuery = gql`\nquery getSingleTissueCellLines($tissueId: Int!) {\n  experiments(tissueId: $tissueId) {\n    id\n    cell_line {\n      id\n      uid\n      name\n    }\n  }\n}\n`;\n\n/**\n * @param { Number } tissueId - takes the tissue id as the argument to the query.\n * @returns - Query returns compounds used in all experiments for the given tissue.\n */\nconst getSingleTissueCompoundsQuery = gql`\n  query getSingleTissueCompounds($tissueId: Int!) {\n    experiments(tissueId: $tissueId) {\n      id\n      compound {\n        id\n        uid\n        name\n      }\n      dataset {\n      id\n      name\n    }\n    }\n  }\n`;\n\n// ToDO: gene drugs graphql request end point is not available.\nconst getSingleGeneExperimentsQuery = gql`\n  query getSingleGeneExperiments($geneId: Int!) {\n    gene_drugs(geneId: $geneId, all: true) {\n      dataset {\n        id\n        name\n      }\n    }\n  }\n`;\n\n/**\n * Takes cell line and compound ids/names, and returns all the experiment records that \n * is performed using the given cell line and compound combination.\n * @param { String } cellLineUID\n * @param { Number } cellLineId \n * @param { String } cellLineName\n * @param {String} compoundUID\n * @param { Number } compoundId\n * @param { String } compoundName\n * @returns - All the experiments with given cell line and compound combination.\n */\nconst getCellLineCompoundExperimentsQuery = gql`\n  query getCellLineCompoundExperiments($cellLineId: Int, $cellLineName: String, $compoundId: Int, $compoundName: String) {\n    experiments(\n      cellLineId: $cellLineId, \n      cellLineName: $cellLineName, \n      compoundId: $compoundId, \n      compoundName: $compoundName, \n      all: true\n    ) {\n      cell_line {\n        id\n        uid\n        name\n      }\n      compound {\n        id\n        uid\n        name\n      }\n      dataset {\n        id\n        name\n      }\n      dose_response {\n        dose\n        response\n      }\n      profile {\n        HS\n        Einf\n        EC50\n        AAC\n        IC50\n        DSS1\n        DSS2\n        DSS3\n      }\n    }\n  }\n`;\n\nconst getTissueCompoundExperimentsQuery = gql`\n  query getTissueCompoundExperiments($tissueId: Int, $tissueName: String, $compoundId: Int, $compoundName: String) {\n    experiments(\n      tissueId: $tissueId, \n      tissueName: $tissueName, \n      compoundId: $compoundId, \n      compoundName: $compoundName,\n      all: true\n    ) {\n      tissue {\n        id\n        name\n      }\n      cell_line {\n        id\n        uid\n        name\n      }\n      compound {\n        id\n        uid\n        name\n      }\n      dataset {\n        id\n        name\n      }\n      dose_response {\n        dose\n        response\n      }\n      profile {\n        HS\n        Einf\n        EC50\n        AAC\n        IC50\n        DSS1\n        DSS2\n        DSS3\n      }\n    }\n  }  \n`;\n\nexport {\n  getSingleCompoundExperimentsQuery,\n  getSingleCellLineExperimentsQuery,\n  getSingleTissueExperimentsQuery,\n  getSingleTissueCellLinesQuery,\n  getSingleTissueCompoundsQuery,\n  getSingleGeneExperimentsQuery,\n  getCellLineCompoundExperimentsQuery,\n  getTissueCompoundExperimentsQuery\n};\n","/**\n *\n * @param {Array} values - array of numbers, takes the input and generates median.\n * @returns {Number} - median value of the given set of numbers\n */\nconst calculateMedian = (values) => {\n  values.sort();\n  const half = Math.floor(values.length / 2);\n  if (values.length % 2) return values[half];\n  return (values[half - 1] + values[half]) / 2.0;\n};\n\nconst calculateAbsoluteDeviation = (values, median) => values.map((el) => Math.abs(el - median));\n\nexport { calculateMedian, calculateAbsoluteDeviation };\n","import { calculateMedian, calculateAbsoluteDeviation } from './statistics';\n\n/**\n * A helper function that formats raw experiment data to be subsequently processed be rendering functions\n * @param {Array} experiments - experiments data from the API call\n * @param {String} plotType - determines type of processing (and type of plot the processed data is going to be used in). Available values are 'tissue' and 'cell_line'\n * @returns {Object} - returns an object with cell or tissue as keys. Every cell line has three subfields: id, name and profiles. Profiles is an object of datasets where each dataset has two fields, AAC and IC50\n * @example\n * return { '697': {id: 1, name: '697', profiles: {CCLE: { AAC:0.4732, IC50: 0.1278 }, ...}}, ...}\n */\nconst formatExperimentPlotData = (experiments, plotType) => {\n  const outputObj = {};\n  experiments.forEach((experiment) => {\n    const { __typename, ...profile } = experiment.profile;\n    const { dataset } = experiment;\n    // retrieves name and id properties of a tissue or cell line\n    const { id, name } = experiment[plotType];\n    if (!outputObj[name]) {\n      outputObj[name] = { id, name, profiles: { [dataset.name]: plotType === 'tissue' ? [profile] : profile } };\n    } else {\n      // adds another dataset to an existing cell line\n      if (plotType === 'cell_line') outputObj[name].profiles[dataset.name] = profile;\n      // initializes new dataset for an existing tissue\n      if (plotType === 'tissue' && !outputObj[name].profiles[dataset.name]) outputObj[name].profiles[dataset.name] = [profile];\n      // adds profile to an tissue to an existing dataset\n      if (plotType === 'tissue' && outputObj[name].profiles[dataset.name]) outputObj[name].profiles[dataset.name].push(profile);\n    }\n  });\n  return outputObj;\n};\n\n/**\n *\n * @param {Array} arr - array of string, takes the input to be converted to object usable by react-select library.\n * @returns {Array} - array of objects with value and label properties and removes __typename field added by apollo client\n */\nconst generateSelectOptions = (arr) => arr.filter((el) => el !== '__typename').map((el) => ({ value: el, label: el }));\n\n/**\n *\n * @param {Array} data - experiments data from the API call\n * @returns {Array} - returns an array of profile and dataset options respectively that can be used by react-select\n * @example\n * return [[{value: 'CCLE', label: 'CCLE'}, ...],[...]]\n */\nconst generateOptions = (data) => {\n  const profileOptions = data.length > 0 ? Object.keys(data[0].profile) : [];\n  const datasetOptions = ['All', ...new Set(data.map((el) => el.dataset.name))];\n  return [generateSelectOptions(profileOptions), generateSelectOptions(datasetOptions)];\n};\n\n/**\n * A helper function that creates an array of values out of profile object\n * @param {Object} dataObj - profiles data object that has AAC and IC50 profiles for different datasets\n * @param {String} profile - a selected profile, can be AAC or IC50\n *  @param {String} plotType - type of that plot the data is being processed for. Can take 'tissue' and 'cell_line' values\n * @returns {Array} - returns array of numbers\n */\nconst retrieveProfiles = (dataObj, profile, dataset, plotType) => {\n  const output = [];\n  Object.keys(dataObj).forEach((datasetProfile) => {\n    // filters out null values\n    if (dataObj[datasetProfile][profile] === null) return;\n    // only populates output array if there is a matching dataset or dataset are acceptable\n    if (dataset === 'All' || dataset === datasetProfile) {\n      if (plotType === 'tissue') output.push(...dataObj[datasetProfile].map((el) => el[profile]));\n      if (plotType === 'cell_line') output.push(dataObj[datasetProfile][profile]);\n    }\n  });\n  return output;\n};\n\n/**\n * Helper function that creates data for the gap between low and high values for the plot\n * @param {Number} distance - sets how many empty bars should be in the gap\n * @returns {Array} - returns an array of objects with value, name and label properties\n */\nconst generateEmptySpace = (distance) => {\n  const output = [];\n  for (let i = 0; i < distance; i += 1) {\n    output.push({ value: 0, name: i, label: '' });\n  }\n  return output;\n};\n\n/**\n * Function that calculates median, deviation values, sorts data and creates a subset that will be further rendered\n * @param {Object} data - data object that has cell lines/tissues and their dataset profiles in it\n * @param {String} dataset - selected dataset\n * @param {String} profile - selected profile\n * @param {String} plotType - type of that plot the data is being processed for. Can take 'tissue' and 'cell_line' values\n * @returns {Object} - returns an array of objects (max length is 63) with value, deviation (for cell line only), name and label properties. Name and label properties exist separetely, even though they are being assigend to the same value. The reason is cell line plot needs them to be different to generate the empty space\n */\nconst runPlotDataAnalysis = (data, dataset, profile, plotType) => {\n  const calculatedData = [];\n  Object.values(data).forEach((group) => {\n    const profiles = retrieveProfiles(group.profiles, profile, dataset, plotType);\n    // updates calculated data only if there is at list one profile\n    if (profiles.length > 0) {\n      // loads all profiles for tissue plot and only median for cell_line plot\n      const value = plotType === 'tissue' ? profiles : calculateMedian(profiles);\n      const traceObj = { value, label: group.name, name: group.name };\n      // adds deviation value for a cell line plot\n      if (plotType === 'cell_line') traceObj.deviation = calculateMedian(calculateAbsoluteDeviation(profiles, value));\n      calculatedData.push(traceObj);\n    }\n  });\n  let output;\n  if (plotType === 'tissue') {\n    output = calculatedData.sort((a, b) => a.name.localeCompare(b.name));\n  }\n  if (plotType === 'cell_line') {\n    calculatedData.sort((a, b) => b.value - a.value);\n    // returns calculatedData or a subset of first and last 30 items from calculated data along with some few empty datapoints to create a gap if there too many dataoints\n    output = calculatedData.length > 60 ? [...calculatedData.slice(0, 30), ...generateEmptySpace(3), ...calculatedData.slice(calculatedData.length - 30, calculatedData.length)] : calculatedData;\n  }\n  return output;\n};\n\nexport { formatExperimentPlotData, generateOptions, runPlotDataAnalysis };\n","import React, { useState, useMemo, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Plot from 'react-plotly.js';\nimport Select from 'react-select';\nimport CustomSwitch from '../UtilComponents/CustomSwitch';\nimport PropTypes from 'prop-types';\nimport colors from '../../styles/colors';\nimport DownloadButton from '../UtilComponents/DownloadButton';\nimport StyledSelectorContainer from '../../styles/Utils/StyledSelectorContainer';\nimport { formatExperimentPlotData, runPlotDataAnalysis } from '../../utils/plotProcessing';\n\n// plotly config\nconst config = {\n  responsive: true,\n  displayModeBar: false,\n};\n\n/**\n * Function that creates final data and layout for plotly\n * @param {Array} data - array of object that represent a subset of data to be rendered. Every object has name, value, deviation(optional) and label properties\n * @returns {Object} - returns object with plotData and layout properties\n */\nconst generateRenderData = (data, dataset) => {\n  const plotData = [];\n  const notifications = {\n    subset: data.length > 60 ? 'Plot represents the top and bottom 30 data points' : null,\n    errorBars: dataset === 'All' ? 'Error Bars represent the Median Absolute Deviation' : null,\n  };\n  data.forEach((el, i) => {\n    const {\n      name, value, deviation, label,\n    } = el;\n    const trace = {\n      type: 'bar',\n      marker: {\n        color: i % 2 === 0 ? colors.blue : colors.green,\n      },\n      name,\n      label,\n      x: [`${name} cell line`],\n      y: [value],\n    };\n    // skips hoverinfo for gap bars\n    if (!label) trace.hoverinfo = 'skip';\n    if (deviation) {\n      trace.error_y = {\n        type: 'data',\n        array: [deviation],\n        visible: true,\n      };\n    }\n    plotData.push(trace);\n  });\n  return { plotData, notifications };\n};\n\n/**\n * Waterfall plot that shows cell line profiles (AAC or IC50) for different datasets\n *\n * @component\n * @example\n *\n * return (\n *   <ProfileCellLine/>\n * )\n */\nconst ProfileCellLine = (props) => {\n  const {\n    plotId, data, compound, profileOptions, datasetOptions, title\n  } = props;\n  const [selectedProfile, setSelectedProfile] = useState('AAC');\n  const [selectedDataset, setSelectedDataset] = useState('All');\n  const [zoomOut, setZoomOut] = useState(false);\n  const [{ plotData, notifications }, setPlotData] = useState({ plotData: [], notifications: { subset: null, errorBars: null } });\n  const [layoutVariables, setLayoutVariables] = useState({\n    width: 1500,\n    maxWidth: '800px',\n    overflowX: 'scroll',\n    xTickFontSize: 12,\n  });\n  \n  const history = useHistory();\n  \n  // preformats the data and creates selection options for datasets and profiles\n  const formattedData = useMemo(() => formatExperimentPlotData(data, 'cell_line'), [data]);\n\n  // updates the plot every time user selects new profile or dataset\n  useEffect(() => {\n    const values = runPlotDataAnalysis(formattedData, selectedDataset, selectedProfile, 'cell_line');\n    setPlotData(generateRenderData(values, selectedDataset));\n  }, [selectedProfile, selectedDataset, formattedData]);\n\n  useEffect(() => {\n    setLayoutVariables({\n      maxWidth: zoomOut ? '1000px' : '800px',\n      overflowX: zoomOut ? undefined : 'scroll',\n      width: zoomOut ? 800 : 1500,\n      xTickFontSize: zoomOut ? 9 : 12\n    });\n  }, [zoomOut]);\n\n  /**\n   * Redirects to Cell Line vs Compound page when a plot trace is clicked.\n   * @param {*} e onclick event\n   */\n  const redirectToCellLineCompound = (e) => {\n    history.push(`/search?cell_line=${e.points[0].fullData.name}&compound=${compound}`);\n  }\n\n  return (\n    <div className=\"plot\">\n      <StyledSelectorContainer>\n        <div className=\"selector-container\">\n          <div className='label'>Dataset:</div>\n          <Select\n            className='selector'\n            defaultValue={{ value: selectedDataset, label: selectedDataset }}\n            options={datasetOptions}\n            onChange={(e) => setSelectedDataset(e.value)}\n          />\n        </div>\n        <div className=\"selector-container\">\n          <div className='label'>Profile:</div>\n          <Select\n            className='selector'\n            defaultValue={{ value: selectedProfile, label: selectedProfile }}\n            options={profileOptions}\n            onChange={(e) => setSelectedProfile(e.value)}\n          />\n        </div>\n        <div className=\"selector-container\">\n          <div className='label'>Zoom:</div>\n          <CustomSwitch \n            checked={zoomOut}\n            onChange={(checked) => {setZoomOut(checked)}}\n            labelLeft='In'\n            labelRight='Out'\n          />\n        </div>\n      </StyledSelectorContainer>\n      <h4>\n        {compound}\n        ,\n        {' '}\n        {selectedProfile}\n        {' '}\n        {selectedDataset !== 'All' ? `(${selectedDataset})` : null}\n      </h4>\n      <div style={{height: '650px', maxWidth: layoutVariables.maxWidth, overflowX: layoutVariables.overflowX}}>\n        <Plot \n          divId={plotId}  \n          data={plotData} \n          layout={{\n            autoresize: true,\n            height: 600,\n            width: layoutVariables.width,\n            margin: {\n              t: 20,\n              b: 150,\n              l: 65,\n              r: 0,\n            },\n            xaxis: {\n              color: colors.dark_teal_heading,\n              tickvals: plotData.map(trace => `${trace.name} cell line`),\n              ticktext: plotData.map(trace => \n                `<a href='${`/search?cell_line=${trace.name}&compound=${compound}`}' rel=\"noopener noreferrer\">${trace.label}</a>`\n              ),\n              tickfont: {\n                size: layoutVariables.xTickFontSize,\n              },\n              fixedrange: true,\n              tickmode: 'array',\n            },\n            yaxis: {\n              color: colors.dark_teal_heading,\n              fixedrange: true,\n              title: {\n                text: selectedProfile,\n              },\n              type: selectedProfile === 'AAC' ? '' : 'log',\n            },\n            bargap: 0,\n            showlegend: false,\n          }} \n          config={config} \n          onClick={redirectToCellLineCompound}\n        />\n      </div>\n      <div className=\"notifications\">\n        {notifications.subset ? (\n          <p>\n            <sup>* </sup>\n            {notifications.subset}\n          </p>\n        ) : null}\n        {notifications.errorBars ? (\n          <p>\n            <sup>** </sup>\n            {notifications.errorBars}\n          </p>\n        ) : null}\n      </div>\n      <div className='download-buttons'>\n        <DownloadButton className='left' label='SVG' mode='svg' filename={title} plotId={plotId} />\n        <DownloadButton label='PNG' mode='png' filename={title} plotId={plotId} />\n      </div>\n    </div>\n  );\n};\n\nProfileCellLine.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      cell_line: PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n        tissue: PropTypes.shape({\n          id: PropTypes.number.isRequired,\n          name: PropTypes.string.isRequired,\n        }).isRequired,\n      }).isRequired,\n      dataset: PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n      }).isRequired,\n      tissue: PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n      }).isRequired,\n      profile: PropTypes.shape({\n        AAC: PropTypes.number,\n        IC50: PropTypes.number,\n      }).isRequired,\n    }),\n  ).isRequired,\n  profileOptions: PropTypes.arrayOf(\n    PropTypes.shape({\n      value: PropTypes.string,\n      label: PropTypes.string,\n    }),\n  ).isRequired,\n  datasetOptions: PropTypes.arrayOf(\n    PropTypes.shape({\n      value: PropTypes.string,\n      label: PropTypes.string,\n    }),\n  ).isRequired,\n  compound: PropTypes.string.isRequired,\n};\n\nexport default ProfileCellLine;\n","import React, { useState, useMemo, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Plot from 'react-plotly.js';\nimport Select from 'react-select';\nimport PropTypes from 'prop-types';\nimport colors from '../../styles/colors';\nimport DownloadButton from '../UtilComponents/DownloadButton';\nimport StyledSelectorContainer from '../../styles/Utils/StyledSelectorContainer';\nimport { formatExperimentPlotData, runPlotDataAnalysis } from '../../utils/plotProcessing';\n\n\n// plotly config\nconst config = {\n  responsive: true,\n  displayModeBar: false,\n};\n\n// reusable layout object\nconst baseLayout = {\n  autoresize: true,\n  height: 530,\n  margin: {\n    t: 20,\n    b: 200,\n    l: 65,\n    r: 0,\n  },\n  xaxis: {\n    color: colors.dark_teal_heading,\n    tickfont: {\n      size: 11,\n    },\n    fixedrange: true,\n    tickmode: 'array',\n    anchor: 'free',\n    position: 0.020,\n  },\n  yaxis: {\n    color: colors.dark_teal_heading,\n    fixedrange: true,\n  },\n  showlegend: false,\n};\n\n/**\n * Function that creates final data and layout for plotly\n * @param {Array} data - array of object that represent a subset of data to be rendered. Every object has name, value, deviation(optional) and label properties\n * @returns {Object} - returns object with plotData and layout properties\n */\nconst generateRenderData = (compound, data, dataset, profile) => {\n  const plotData = [];\n  const layout = {\n    ...baseLayout,\n    xaxis: {\n      ...baseLayout.xaxis,\n      tickvals: [],\n      ticktext: [],\n      // draws tick labels vertically if there are more than 5 otherwise labels are horizontal\n      tickangle: data.length > 5 ? -90 : 0,\n    },\n    yaxis: {\n      ...baseLayout.yaxis,\n      title: {\n        text: profile,\n      },\n      type: profile === 'AAC' ? '' : 'log',\n      autorange: true,\n    },\n  };\n  data.forEach((el, i) => {\n    const { value, name } = el;\n    const trace = {\n      type: 'box',\n      boxpoints: 'all',\n      jitter: 1,\n      pointpos: 0,\n      hoveron: 'boxes',\n      marker: {\n        color: i % 2 === 0 ? colors.blue : colors.green,\n        size: 2,\n      },\n      name: name,\n      x: name,\n      y: value,\n    };\n    layout.xaxis.tickvals.push(name);\n    layout.xaxis.ticktext.push(`<a href='${`/search?tissue=${name}&compound=${compound}`}' rel='noopener noreferrer'>${name}</a>`);\n    plotData.push(trace);\n  });\n  return { plotData, layout };\n};\n\n/**\n * Waterfall plot that shows cell line profiles (AAC or IC50) for different datasets\n *\n * @component\n * @example\n *\n * return (\n *   <ProfileTissue/>\n * )\n */\nconst ProfileTissue = (props) => {\n  const {\n    plotId, data, compound, profileOptions, datasetOptions, title\n  } = props;\n  const [selectedProfile, setSelectedProfile] = useState('AAC');\n  const [selectedDataset, setSelectedDataset] = useState('All');\n  const [{ plotData, layout }, setPlotData] = useState({ plotData: [], layout: {} });\n\n  const history = useHistory();\n\n  // preformats the data and creates selection options for datasets and profiles\n  const formattedData = useMemo(() => formatExperimentPlotData(data, 'tissue'), [data]);\n  // updates the plot every time user selects new profile or dataset\n  useEffect(() => {\n    const values = runPlotDataAnalysis(formattedData, selectedDataset, selectedProfile, 'tissue');\n    setPlotData(generateRenderData(compound, values, selectedDataset, selectedProfile));\n  }, [selectedProfile, selectedDataset, formattedData]);\n\n\n  /**\n   * Redirects to Tissue vs Compound page when a plot trace is clicked.\n   * @param {*} e onclick event\n   */\n  const redirectToTissueCompound = (e) => {\n    history.push(`/search?tissue=${e.points[0].fullData.name}&compound=${compound}`);\n  }\n\n  return (\n    <div className=\"plot\">\n      <StyledSelectorContainer>\n        <div className=\"selector-container\">\n          <div className='label'>Dataset:</div>\n          <Select\n            className='selector'\n            defaultValue={{ value: selectedDataset, label: selectedDataset }}\n            options={datasetOptions}\n            onChange={(e) => setSelectedDataset(e.value)}\n          />\n        </div>\n        <div className=\"selector-container\">\n          <div className='label'>Profile:</div>\n          <Select\n            className='selector'\n            defaultValue={{ value: selectedProfile, label: selectedProfile }}\n            options={profileOptions}\n            onChange={(e) => setSelectedProfile(e.value)}\n          />\n        </div>\n      </StyledSelectorContainer>\n      <h4>\n        {compound}\n        ,\n        {' '}\n        {selectedProfile}\n        {' '}\n        {selectedDataset !== 'All' ? `(${selectedDataset})` : null}\n      </h4>\n      <Plot \n        divId={plotId} \n        data={plotData} \n        layout={layout} \n        config={config} \n        onClick={redirectToTissueCompound}\n      />\n      <div className='download-buttons'>\n        <DownloadButton className='left' label='SVG' mode='svg' filename={title} plotId={plotId} />\n        <DownloadButton label='PNG' mode='png' filename={title} plotId={plotId} />\n      </div>\n    </div>\n  );\n};\n\nProfileTissue.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      cell_line: PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n        tissue: PropTypes.shape({\n          id: PropTypes.number.isRequired,\n          name: PropTypes.string.isRequired,\n        }).isRequired,\n      }).isRequired,\n      dataset: PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n      }).isRequired,\n      tissue: PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n      }).isRequired,\n      profile: PropTypes.shape({\n        AAC: PropTypes.number,\n        IC50: PropTypes.number,\n      }).isRequired,\n    }),\n  ).isRequired,\n  profileOptions: PropTypes.arrayOf(\n    PropTypes.shape({\n      value: PropTypes.string,\n      label: PropTypes.string,\n    }),\n  ).isRequired,\n  datasetOptions: PropTypes.arrayOf(\n    PropTypes.shape({\n      value: PropTypes.string,\n      label: PropTypes.string,\n    }),\n  ).isRequired,\n  compound: PropTypes.string.isRequired,\n};\n\nexport default ProfileTissue;\n","/* eslint-disable radix */\n/* eslint-disable no-nested-ternary */\nimport React, { useMemo } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\nimport { getSingleCompoundExperimentsQuery } from '../../../queries/experiments';\nimport dataset_colors from '../../../styles/dataset_colors';\nimport Loading from '../../UtilComponents/Loading';\nimport { generateOptions } from '../../../utils/plotProcessing';\nimport DatasetHorizontalPlot from '../../Plots/DatasetHorizontalPlot';\nimport ProfileCellLine from '../../Plots/ProfileCellLine';\nimport ProfileTissue from '../../Plots/ProfileTissue';\nimport PlotsWrapper from '../../../styles/PlotsWrapper';\n\n/**\n * A helper function that processes data from the API to be subsequently loaded it into\n * cell line and tissue dataset horizontal plots\n * @param {Array} experiments - list of experiments for a given drug returned by the API\n * @returns - array of two items. Elements of the array are a list of data points for tissue and cell line plots respectively\n * Each data point contains name, count and color properties\n * @example\n * [[{name: \"CTRPv2\", count: 25, color: \"#ccebc5\"}], ... ]\n */\nconst generateCountPlotData = (experiments) => {\n  const tissueObj = {};\n  const cellLineObj = {};\n  experiments.forEach((experiment) => {\n    if (cellLineObj[experiment.dataset.name]) {\n      cellLineObj[experiment.dataset.name].push(experiment.cell_line.id);\n    } else {\n      cellLineObj[experiment.dataset.name] = [experiment.cell_line.id];\n    }\n\n    if (tissueObj[experiment.dataset.name]) {\n      tissueObj[experiment.dataset.name].push(experiment.tissue.id);\n    } else {\n      tissueObj[experiment.dataset.name] = [experiment.tissue.id];\n    }\n  });\n  const tissueData = Object.entries(tissueObj).map((dataset, i) => ({\n    name: dataset[0],\n    count: [...new Set(dataset[1])].length,\n    color: dataset_colors[i],\n  }));\n  const cellLineData = Object.entries(cellLineObj).map((dataset, i) => ({\n    name: dataset[0],\n    count: [...new Set(dataset[1])].length,\n    color: dataset_colors[i],\n  }));\n\n  return [tissueData, cellLineData];\n};\n/**\n * Section that display plots for the individula compound page.\n *\n * @component\n * @example\n *\n * returns (\n *   <PlotSection/>\n * )\n */\nconst PlotSection = (props) => {\n  const { display, compound } = props;\n  const { id, name } = compound;\n\n  const { loading, error, data } = useQuery(getSingleCompoundExperimentsQuery, {\n    variables: { compoundId: id },\n  });\n\n  const experimentalData = data ? data.experiments : [];\n  // memoization of the plotData\n  const [tissuesData, cellLinesData] = useMemo(() => generateCountPlotData(experimentalData), [experimentalData]);\n  const [profileOptions, datasetOptions] = useMemo(() => generateOptions(experimentalData), [experimentalData]);\n\n  if (loading) {\n    return '';\n  }\n  if (error) {\n    return <p> Error! </p>;\n  }\n\n  return (\n    <React.Fragment>\n      {\n        display === 'barplots' ?\n          loading ? <Loading />\n          :\n          <PlotsWrapper>\n            <DatasetHorizontalPlot\n              plotId={`${name}CellLines`}\n              data={cellLinesData}\n              xaxis=\"# of cell lines\"\n              title={`Number of cell lines tested with ${name} (per dataset)`}\n            />\n            <DatasetHorizontalPlot\n              plotId={`${name}Tissues`}\n              data={tissuesData}\n              xaxis=\"# of tissues\"\n              title={`Number of tissues tested with ${name} (per dataset)`}\n            />\n          </PlotsWrapper>\n        :\n        ''\n      }\n      {\n        display === 'aacCells' ?\n          loading ? <Loading />\n          :\n          <PlotsWrapper single={true}>\n            <ProfileCellLine\n              plotId={`${name}CellLinesAAC`}\n              compound={name}\n              data={experimentalData}\n              profileOptions={profileOptions}\n              datasetOptions={datasetOptions}\n              title={`${name}: AAC`}\n            />\n          </PlotsWrapper>\n        :\n        ''\n      }\n      {\n        display === 'aacTissues' ?\n          loading ? <Loading />\n          :\n          <PlotsWrapper single={true}>\n            <ProfileTissue\n              plotId={`${name}TissuesAAC`}\n              compound={name}\n              data={experimentalData}\n              profileOptions={profileOptions}\n              datasetOptions={datasetOptions}\n              title={`${name}: AAC`}\n            />\n          </PlotsWrapper>\n        :\n        ''\n      }\n    </React.Fragment>\n  );\n};\n\nPlotSection.propTypes = {\n  compound: PropTypes.shape({\n    id: PropTypes.number,\n    name: PropTypes.string,\n  }).isRequired,\n};\n\nexport default PlotSection;\n","/**\n *\n * @param {Array} arr - array of string, takes the input to be converted to object usable by react-select library.\n * @returns {Array} - array of objects with value and label properties and removes __typename field added by apollo client\n */\nconst generateSelectOptions = (arr) => (\n    arr.filter((el) => el !== '__typename').map((el) => ({ value: el, label: el }))\n);\n\nexport default generateSelectOptions;\n","import React, { useState, useMemo, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Plot from 'react-plotly.js';\nimport Select from 'react-select';\nimport CustomSwitch from '../UtilComponents/CustomSwitch';\nimport PropTypes from 'prop-types';\nimport StyledSelectorContainer from '../../styles/Utils/StyledSelectorContainer';\nimport generateSelectOptions from '../../utils/generateSelectOptions';\nimport DownloadButton from '../UtilComponents/DownloadButton';\nimport { calculateMedian, calculateAbsoluteDeviation } from '../../utils/statistics';\nimport colors from '../../styles/colors';\n\n// plotly config\nconst config = {\n  responsive: true,\n  displayModeBar: false,\n};\n\n/**\n * A helper function that creates an array of values out of profile object\n * @param {Object} dataObj - profiles data object that has AAC and IC50 profiles for different datasets\n * @param {String} profile - a selected profile, can be AAC or IC50\n * @returns {Array} - returns array of numbers\n */\nconst retrieveProfiles = (dataObj, profile, dataset) => {\n  const output = [];\n  Object.keys(dataObj).forEach((datasetProfile) => {\n    // filters out null values\n    if (dataObj[datasetProfile][profile] === null) return;\n    // only populates output array if there is a matching dataset or dataset are acceptable\n    if (dataset === 'All' || dataset === datasetProfile) {\n      output.push(dataObj[datasetProfile][profile]);\n    }\n  });\n  return output;\n};\n\n/**\n * A helper function that formats raw experiment data to be subsequently processed be rendering functions\n * @param {Array} experiments - experiments data from the API call\n * @returns {Object} - returns an object with cell_names as keys. Every cell line has three subfields: id, name and profiles. Profiles is an object of datasets where each dataset has two fields, AAC and IC50\n * @example\n * return { '697': {id: 1, name: '697', profiles: {CCLE: { AAC:0.4732, IC50: 0.1278 }, ...}}, ...}\n */\nconst formatCellData = (experiments) => {\n  const cellObj = {};\n  experiments.forEach((experiment) => {\n    const { __typename, ...profile } = experiment.profile;\n    const { compound, dataset } = experiment;\n    if (!cellObj[compound.name]) {\n      cellObj[compound.name] = {\n        id: compound.id,\n        name: compound.name,\n        profiles: { [dataset.name]: profile },\n      };\n    } else {\n      cellObj[experiment.compound.name].profiles[experiment.dataset.name] = profile;\n    }\n  });\n  return cellObj;\n};\n\n/**\n *\n * @param {Array} data - experiments data from the API call\n * @returns {Array} - returns an array of profile and dataset options respectively that can be used by react-select\n * @example\n * return [[{value: 'CCLE', label: 'CCLE'}, ...],[...]]\n */\nconst generateOptions = (data) => {\n  if (!data.length) return [];\n  const profileOptions = Object.keys(data[0].profile);\n  const datasetOptions = ['All', ...new Set(data.map((el) => el.dataset.name))];\n  return [generateSelectOptions(profileOptions), generateSelectOptions(datasetOptions)];\n};\n\n/**\n * Helper function that creates data for the gap between low and high values for the plot\n * @param {Number} distance - sets how many empty bars should be in the gap\n * @returns {Array} - returns an array of objects with value, name and label properties\n */\nconst generateEmptySpace = (distance) => {\n  const output = [];\n  for (let i = 0; i < distance; i += 1) {\n    output.push({ value: 0, name: i, label: '' });\n  }\n  return output;\n};\n\n/**\n * Function that creates final data and layout for plotly\n * @param {Array} data - array of object that represent a subset of data to be rendered. Every object has name, value, deviation(optional) and label properties\n * @returns {Object} - returns object with plotData and layout properties\n */\nconst generateRenderData = (data, dataset) => {\n  const plotData = [];\n  const notifications = {\n    subset: data.length > 60 ? 'Plot represents the top and bottom 30 data points' : null,\n    errorBars: dataset === 'All' ? 'Error Bars represent the Median Absolute Deviation' : null,\n  };\n  data.forEach((el, i) => {\n    const {\n      name, value, deviation, label, id\n    } = el;\n    const trace = {\n      type: 'bar',\n      marker: {\n        color: i % 2 === 0 ? colors.blue : colors.green,\n      },\n      name,\n      label,\n      x: [`${name} compound`],\n      y: [value],\n    };\n    // skips hoverinfo for gap bars\n    if (!label) trace.hoverinfo = 'skip';\n    if (deviation) {\n      trace.error_y = {\n        type: 'data',\n        array: [deviation],\n        visible: true,\n      };\n    }\n    plotData.push(trace);\n  });\n  return { plotData, notifications };\n};\n\n/**\n * Function that calculates median, deviation values, sorts data and creates a subset that will be further rendered\n * @param {Object} data - data object that has cell lines and their dataset profiles in it\n * @param {String} dataset - selected dataset\n * @param {String} profile - selected profile\n * @returns {Object} - returns an array of objects (max length is 63) with value, deviation, name and label properties\n */\nconst runDataAnalysis = (data, dataset, profile) => {\n  // calculates median and deviation values and sort cell lines based on median\n  const calculatedData = [];\n  Object.values(data).forEach((el) => {\n    const profiles = retrieveProfiles(el.profiles, profile, dataset);\n    // updates calculated data only if there is at list one profile\n    if (profiles.length > 0) {\n      const value = calculateMedian(profiles);\n      const deviation = calculateMedian(calculateAbsoluteDeviation(profiles, value));\n      calculatedData.push({\n        value, deviation, name: el.name, label: el.name, id: el.id\n      });\n    }\n  });\n  calculatedData.sort((a, b) => b.value - a.value);\n  // returns calculatedData or a subset of first and last 30 items from calculated data along with some few empty datapoints to create a gap if there too many dataoints\n  return calculatedData.length > 60 ? [...calculatedData.slice(0, 30), ...generateEmptySpace(3), ...calculatedData.slice(calculatedData.length - 30, calculatedData.length)] : calculatedData;\n};\n\n/**\n * Waterfall plot that shows cell line profiles (AAC or IC50) for different datasets\n *\n * @component\n * @example\n *\n * return (\n *   <ProfileCompound/>\n * )\n */\nconst ProfileCompound = (props) => {\n  const {\n    plotId, data, cellLine, title\n  } = props;\n  const [selectedProfile, setSelectedProfile] = useState('AAC');\n  const [selectedDataset, setSelectedDataset] = useState('All');\n  const [zoomOut, setZoomOut] = useState(false);\n  const [{ plotData, notifications }, setPlotData] = useState({ plotData: [], layout: {}, notifications: { subset: null, errorBars: null } });\n  const [layoutVariables, setLayoutVariables] = useState({\n    width: 1500,\n    maxWidth: '800px',\n    overflowX: 'scroll',\n    xTickFontSize: 12,\n  });\n  \n  const history = useHistory();\n  \n  // preformats the data and creates selection options for datasets and profiles\n  const formattedData = useMemo(() => formatCellData(data), [data]);\n  const [profileOptions, datasetOptions] = useMemo(() => generateOptions(data), [data]);\n  // updates the plot every time user selects new profile or dataset\n  useEffect(() => {\n    const values = runDataAnalysis(formattedData, selectedDataset, selectedProfile);\n    setPlotData(generateRenderData(values, selectedDataset));\n  }, [selectedProfile, selectedDataset]);\n\n  useEffect(() => {\n    setLayoutVariables({\n      maxWidth: zoomOut ? '1000px' : '800px',\n      overflowX: zoomOut ? undefined : 'scroll',\n      width: zoomOut ? 800 : 1500,\n      xTickFontSize: zoomOut ? 9 : 12\n    });\n  }, [zoomOut]);\n\n  /**\n   * Redirects to Cell Line vs Compound page when a plot trace is clicked.\n   * @param {*} e onclick event\n   */\n  const redirectToCellLineCompound = (e) => {\n    history.push(`/search?cell_line=${cellLine}&compound=${e.points[0].fullData.name}`);\n  }\n\n  return (\n    <div className=\"plot\">\n      <StyledSelectorContainer>\n        <div className=\"selector-container\">\n          <div className='label'>Dataset:</div>\n          <Select\n            className='selector'\n            defaultValue={{ value: selectedDataset, label: selectedDataset }}\n            options={datasetOptions}\n            onChange={(e) => setSelectedDataset(e.value)}\n          />\n        </div>\n        <div className=\"selector-container\">\n          <div className='label'>Profile:</div>\n          <Select\n            className='selector'\n            defaultValue={{ value: selectedProfile, label: selectedProfile }}\n            options={profileOptions}\n            onChange={(e) => setSelectedProfile(e.value)}\n          />\n        </div>\n        <div className=\"selector-container\">\n          <div className='label'>Zoom:</div>\n          <CustomSwitch \n            checked={zoomOut}\n            onChange={(checked) => {setZoomOut(checked)}}\n            labelLeft='In'\n            labelRight='Out'\n          />\n        </div>\n      </StyledSelectorContainer>\n      <h4>\n        {cellLine}\n        ,\n        {' '}\n        {selectedProfile}\n        {' '}\n        {selectedDataset !== 'All' ? `(${selectedDataset})` : null}\n      </h4>\n      <div style={{height: '650px', maxWidth: layoutVariables.maxWidth, overflowX: layoutVariables.overflowX}}>\n        <Plot \n          divId={plotId} \n          data={plotData} \n          layout={{\n            autoresize: true,\n            height: 600,\n            width: layoutVariables.width,\n            margin: {\n              t: 20,\n              b: 200,\n              l: 65,\n              r: 0,\n            },\n            xaxis: {\n              color: colors.dark_teal_heading,\n              tickvals: plotData.map(trace => `${trace.name} compound`),\n              ticktext: plotData.map(trace => \n                `<a href='${`/search?cell_line=${cellLine}&compound=${trace.name}`}' rel=\"noopener noreferrer\">${trace.label}</a>`\n              ),\n              tickfont: {\n                size: layoutVariables.xTickFontSize,\n              },\n              fixedrange: true,\n              tickmode: 'array',\n            },\n            yaxis: {\n              color: colors.dark_teal_heading,\n              fixedrange: true,\n              title: {\n                text: selectedProfile,\n              },\n              type: selectedProfile === 'AAC' ? '' : 'log',\n            },\n            bargap: 0,\n            showlegend: false,\n          }} \n          config={config} \n          onClick={redirectToCellLineCompound}\n        />\n      </div>\n      <div className=\"notifications\">\n        {notifications.subset ? (\n          <p>\n            <sup>* </sup>\n            {notifications.subset}\n          </p>\n        ) : null}\n        {notifications.errorBars ? (\n          <p>\n            <sup>** </sup>\n            {notifications.errorBars}\n          </p>\n        ) : null}\n      </div>\n      <div className='download-buttons'>\n        <DownloadButton className='left' label='SVG' mode='svg' filename={title} plotId={plotId} />\n        <DownloadButton label='PNG' mode='png' filename={title} plotId={plotId} />\n      </div>\n    </div>\n  );\n};\n\nProfileCompound.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      compound: PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n      }).isRequired,\n      dataset: PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n      }).isRequired,\n      tissue: PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n      }).isRequired,\n      profile: PropTypes.shape({\n        AAC: PropTypes.number,\n        IC50: PropTypes.number,\n      }).isRequired,\n    }),\n  ).isRequired,\n  cellLine: PropTypes.string.isRequired,\n};\n\nexport default ProfileCompound;\n","/* eslint-disable radix */\n/* eslint-disable no-nested-ternary */\nimport React, { useEffect, useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\nimport { getSingleCompoundExperimentsQuery } from '../../../../queries/experiments';\nimport dataset_colors from '../../../../styles/dataset_colors';\nimport Loading from '../../../UtilComponents/Loading';\nimport ProfileCompound from '../../../Plots/ProfileCompound';\nimport Table from '../../../UtilComponents/Table/Table';\nimport { NotFoundContent } from '../../../UtilComponents/NotFoundPage';\nimport DownloadButton from '../../../UtilComponents/DownloadButton';\nimport { Link } from 'react-router-dom';\n\n/**\n * Format data for the cell Line summary table\n * @param {Array} data from experiment API for a given compound\n * @returns {Array} Object of cellLines, datasets, and tissues for the table\n */\nconst generateTableData = (data) => {\n    // collect data of datasets, tissues and number of experiments for each cell line\n    let tableData = { ready: false, cellLine: [], numCellLines: 0, numDataset: 0 };\n    if (data) {\n        let uniqueDatasets = [...new Set(data.map(item => item.dataset.id))];\n        let uniqueCellLines = [...new Set(data.map(item => item.cell_line.id))];\n        let cellLines = [];\n        for (let id of uniqueCellLines) {\n            let experiments = data.filter(item => item.cell_line.id === id);\n\n            let datasets = experiments.map(item => item.dataset);\n            let datasetIds = [...new Set(datasets.map(item => item.id))];\n            let datasetList = [];\n            for (let id of datasetIds) {\n                let found = datasets.find(item => item.id === id);\n                datasetList.push(found);\n            }\n            datasetList.sort((a, b) => a - b);\n\n            cellLines.push({\n                cellLine: experiments[0].cell_line.name,\n                dataset: datasetList.map(item => item.name).join(' '),\n                tissue: experiments[0].tissue,\n                num_experiments: experiments.length,\n                id: experiments[0].cell_line.id,\n                uid: experiments[0].cell_line.uid,\n                datasetList: datasetList\n            });\n        }\n        cellLines.sort((a, b) => b.num_experiments - a.num_experiments);\n        tableData.cellLine = cellLines;\n        tableData.numCellLines = uniqueCellLines.length;\n        tableData.numDataset = uniqueDatasets.length;\n        tableData.ready = true;\n    }\n    return tableData;\n};\n\n/**\n * Section that display Cell Line Summary table for the individual compound page.\n *\n * @component\n * @example\n *\n * returns (\n *   <CellLinesSummaryTable/>\n * )\n */\nconst CellLinesSummaryTable = (props) => {\n    const { compound } = props;\n    const [tableData, setTableData] = useState({ ready: false, cellLine: [], numCellLines: 0, numDataset: 0 });\n    const [csv, setCSV] = useState([]);\n    const [error, setError] = useState(false);\n\n    const CELL_SUMMARY_COLUMNS = [\n        {\n            Header: 'Cell Line',\n            accessor: 'cellLine',\n            Cell: (item) => (<Link to={`/cell_lines/${item.row.original.uid}`}>{item.value}</Link>),\n        },\n        {\n            Header: 'Tissue Type',\n            accessor: 'tissue',\n            Cell: (item) => (<Link to={`/tissues/${item.row.original.tissue.id}`}>{item.row.original.tissue.name}</Link>),\n        },\n        {\n            Header: 'Datasets',\n            accessor: 'dataset',\n            Cell: (item) => {\n                let datasets = item.cell.row.original.datasetList;\n                return (datasets.map((obj, i) => (\n                    <span key={i}>\n                        <a href={`/datasets/${obj.id}`}>{obj.name}</a>{i + 1 < datasets.length ? ', ' : ''}\n                    </span>)\n                ));\n            }\n        },\n        {\n            Header: 'Experiments',\n            accessor: 'num_experiments',\n            Cell: (item) => <a href={`/search?compound=${compound.name}&cell_line=${item.row.original.cellLine}`} target=\"_blank\" rel=\"noopener noreferrer\">{item.value}</a>\n        },\n    ];\n\n    const { loading, data: queryData, } = useQuery(getSingleCompoundExperimentsQuery, {\n        variables: { compoundId: compound.id },\n        onCompleted: (data) => {\n            let parsed = generateTableData(data.experiments);\n            setTableData(parsed);\n            setCSV(parsed.cellLine.map(item => ({\n                compoundId: compound.id,\n                compoundName: compound.name,\n                cellLineUID: item.uid,\n                cellLine: item.cellLine,\n                tissueId: item.tissue.id,\n                tissueName: item.tissue.name,\n                dataset: item.dataset,\n                numExperiments: item.num_experiments,\n            })));\n        },\n        onError: (err) => {\n            setError(true);\n        }\n    });\n    // load data from query into state\n    const [experiment, setExperiment] = useState({\n        data: {},\n        loaded: false,\n    });\n    // to set the state on the change of the data.\n    useEffect(() => {\n        if (queryData !== undefined) {\n            setExperiment({\n                data: queryData.experiments,\n                loaded: true,\n            });\n        }\n    }, [queryData]);\n    return (\n        <React.Fragment>\n            {\n                error && <p> Error! </p>\n            }\n            {\n                loading || !tableData.ready ?\n                    <Loading />\n                    :\n                    tableData.cellLine.length > 0 ?\n                        <React.Fragment>\n                            <h4>\n                                <p align=\"center\">\n                                    {`Cell lines tested with ${compound.name}`}\n                                </p>\n                            </h4>\n                            <p align=\"center\">\n                                {`${tableData.numCellLines} cell line(s) have been tested with this compound, using data from ${tableData.numDataset} dataset(s).`}\n                            </p>\n                            <div className='download-button'>\n                                <DownloadButton\n                                    label='CSV'\n                                    data={csv}\n                                    mode='csv'\n                                    filename={`${compound.name} - cellLines`}\n                                />\n                            </div>\n                            <Table columns={CELL_SUMMARY_COLUMNS} data={tableData.cellLine} />\n                        </React.Fragment>\n                        :\n                        <p align=\"center\">\n                            No cell lines have been tested with {compound.name}.\n                </p>\n            }\n        </React.Fragment>\n    );\n};\n\nCellLinesSummaryTable.propTypes = {\n    compound: PropTypes.shape({\n        id: PropTypes.number,\n        name: PropTypes.string,\n    }).isRequired,\n};\n\nexport default CellLinesSummaryTable;\n","/* eslint-disable radix */\n/* eslint-disable no-nested-ternary */\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useQuery } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\nimport { getSingleCompoundExperimentsQuery } from '../../../../queries/experiments';\nimport Loading from '../../../UtilComponents/Loading';\nimport PieChart from '../../../Plots/PieChart';\nimport Table from '../../../UtilComponents/Table/Table';\nimport DownloadButton from '../../../UtilComponents/DownloadButton';\nimport { Link } from 'react-router-dom';\n\n/**\n * Format data for the tissue summary table\n * @param {Array} data from experiment API for a given compound\n * @returns {Array} Object of formatted data for the table\n */\nconst formatTissueSummaryData = (data) => {\n    // collect data of datasets and number of experiments for each tissue\n    let tableData = { ready: false, tissue: [], numTissues: 0, numDataset: 0 };\n    if (data) {\n        let uniqueDatasets = [...new Set(data.map(item => item.dataset.id))];\n        let uniqueTissues = [...new Set(data.map(item => item.tissue.id))];\n        let tissues = [];\n        for(let id of uniqueTissues){\n            let experiments = data.filter(item => item.tissue.id === id);\n\n            let datasets = experiments.map(item => item.dataset);\n            let datasetIds = [...new Set(datasets.map(item => item.id))];\n            let datasetList = [];\n            for(let id of datasetIds){\n                let found = datasets.find(item => item.id === id);\n                datasetList.push(found);\n            }\n            datasetList.sort((a, b) => a - b);\n\n            tissues.push({\n                tissue: experiments[0].tissue.name,\n                dataset: datasetList.map(item => item.name).join(' '),\n                num_experiments: experiments.length,\n                id: experiments[0].tissue.id,\n                datasetList: datasetList\n            });\n        }\n        tissues.sort((a, b) => b.num_experiments - a.num_experiments);\n        tableData.tissue = tissues;\n        tableData.numTissues = uniqueTissues.length;\n        tableData.numDataset = uniqueDatasets.length;\n        tableData.ready = true;\n    }\n    return tableData;\n};\n\n/**\n * Section that displays Tissue Summary table for the individual compound page.\n *\n * @component\n * @example\n *\n * returns (\n *   <TissuesSummaryTable/>\n * )\n */\nconst TissuesSummaryTable = (props) => {\n    const { compound } = props;\n    const [tableData, setTableData] = useState({ ready: false, tissue: [], numTissues: 0, numDataset: 0 });\n    const [plotData, setPlotData] = useState([]);\n    const [csv, setCSV] = useState([]);\n    const [error, setError] = useState(false);\n\n    const history = useHistory();\n\n    const TISSUE_SUMMARY_COLUMNS = [\n        {\n            Header: 'Tissue',\n            accessor: 'tissue',\n            Cell: (item) => (<Link to={`/tissues/${item.row.original.id}`}>{item.value}</Link>),\n        },\n        {\n            Header: 'Datasets',\n            accessor: 'dataset',\n            Cell: (item) => {\n                let datasets = item.cell.row.original.datasetList;\n                return(datasets.map((obj, i) => (\n                    <span key={i}>\n                        <a href={`/datasets/${obj.id}`}>{obj.name}</a>{ i + 1 < datasets.length ? ', ' : ''}\n                    </span>)\n                ));\n            }\n        },\n        {\n            Header: 'Experiments',\n            accessor: 'num_experiments',\n            Cell: (item) => <a href={`/search?compound=${compound.name}&tissue=${item.cell.row.original.tissue}`} target=\"_blank\" rel=\"noopener noreferrer\">{item.value}</a>\n        },\n    ];\n\n    /**\n     * Redirects to Tissue vs Compound page when a plot trace is clicked.\n     * @param {*} e onclick event\n     */\n    const redirectToTissueCompound = (e) => {\n        history.push(`/search?tissue=${e.points[0].label}&compound=${compound.name}`);\n    }\n\n    const { loading } = useQuery(getSingleCompoundExperimentsQuery, {\n        variables: { compoundId: compound.id },\n        onCompleted: (data) => {\n            let parsed = formatTissueSummaryData(data.experiments);\n            setPlotData([{\n                values: parsed.tissue.map(item => item.num_experiments),\n                labels: parsed.tissue.map(item => item.tissue),\n                name: '',\n                hovertemplate: parsed.tissue.map(item => (\n                    `${item.tissue}<br />` + \n                    `${item.num_experiments} experiments<br />`\n                )),\n                hole: 0.55,\n                type: 'pie',\n              }]);\n            setTableData(parsed);\n            setCSV(parsed.tissue.map(item => ({\n                compoundId: compound.id,\n                compoundName: compound.name,\n                tissueId: item.id,\n                tissueName: item.tissue,\n                dataset: item.dataset,\n                numExperiments: item.num_experiments,\n            })));\n        },\n        onError: (err) => {\n            setError(true);\n        }\n    });\n\n    return (\n        <React.Fragment>\n            {\n                error && <p> Error! </p>\n            }\n            {\n                loading ?\n                <Loading />\n                :\n                tableData.tissue.length > 0 ?\n                <React.Fragment>\n                    <h4>\n                        <p align='center'>Relative percentage of experiments using {compound.name} per tissue</p>\n                    </h4>\n                    <PieChart \n                        id='tissueSummaryPieChart'\n                        data={plotData} \n                        height={600} \n                        onClick={redirectToTissueCompound} \n                    />\n                    <h4>\n                        <p align=\"center\">\n                            { `Tissues tested with ${compound.name}` }\n                        </p>\n                    </h4>\n                    <p align=\"center\">\n                        { `${tableData.numTissues} tissue(s) have been tested with this compound, using data from ${tableData.numDataset} dataset(s).` }\n                    </p>\n                    <div className='download-button'>\n                        <DownloadButton\n                            label='CSV'\n                            data={csv}\n                            mode='csv'\n                            filename={`${compound.name} - tissues`}\n                        />\n                    </div>\n                    <Table columns={TISSUE_SUMMARY_COLUMNS} data={tableData.tissue}/>\n                </React.Fragment>\n                :\n                <p align=\"center\">\n                    No tissues have been tested with {compound.name}.\n                </p>\n            }\n        </React.Fragment>\n    );\n};\n\nTissuesSummaryTable.propTypes = {\n    compound: PropTypes.shape({\n        id: PropTypes.number,\n        name: PropTypes.string,\n    }).isRequired,\n};\n\nexport default TissuesSummaryTable;\n","import React, { useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\nimport { getGeneCompoundTissueDatasetQuery } from '../../../../queries/gene_compound';\nimport Loading from '../../../UtilComponents/Loading';\nimport Table from '../../../UtilComponents/Table/Table';\nimport { Link } from 'react-router-dom';\nimport { convertMDataType } from '../../../../utils/convertMDataType';\nimport DownloadButton from '../../../UtilComponents/DownloadButton';\nimport Error from '../../../UtilComponents/Error';\nimport colors from '../../../../styles/colors';\n\nconst parseTableData = (data, compound) => {\n    let tableData = [];\n    if (typeof data !== 'undefined') {\n        let filtered = data.filter(item => !!item.pvalue_analytic);\n        tableData = filtered.map(item => ({\n            compound_id: compound.id,\n            compound: compound.name,\n            feature_type: convertMDataType(item.mDataType),\n            gene_id: item.gene.id,\n            gene: item.gene.annotation.symbol,\n            dataset_id: item.dataset.id,\n            dataset: item.dataset.name,\n            tissue_id: item.tissue.id,\n            tissue: item.tissue.name,\n            stat: item.sens_stat,\n            correlation: item.estimate,\n            pvalue_analytic: item.pvalue_analytic,\n            permutation_pvalue: item.pvalue_permutation,\n            significant_permutation: item.significant_permutation,\n        }));\n        tableData.sort((a, b) => a.pvalue - b.pvalue);\n    }\n    return tableData;\n};\n\nconst highlightRowsByCorrelation = (rowData) => {\n    let style = { backgroundColor: '' };\n    if(Math.sign(rowData.correlation) === 1) style.backgroundColor = colors.light_pink_highlight;\n    if(Math.sign(rowData.correlation) === -1) style.backgroundColor = colors.light_teal_highlight; \n    return style;\n};\n\nconst COLUMNS = [\n    {\n        Header: 'Feature Type',\n        accessor: 'feature_type',\n    },\n    {\n        Header: 'Gene',\n        accessor: 'gene',\n        Cell: (item) => <Link to={`/genes/${item.cell.row.original.gene_id}`}>{item.value}</Link>\n    },\n    {\n        Header: `Dataset`,\n        accessor: 'dataset',\n        Cell: (item) => <Link to={`/datasets/${item.cell.row.original.dataset_id}`}>{item.value}</Link>\n    },\n    {\n        Header: `Tissue`,\n        accessor: 'tissue',\n        Cell: (item) => <Link to={`/tissues/${item.cell.row.original.tissue_id}`}>{item.value}</Link>\n    },\n    {\n        Header: 'Sensitivity Metric',\n        accessor: 'stat',\n    },\n    {\n        Header: `Correlation`,\n        accessor: 'correlation',\n        Cell: (item) => item.value.toFixed(2),\n        sortType: 'basic',\n        sortMethod: (a, b) => parseFloat(a)-parseFloat(b)\n    },\n    {\n        Header: `Analytic P Value`,\n        accessor: 'pvalue_analytic',\n        Cell: (item) => item.value.toExponential(2),\n        sortType: 'basic',\n        sortMethod: (a, b) => parseFloat(a)-parseFloat(b)\n    },\n    {\n        Header: `Permutation P Value`,\n        accessor: 'permutation_pvalue',\n        Cell: (item) => item.value ? item.value.toExponential(2) : 'N/A',\n        sortType: 'basic',\n    },\n];\n\n\n/**\n * Section that displays Tissue Summary table for the individual compound page.\n *\n * @component\n * @example\n *\n * returns (\n *   <TissuesSummaryTable/>\n * )\n */\nconst MolecularFeaturesTable = (props) => {\n    const { compound } = props;\n    const [tableData, setTableData] = useState([]);\n    const [error, setError] = useState(false);\n\n    const { loading } = useQuery(getGeneCompoundTissueDatasetQuery, {\n        variables: { compoundId: compound.id },\n        onCompleted: (data) => {\n            setTableData(parseTableData(data.gene_compound_tissue_dataset, compound));\n        },\n        onError: (err) => {\n            console.log(err);\n            setError(true);\n        }\n    });\n\n    return (\n        <React.Fragment>\n            {\n                loading ? <Loading />\n                    :\n                    error ? <Error />\n                        :\n                        tableData.length > 0 ?\n                        <React.Fragment>\n                            <h4>\n                                <p align=\"center\">\n                                    {`Top molecular features associated with response to ${compound.name}`}\n                                </p>\n                            </h4>\n                            <div className='download-button'>\n                                <DownloadButton\n                                    label='CSV'\n                                    data={tableData}\n                                    mode='csv'\n                                    filename={`${compound.name} - top molecular features`}\n                                />\n                            </div>\n                            <Table \n                                columns={COLUMNS} \n                                data={tableData} \n                                defaultSort={[{id: 'correlation', desc: true}]}\n                                highlightRows={highlightRowsByCorrelation}\n                            />\n                        </React.Fragment>\n                            :\n                            <h6 align=\"center\">No molecular feature data is available for this compound.</h6>\n            }\n        </React.Fragment>\n    );\n};\n\nMolecularFeaturesTable.propTypes = {\n    compound: PropTypes.shape({\n        id: PropTypes.number,\n        name: PropTypes.string,\n    }).isRequired,\n};\n\nexport default MolecularFeaturesTable;\n","import React, { useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { getSingleCompoundTarget } from '../../../../queries/target';\nimport Loading from '../../../UtilComponents/Loading';\nimport Table from '../../../UtilComponents/Table/Table';\nimport Error from '../../../UtilComponents/Error';\nimport DownloadButton from '../../../UtilComponents/DownloadButton';\n\nconst parseTableData = (data) => {\n    let tableData = {\n        data: [],\n        ready: false,\n    };\n    if (typeof data !== 'undefined' && data.targets) {\n        tableData.data = data.targets.map(item => ({\n            compound: data.compound_name,\n            target: item.target_name,\n            gene_id: item.genes.map(el => el.id).join(', '),\n            gene_name: item.genes.map(el => el.name).join(', '),\n            gene_symbol: item.genes.map(el => el.annotation.symbol).join(', '),\n        }));\n        tableData.ready = true;\n    }\n\n    return tableData;\n}\n\nconst AnnotatedTargetsTable = (props) => {\n    const { compound } = props;\n\n    const columns = [\n        {\n            Header: 'Target',\n            accessor: 'target',\n        },\n        {\n            Header: 'Associated Gene',\n            accessor: 'gene_symbol',\n            Cell: (item) => {\n                if (item.value) {\n                    let symbols = item.value.split(',');\n                    let ids = item.row.original.gene_id.split(',');\n                    return (ids.map((id, i) => (\n                        <span key={i}>\n                            <a href={`/genes/${id}`} target='_blank' rel='noopener noreferrer'>{symbols[i]}</a>{ i + 1 < ids.length ? ', ' : ''}\n                        </span>)));\n                } else {\n                    return '';\n                }\n            }\n        },\n        {\n            Header: 'Gene ID',\n            accessor: 'gene_name',\n            Cell: (item) => {\n                if (item.value) {\n                    let ids = item.value.split(',');\n                    return (ids.map((id, i) => (\n                        <span key={i}>\n                            <a href={`http://useast.ensembl.org/Homo_sapiens/Gene/Summary?g=${id}`} target='_blank' rel='noopener noreferrer'>{id}</a>{ i + 1 < ids.length ? ', ' : ''}\n                        </span>)));\n                } else {\n                    return '';\n                }\n            }\n        }\n    ];\n\n    const [tableData, setTableData] = useState({\n        data: [],\n        ready: false,\n    });\n    const [error, setError] = useState(false);\n\n    const { loading } = useQuery(getSingleCompoundTarget, {\n        variables: { compoundId: compound.id },\n        onCompleted: (data) => {\n            setTableData(parseTableData(data.single_compound_target));\n        },\n        onError: (err) => {\n            console.log(err);\n            setError(true);\n        }\n    });\n\n    return (\n        <React.Fragment>\n            {\n                loading ? <Loading />\n                    :\n                    error ? <Error />\n                        :\n                        <React.Fragment>\n                            <h4>\n                                <p align=\"center\">\n                                    {`Annotated Targets for ${compound.name}`}\n                                </p>\n                            </h4>\n                            {\n                                tableData.data.length > 0 ?\n                                    tableData.ready &&\n                                    <React.Fragment>\n                                        <div className='download-button'>\n                                            <DownloadButton\n                                                label='CSV'\n                                                data={tableData.data}\n                                                mode='csv'\n                                                filename={`${compound.name} - genes`}\n                                            />\n                                        </div>\n                                        <Table columns={columns} data={tableData.data} />\n                                    </React.Fragment>\n                                    :\n                                    <p align=\"center\">\n                                        No targets found for {compound.name}\n                                    </p>\n                            }\n                        </React.Fragment>\n            }\n        </React.Fragment>\n    );\n}\n\nAnnotatedTargetsTable.propTypes = {\n    compound: PropTypes.shape({\n        id: PropTypes.number,\n        name: PropTypes.string,\n    }).isRequired\n}\n\nexport default AnnotatedTargetsTable;\n","/* eslint-disable radix */\n/* eslint-disable no-nested-ternary */\nimport React, { useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Element } from 'react-scroll';\nimport PropTypes from 'prop-types';\nimport Layout from '../../UtilComponents/Layout';\nimport { getCompoundQuery } from '../../../queries/compound';\nimport { NotFoundContent } from '../../UtilComponents/NotFoundPage';\nimport Table from '../../UtilComponents/Table/Table';\nimport PlotSection from './PlotSection';\nimport CellLinesSummaryTable from './Tables/CellLinesSummaryTable';\nimport TissuesSummaryTable from './Tables/TissuesSummaryTable';\nimport MolecularFeaturesTable from './Tables/MolecularFeaturesTable';\nimport AnnotatedTargetsTable from './Tables/AnnotatedTargetsTable';\nimport Loading from '../../UtilComponents/Loading';\nimport { StyledIndivPageTitle, StyledIndivPage, StyledSidebarList } from '../../../styles/IndivPageStyles';\nimport StyledWrapper from '../../../styles/utils';\n\n// different external links.\nconst PUBCHEM = 'https://pubchem.ncbi.nlm.nih.gov/compound/';\nconst DTC = 'https://drugtargetcommons.fimm.fi/search?txtSearchClient=';\nconst CHEMBL = 'https://www.ebi.ac.uk/chembl/compound_report_card/';\nconst REACTOME = 'https://reactome.org/content/detail/R-ALL-';\n\nconst SYNONYM_COLUMNS = [\n    {\n        Header: 'Sources',\n        accessor: 'source',\n        Cell: (item) => {\n            let datasets = item.cell.row.original.dataset;\n            return (datasets.map((obj, i) => (\n                obj.id\n                    ? (\n                        <span key={i}>\n                            <a href={`/datasets/${obj.id}`}>{obj.name}</a>{i + 1 < datasets.length ? ', ' : ''}\n                        </span>\n                    )\n                    : (\n                        <span key={i}>{obj.name}</span>\n                    )\n            )\n            ));\n        }\n    },\n    {\n        Header: 'Names Used',\n        accessor: 'name',\n    },\n];\n\nconst ANNOTATION_COLUMNS = [\n    {\n        Header: 'Database',\n        accessor: 'db',\n    },\n    {\n        Header: 'Identifier',\n        accessor: 'identifier',\n    },\n];\n\nconst SIDE_LINKS = [\n    { label: 'Annotations', name: 'synonyms' },\n    { label: 'Annotated Targets', name: 'targets' },\n    { label: 'Bar Plots', name: 'barplots' },\n    { label: 'AAC (Cell Lines)', name: 'aacCells' },\n    { label: 'AAC (Tissues)', name: 'aacTissues' },\n    { label: 'Cell Lines Summary', name: 'cellSummary' },\n    { label: 'Tissues Summary', name: 'tissueSummary' },\n    { label: 'Molecular Features', name: 'molFeature' },\n];\n\n/**\n * Format data for the synonyms table\n * @param {Array} data synonym data from the experiment API\n */\nconst formatSynonymData = (data) => {\n    if (data.synonyms) {\n        const returnObj = data.synonyms.filter(obj => { return obj.name !== \"\" });\n        if (!returnObj.find(obj => { return obj.dataset[0].name === \"Standardized name in PharmacoSet\" })) {\n            returnObj.push({ name: data.compound.name, dataset: [{ name: \"Standardized name in PharmacoSet\", id: '' }] });\n        }\n        return returnObj;\n    }\n    return null;\n};\n\n/**\n * Format data for the external ids annotation table\n * @param {Array} data annotation data from the compound API\n */\nconst formatAnnotationData = (data) => {\n    let annotationData = {\n        identifiers: [],\n        externalLinks: []\n    }\n\n    if (data) {\n        const { annotation } = data;\n        if (annotation.smiles && !(annotation.smiles.match(/na|null/i))) {\n            annotationData.identifiers.push({ db: 'SMILES', identifier: annotation.smiles, });\n        }\n        if (annotation.inchikey && !(annotation.inchikey.match(/na|null/i))) {\n            annotationData.identifiers.push({ db: 'InChiKey', identifier: annotation.inchikey, });\n        }\n        if (annotation.pubchem && !(annotation.pubchem.match(/na|null/i))) {\n            let pubchemIds = annotation.pubchem.split('///');\n            let pubchemLinks;\n            if (pubchemIds.length > 1) {\n                pubchemLinks = <span>\n                    {\n                        pubchemIds.map((item, i) => (\n                            <span key={i}>\n                                <a href={`${PUBCHEM}${item}`} target=\"_blank\" rel=\"noopener noreferrer\">{`Pubchem(${item})`}</a>{i < pubchemIds.length - 1 ? ', ' : ''}\n                            </span>\n                        ))\n                    }\n                </span>\n            } else {\n                pubchemLinks = <a href={`${PUBCHEM}${pubchemIds[0]}`} target=\"_blank\" rel=\"noopener noreferrer\">PubChem</a>\n            }\n            annotationData.externalLinks.push(\n                {\n                    db: pubchemLinks,\n                    identifier: <span>{\n                        pubchemIds.map((item, i) => (\n                            <span key={i}>\n                                {item}{i < pubchemIds.length - 1 ? ', ' : ''}\n                            </span>\n                        ))\n                    }</span>,\n                }\n            );\n        }\n        if (annotation.chembl && !(annotation.chembl.match(/na|null/i))) {\n            annotationData.externalLinks.push(\n                {\n                    db: <a href={`${CHEMBL}${annotation.chembl}`} target=\"_blank\" rel=\"noopener noreferrer\">ChEMBL</a>,\n                    identifier: annotation.chembl,\n                }\n            )\n            annotationData.externalLinks.push(\n                {\n                    db: <a href={`${DTC}${annotation.chembl}`} target=\"_blank\" rel=\"noopener noreferrer\">Drug Target Commons</a>,\n                    identifier: '',\n                }\n            )\n        }\n        if (annotation.reactome && !(annotation.reactome.match(/na|null/i))) {\n            annotationData.externalLinks.push(\n                {\n                    db: <a href={`${REACTOME}${annotation.reactome}`} target=\"_blank\" rel=\"noopener noreferrer\">Reactome</a>,\n                    identifier: annotation.reactome,\n                }\n            )\n        }\n    }\n    return annotationData;\n};\n\n/**\n * \n * @param {Object} compound \n * @param {Object} error \n * @param {string} display \n * @param {Object} createSideLink \n */\nconst renderComponent = (compound, error, display, createSideLink) => {\n    // return NotFoundContent component\n    if (error) {\n        return <NotFoundContent />\n    }\n\n    // if data is still loading return loading component.\n    if (!compound.loaded) {\n        return (\n            <Layout>\n                <StyledWrapper>\n                    <Loading />\n                </StyledWrapper>\n            </Layout>\n        )\n    }\n\n    return (\n        <Layout>\n            <StyledWrapper>\n                <StyledIndivPage className=\"indiv-compounds\">\n                    <div className='heading'>\n                        <StyledIndivPageTitle smalltxt={compound.data.compound.name.length > 30}>{compound.data.compound.name}</StyledIndivPageTitle>\n                        <span className='attributes'>\n                            <span>FDA Approval Status: </span>\n                            <span className='regular'>\n                                {compound.data.compound.annotation.fda_status}\n                            </span>\n                        </span>\n                    </div>\n                    <div className='wrapper'>\n                        <StyledSidebarList>\n                            {SIDE_LINKS.map((link, i) => createSideLink(link, i))}\n                        </StyledSidebarList>\n                        <div className=\"container\">\n                            <div className=\"content\">\n                                {\n                                    display === 'synonyms' &&\n                                    <React.Fragment>\n                                        <Element className=\"section\" name=\"synonyms\">\n                                            <div className='section-title'>Synonyms</div>\n                                            <Table\n                                                columns={SYNONYM_COLUMNS}\n                                                data={compound.synonymData}\n                                                disablePagination\n                                            />\n                                        </Element>\n                                        {\n                                            compound.annotationData.identifiers.length > 0 ?\n                                                <Element className=\"section\" name=\"external_ids\">\n                                                    <div className='section-title'>Identifiers</div>\n                                                    <Table\n                                                        columns={ANNOTATION_COLUMNS}\n                                                        data={compound.annotationData.identifiers}\n                                                        disablePagination\n                                                        showHeader={false}\n                                                    />\n                                                </Element>\n                                                :\n                                                ''\n                                        }\n                                        {\n                                            compound.annotationData.externalLinks.length > 0 ?\n                                                <Element className=\"section\" name=\"external_ids\">\n                                                    <div className='section-title'>External Links</div>\n                                                    <Table\n                                                        columns={ANNOTATION_COLUMNS}\n                                                        data={compound.annotationData.externalLinks}\n                                                        disablePagination\n                                                        showHeader={false}\n                                                    />\n                                                </Element>\n                                                :\n                                                ''\n                                        }\n                                    </React.Fragment>\n                                }\n                                {\n                                    display === 'targets' &&\n                                    <Element className=\"section\">\n                                        <AnnotatedTargetsTable compound={({ id: compound.data.compound.id, name: compound.data.compound.name })} />\n                                    </Element>\n                                }\n                                <Element>\n                                    <PlotSection\n                                        display={display}\n                                        compound={{\n                                            id: compound.data.compound.id,\n                                            name: compound.data.compound.name,\n                                        }}\n                                    />\n                                </Element>\n                                {\n                                    display === 'cellSummary' &&\n                                    <Element className=\"section\">\n                                        <div className='section-title'>Cell Line Summary</div>\n                                        <CellLinesSummaryTable compound={({ id: compound.data.compound.id, name: compound.data.compound.name })} />\n                                    </Element>\n                                }\n                                {\n                                    display === 'tissueSummary' &&\n                                    <Element className=\"section\">\n                                        <div className='section-title'>Tissue Summary</div>\n                                        <TissuesSummaryTable compound={({ id: compound.data.compound.id, name: compound.data.compound.name })} />\n                                    </Element>\n                                }\n                                {\n                                    display === 'molFeature' &&\n                                    <Element className=\"section\">\n                                        <MolecularFeaturesTable compound={({ id: compound.data.compound.id, name: compound.data.compound.name })} />\n                                    </Element>\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </StyledIndivPage>\n            </StyledWrapper>\n        </Layout>\n    );\n};\n\n/**\n * Parent component for the individual compound page.\n *\n * @component\n * @example\n *\n * return (\n *   <IndivCompounds/>\n * )\n */\nconst IndivCompounds = (props) => {\n    // parameter.\n    const {\n        match: { params },\n    } = props;\n\n    // load data from query into state\n    const [compoundData, setCompoundData] = useState({\n        data: {},\n        loaded: false,\n    });\n    // A section to display on the page\n    const [display, setDisplay] = useState('synonyms');\n\n    // query to get the data for the single compound.\n    const { error } = useQuery(getCompoundQuery, {\n        variables: {\n            compoundUID: params.id,\n            // compoundId: params.id.match(/^[0-9]+$/) ? parseInt(params.id) : undefined,\n            // compoundName: typeof params.id === 'string' ? params.id : undefined\n        },\n        fetchPolicy: \"no-cache\",\n        onCompleted: (data) => {\n            setCompoundData({\n                data: data.singleCompound,\n                synonymData: formatSynonymData(data.singleCompound),\n                annotationData: formatAnnotationData(data.singleCompound.compound),\n                loaded: true,\n            });\n        }\n    });\n\n    /**\n     *\n     * @param {String} link\n     */\n    const createSideLink = (link, i) => (\n        <li key={i} className={display === link.name ? 'selected' : undefined}>\n            <button type='button' onClick={() => setDisplay(link.name)}>\n                {link.label}\n            </button>\n        </li>\n    );\n\n    // render the component.\n    return renderComponent(compoundData, error, display, createSideLink);\n};\n\nIndivCompounds.propTypes = {\n    /**\n     * IndivCompounds' param id\n     */\n    match: PropTypes.shape({\n        params: PropTypes.shape({\n            id: PropTypes.string.isRequired,\n        }).isRequired,\n    }).isRequired,\n};\n\nexport default IndivCompounds;\n","import React, { useMemo } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\nimport { getSingleCellLineExperimentsQuery } from '../../../queries/experiments';\nimport dataset_colors from '../../../styles/dataset_colors';\nimport Loading from '../../UtilComponents/Loading';\nimport DatasetHorizontalPlot from '../../Plots/DatasetHorizontalPlot';\nimport { generateOptions } from '../../../utils/plotProcessing';\nimport ProfileCompound from '../../Plots/ProfileCompound';\nimport PlotsWrapper from '../../../styles/PlotsWrapper';\n\n/**\n * A helper function that processes data from the API to be subsequently loaded it into\n * compound horizontal plots\n * @param {Array} experiments - list of experiments for a given cell line returned by the API\n * @returns - array of items. Elements of the array are a list of data points for compound plots respectively\n * Each data point contains name, count and color properties\n * @example\n * [{name: \"GDSC1000\", count: 208, color: \"#08589e\"}, ... ]\n */\nconst generateCountPlotData = (experiments) => {\n    const compoundObj = {};\n    experiments.forEach((experiment) => {\n        if (compoundObj[experiment.dataset.name]) {\n            compoundObj[experiment.dataset.name].push(experiment.compound.id);\n        } else {\n            compoundObj[experiment.dataset.name] = [experiment.compound.id];\n        }\n    });\n    const compoundData = Object.entries(compoundObj).map((dataset, i) => ({\n        name: dataset[0],\n        count: [...new Set(dataset[1])].length,\n        color: dataset_colors[i],\n    }));\n    return [compoundData];\n};\n/**\n * Section that display plots for the individual cell Line page.\n *\n * @component\n * @example\n *\n * returns (\n *   <PlotSection/>\n * )\n */\nconst PlotSection = (props) =>{\n    const { display, cellLine } = props;\n    const { id, name } = cellLine;\n\n    const { loading, error, data } = useQuery(\n        getSingleCellLineExperimentsQuery,\n        {\n            variables: { cellLineId: id },\n        }\n    );\n\n    const experimentalData = data ? data.experiments : [];\n    // memoization of the plotData\n    const [compoundsData] = useMemo(() => generateCountPlotData(experimentalData), [experimentalData]);\n    const [profileOptions, datasetOptions] = useMemo(() => generateOptions(experimentalData), [experimentalData]);\n\n    if (error) {\n        return <p> Error! </p>;\n    }\n\n    return (\n        <React.Fragment>\n            {compoundsData.length || experimentalData.length? (\n                <React.Fragment>\n                    {\n                        display === 'barPlot' ?\n                            loading ? <Loading />\n                                :\n                                compoundsData.length?\n                                <PlotsWrapper single={true}>\n                                    <DatasetHorizontalPlot\n                                        plotId={`${name}Compounds`}\n                                        data={compoundsData}\n                                        xaxis=\"# of compounds\"\n                                        title={`Number of compounds tested with ${name} (per dataset)`}\n                                        logScale={true}\n                                    />\n                                </PlotsWrapper>\n                                    : <h6 align=\"center\">No data is available to plot this cell line.</h6>\n                            :\n                        display === 'aacCompounds' ?\n                            loading ? <Loading />\n                                :\n                                experimentalData.length?\n                                    <PlotsWrapper single={true}>\n                                    <ProfileCompound\n                                        plotId={`${name}CompoundsAAC`}\n                                        cellLine={name}\n                                        data={experimentalData}\n                                        profileOptions={profileOptions}\n                                        datasetOptions={datasetOptions}\n                                        title={`${name}: AAC`}\n                                    />\n                                </PlotsWrapper> :\n                                    <h6 align=\"center\">No data is available to plot this cell line.</h6>\n                            :\n                            ''\n                    }\n                </React.Fragment>\n            ) : (\n                display === 'barPlot' || display === 'aacCompounds'?\n                    loading ? <Loading /> :\n                        (\n                            <h6 align=\"center\">No data is available to plot this cell line.</h6>\n                        ):\n                    ''\n            )}\n        </React.Fragment>\n    );\n};\n\nPlotSection.propTypes = {\n    cellLine: PropTypes.shape({\n        id: PropTypes.number,\n        name: PropTypes.string,\n    }).isRequired,\n};\n\nexport default PlotSection;\n","import React, { useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { getSingleCellLineExperimentsQuery } from '../../../../queries/experiments';\nimport Loading from '../../../UtilComponents/Loading';\nimport Table from '../../../UtilComponents/Table/Table';\nimport DownloadButton from '../../../UtilComponents/DownloadButton';\n\n/**\n * Format data for the compound summary table\n * @param {Array} data compound summary data from the experiment API\n */\nconst generateTableData = (data) => {\n  let tableData = { ready: false, compound: [], numCompounds: 0, numDataset: 0 };\n  if (data) {\n    let uniqueCompounds = [...new Set(data.map(item => item.compound.id))];\n    let uniqueDatasets = [...new Set(data.map(item => item.dataset.id))];\n    let compounds = [];\n    for (let id of uniqueCompounds) {\n      let experiments = data.filter(item => item.compound.id === id);\n\n      let datasets = experiments.map(item => item.dataset);\n      let datasetIds = [...new Set(datasets.map(item => item.id))];\n      let datasetList = [];\n      for (let id of datasetIds) {\n        let found = datasets.find(item => item.id === id);\n        datasetList.push(found);\n      }\n      datasetList.sort((a, b) => a - b);\n\n      compounds.push({\n        compound: experiments[0].compound.name,\n        dataset: datasetList.map(item => item.name).join(' '),\n        num_experiments: experiments.length,\n        id: experiments[0].compound.id,\n        uid: experiments[0].compound.uid,\n        datasetList: datasetList\n      });\n    }\n    compounds.sort((a, b) => b.num_experiments - a.num_experiments);\n    tableData.compound = compounds;\n    tableData.numCompounds = uniqueCompounds.length;\n    tableData.numDataset = uniqueDatasets.length;\n    tableData.ready = true;\n  }\n  return tableData;\n};\n/**\n * Section that display compounds summary plots for the individual cell Line page.\n *\n * @component\n * @example\n *\n * returns (\n *   <CompoundsSummaryTable/>\n * )\n */\nconst CompoundsSummaryTable = (props) => {\n  const { cellLine } = props;\n  const [tableData, setTableData] = useState({ ready: false, compound: [], numCompounds: 0, numDataset: 0 });\n  const [csv, setCSV] = useState([]);\n  const [error, setError] = useState(false);\n\n  const COMPOUND_SUMMARY_COLUMNS = [\n    {\n      Header: 'Compounds',\n      accessor: 'compound',\n      Cell: (item) => (<Link to={`/compounds/${item.row.original.uid}`}>{item.value}</Link>),\n    },\n    {\n      Header: 'Datasets',\n      accessor: 'dataset',\n      Cell: (item) => {\n        const datasets = item.cell.row.original.datasetList;\n        return (datasets.map((obj, i) => (\n          <span key={i}>\n            <a href={`/datasets/${obj.id}`}>{obj.name}</a>\n            { i + 1 < datasets.length ? ', ' : ''}\n          </span>\n        )));\n      },\n    },\n    {\n      Header: 'Experiments',\n      accessor: 'num_experiments',\n      Cell: (item) => <a href={`/search?compound=${item.row.original.compound}&cell_line=${cellLine.name}`} target=\"_blank\" rel=\"noopener noreferrer\">{item.value}</a>\n    },\n  ];\n\n  const { loading, data: queryData, } = useQuery(getSingleCellLineExperimentsQuery, {\n    variables: { cellLineId: cellLine.id },\n    onCompleted: (data) => {\n      let parsed = generateTableData(data.experiments);\n      setTableData(parsed);\n      setCSV(parsed.compound.map(item => ({\n        cellLineId: cellLine.id,\n        cellLineName: cellLine.name,\n        compoundUID: item.uid,\n        compound: item.compound,\n        dataset: item.dataset,\n        numExperiments: item.num_experiments,\n      })));\n    },\n    onError: (err) => {\n      setError(true);\n    }\n  });\n\n  return (\n    <React.Fragment>\n      {\n        error && <p> Error! </p>\n      }\n      {\n        loading || !tableData.ready ?\n        <Loading />\n        :\n        tableData.compound.length ?\n        <React.Fragment>\n          <h4>\n            <p align=\"center\">\n              {`Compounds tested with ${cellLine.name}`}\n            </p>\n          </h4>\n          <p align=\"center\">\n            {`${tableData.numCompounds} compound(s) have been tested with this cell line, using data from ${tableData.numDataset} dataset(s).`}\n          </p>\n          {\n            tableData.compound.length &&\n            <React.Fragment>\n              <div className='download-button'>\n                <DownloadButton\n                  label='CSV'\n                  data={csv}\n                  mode='csv'\n                  filename={`${cellLine.name} - compounds`}\n                />\n              </div>\n              <Table columns={COMPOUND_SUMMARY_COLUMNS} data={tableData.compound} />\n            </React.Fragment>\n          }\n        </React.Fragment>\n        :\n        <h6 align=\"center\">\n            No data is available for compounds tested with {cellLine.name} cell line.\n        </h6>\n      }\n    </React.Fragment>\n  );\n};\n\nCompoundsSummaryTable.propTypes = {\n  cellLine: PropTypes.shape({\n    id: PropTypes.number,\n    name: PropTypes.string,\n  }).isRequired,\n};\n\nexport default CompoundsSummaryTable;\n","import { gql } from 'apollo-boost';\n\n/**\n * @param { number } cellLineId - takes the cellLine id or cellLine name as the argument to the query.\n * @returns - Query returns info of datasets id and names, molecular data type, and number of profiles\n * for the given cellLine id or name\n */\nconst getMolecularProfilingQuery = gql`\n  query getSingleMolCell($cellLineId: Int, $cellLineName: String) {\n    molecular_profiling(cellLineId: $cellLineId, cellLineName: $cellLineName) {\n      dataset {\n        id \n        name\n      }\n      mDataType\n      num_prof\n    }\n  }\n`;\n\nexport {\n  getMolecularProfilingQuery,\n};\n","import React, { useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\nimport { getMolecularProfilingQuery } from '../../../../queries/molecular_profiling';\nimport Table from '../../../UtilComponents/Table/Table';\nimport Loading from '../../../UtilComponents/Loading';\nimport { Link } from 'react-router-dom';\nimport { mDataTypeList } from '../../../../utils/convertMDataType';\n\n/**\n * Format data for Molecular Profiling Table\n * @param {Array} data molecular profiling data from the mol_cell API\n * @return List of datasets and the number of profiles for each molecular data types\n * available on the database for a given cellLine\n */\nconst generateTableData = (data) => {\n    let tableData = { ready: false, molProf: [] };\n    if (data && data.length > 0) {\n        // filter only the entries with mDataTypes of interest\n        let converted = data.map(item => ({\n            dataset: item.dataset,\n            mDataType: mDataTypeList[item.mDataType],\n            num_prof: item.num_prof\n        })).filter(item => typeof item.mDataType !== 'undefined');\n\n        // organize the entries by dataset\n        let datasets = [...new Set(converted.map(item => item.dataset.name))].sort((a, b) => a.localeCompare(b));\n        let datatypes = [...new Set(Object.values(mDataTypeList))];\n        datasets.forEach(dataset => {\n            let filtered = converted.filter(item => item.dataset.name === dataset)\n            let obj = {\n                id: filtered[0].dataset.id,\n                dataset_name: dataset,\n            };\n            datatypes.forEach(datatype => {\n                let mDataEntries = filtered.filter(item => item.mDataType === datatype); // filter all the datatype in the dataset by datatype name.\n                if(mDataEntries.length){\n                    obj[datatype.replace(' ', '_')] = mDataEntries.map(item => item.num_prof).reduce((a, b) => a + b, 0);\n                }else{\n                    obj[datatype.replace(' ', '_')] = '-'; // '-' if the molecular data type doesn't exist in the dataset\n                }\n            });\n            tableData.molProf.push(obj);\n        });\n        tableData.ready = true;\n        return tableData;\n    }\n}\n\n/**\n * Format columns tags data for dynamic molecular profiling table\n * @param {Array} data molecular profiling data from the mol_cell API\n * @return List of objects with headers and accessors\n * Cells of datasets are clickable and other columns change based on the availble mDataTypes on database\n */\nconst COLUMNS = () => {\n    const columns = [];\n    columns.push(\n        {\n            Header: 'Datasets',\n            accessor: 'dataset_name',\n            Cell: (row) => (<Link to={`/datasets/${row.row.original.id}`}>{row.value}</Link>),\n        }\n    );\n    let datatypes = [...new Set(Object.values(mDataTypeList))];\n    datatypes.forEach(datatype => {\n        columns.push({\n            Header: datatype,\n            accessor: datatype.replace(' ', '_')\n        });\n    });\n    return columns;\n}\n\n/**\n * A helper function that processes data from the API to be subsequently loaded into\n * Molecular Profiling Table component in Individual Cell Line page.\n * @param {Object} CellLine id and name\n * @returns (\n *   <MolecularProfilingTable/>\n * )\n */\nconst MolecularProfilingTable = (props) => {\n    const { cellLine } = props;\n    const [tableData, setTableData] = useState({ ready: false, compound: [], numCompounds: 0, numDataset: 0 });\n    const [error, setError] = useState(false);\n\n    const { loading } = useQuery(getMolecularProfilingQuery, {\n        variables: { cellLineId: cellLine.id },\n        onCompleted: (data) => {\n            let parsed = generateTableData(data.molecular_profiling);\n            setTableData(parsed);\n        },\n        onError: (err) => {\n            setError(true);\n        }\n    });\n\n    return (\n        <React.Fragment>\n            {\n                error && <p>An error occurred</p>\n            }\n            {\n                loading || !tableData.ready ?\n                    <Loading />\n                    :\n                    tableData.molProf.length > 0 ?\n                        <React.Fragment>\n                            <h4>\n                                <p align=\"center\">\n                                    {`Available Molecular Profiling in PharmacoGx`}\n                                </p>\n                            </h4>\n                            <p align=\"center\">\n                                {`# of profiles of each type per dataset`}\n                            </p>\n                            {\n                                tableData.molProf.length > 0 &&\n                                <Table columns={COLUMNS()} data={tableData.molProf} center={true} />\n                            }\n                        </React.Fragment>\n                        :\n                        <h6 align=\"center\">\n                            No molecular profiling data with {cellLine.name} is available in PharmacoGx.\n                </h6>\n            }\n        </React.Fragment>\n    );\n}\n\nMolecularProfilingTable.propTypes = {\n    cellLine: PropTypes.shape({\n        id: PropTypes.number,\n        name: PropTypes.string,\n    }).isRequired\n}\n\nexport default MolecularProfilingTable;\n","/* eslint-disable radix */\n/* eslint-disable no-nested-ternary */\nimport React, { useState, useEffect } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Element } from 'react-scroll';\nimport PropTypes from 'prop-types';\nimport Layout from '../../UtilComponents/Layout';\nimport { getCellLineQuery } from '../../../queries/cell';\nimport { NotFoundContent } from '../../UtilComponents/NotFoundPage';\nimport Table from '../../UtilComponents/Table/Table';\nimport Loading from '../../UtilComponents/Loading';\nimport PlotSection from './PlotSection';\nimport CompoundsSummaryTable from './Tables/CompoundsSummaryTable';\nimport MolecularProfilingTable from './Tables/MolecularProfilingTable';\nimport { StyledIndivPage, StyledSidebarList } from '../../../styles/IndivPageStyles';\nimport StyledWrapper from '../../../styles/utils';\n\nconst SYNONYM_COLUMNS = [\n  {\n    Header: 'Sources',\n    accessor: 'sources',\n    Cell: (item) => {\n      let datasets = item.cell.row.original.dataset;\n      return (datasets.map((obj, i) => (\n        obj.id ? (\n          <span key={i}>\n            <a href={`/datasets/${obj.id}`}>{obj.name}</a>{i + 1 < datasets.length ? ', ' : ''}\n          </span>\n        ) :\n          (<span key={i}>{obj.name}</span>)\n      )\n      ));\n    }\n  },\n  {\n    Header: 'Names Used',\n    accessor: 'name',\n  },\n];\n\nconst SIDE_LINKS = [\n  { label: 'Annotations', name: 'data' },\n  { label: 'Bar Plot', name: 'barPlot' },\n  { label: 'AAC (Compounds)', name: 'aacCompounds' },\n  { label: 'Compounds Summary', name: 'compoundsSummary' },\n  { label: 'Molecular Profiling', name: 'molecularProfiling' }\n];\n\n/**\n * Format data for the synonyms table\n * @param {Array} data synonym data from the cell line API\n */\nconst formatSynonymData = (data) => {\n  if (data.synonyms) {\n    const returnObj = data.synonyms.filter(obj => { return obj.name !== \"\" });\n    \n    if (returnObj.filter(obj => { return obj.dataset[0].name === \"Standardized name in PharmacoSet\" }).length === 0) {\n      returnObj.push({ name: data.name, dataset: [{ name: \"Standardized name in PharmacoSet\", id: '' }] });\n    }\n\n    return returnObj;\n  }\n  return null;\n};\n\n/**\n * Format data for the disease(s) - extract NCIT\n * @param {Array} data diseases data from the cell line API\n */\nconst formatDiseaseData = (data) => {\n  if (data) {\n    const ncit_path =\n      'https://ncit.nci.nih.gov/ncitbrowser/ConceptReport.jsp?dictionary=NCI%20Thesaurus&code=';\n    const ordo_path = 'https://www.ebi.ac.uk/ols/ontologies/ordo/terms?iri=http://www.orpha.net/ORDO/';\n    return data.map((x) =>\n      x\n        ? {\n          key: x.split('; ')[1],\n          name: x.split('; ')[0] === 'NCIt' ?\n            x.split('; ')[0] + ': ' + x.split('; ')[2] + ' (Code ' + x.split('; ')[1] + ')' :\n            x.split('; ')[0] + ': ' + x.split('; ')[2] + ' (ORPHA:' + x.split('; ')[1].split('_')[1] + ')',\n          source: x.split('; ')[0] === 'NCIt' ? ncit_path + x.split('; ')[1] : ordo_path + x.split('; ')[1],\n        }\n        : {\n          key: null,\n          name: 'N/A',\n          source: null,\n        }\n    );\n  }\n  return null;\n};\n\n/**\n * Format data for the link(s) - extract NCIT\n * @param {Array} data link data from the cell line API\n */\nconst formatLinkData = (data) => {\n  if (data) {\n    const cellosaurus_path = 'https://www.cellosaurus.org/';\n    return {\n      key: data,\n      path: cellosaurus_path + data,\n      source: 'Cellosaurus',\n    };\n  }\n  return null;\n};\n\n/**\n * Parent component for the individual cell line page.\n *\n * @component\n * @example\n *\n * return (\n *   <IndivCellLines/>\n * )\n */\nconst IndivCellLines = (props) => {\n  // parameter.\n  const {\n    match: { params },\n    location: { pathname }\n  } = props;\n\n  // query to get the data for the single cell line.\n  const { loading, error, data: queryData } = useQuery(getCellLineQuery, {\n    variables: {\n      cellUID: pathname.split('/cell_lines/').pop(),\n      cellId: params.id.match(/^[0-9]+$/) ? parseInt(params.id) : undefined,\n      cellName: typeof pathname.split('/cell_lines/').pop() === 'string' ? pathname.split('/cell_lines/').pop() : undefined\n    },\n  });\n\n  // load data from query into state\n  const [cellLine, setCellLine] = useState({\n    data: {},\n    loaded: false,\n  });\n  // A section to display on the page\n  const [display, setDisplay] = useState('data');\n\n  // to set the state on the change of the data.\n  useEffect(() => {\n    if (queryData !== undefined) {\n      setCellLine({\n        data: queryData.cell_line,\n        loaded: true,\n      });\n    }\n  }, [queryData]);\n\n  // destructuring the cellLine object.\n  const { data } = cellLine;\n\n  /**\n   * @param {String} link\n   */\n  const createSideLink = (link, i) => (\n    <li key={i} className={display === link.name ? 'selected' : undefined}>\n      <button type='button' onClick={() => setDisplay(link.name)}>\n        {link.label}\n      </button>\n    </li>\n  );\n\n  // formatted data of diseases and links\n  const synonymData = React.useMemo(() => formatSynonymData(data), [data]);\n  const diseaseData = React.useMemo(() => formatDiseaseData(data.diseases), [data.diseases]);\n  const linkData = React.useMemo(() => formatLinkData(data.accession_id), [data.accession_id]);\n  return (cellLine.loaded ? (\n    <Layout page={data.name}>\n      <StyledWrapper>\n        {loading ? (<p>Loading...</p>)\n          : (error ? (<NotFoundContent />)\n            : (\n              <StyledIndivPage className=\"indiv-cellLines\">\n                <div className='heading'>\n                  <span className='title'>{data.name}</span>\n                  <span className='attributes'>\n                    Tissue Type:\n                        <span className='value highlight'>\n                      {\n                        data.tissue.name === 'NA' \n                        ? 'Not Available' \n                        : <a href={`/tissues/${data.tissue.id}`}>{data.tissue.name}</a>\n                      }\n                    </span>\n                  </span>\n                </div>\n                <div className='wrapper'>\n                  <StyledSidebarList>\n                    {SIDE_LINKS.map((link, i) => createSideLink(link, i))}\n                  </StyledSidebarList>\n                  <div className=\"container\">\n                    <div className=\"content\">\n                      {\n                        display === 'data' &&\n                        <React.Fragment>\n                          <Element className=\"section\" name=\"synonyms\">\n                            <div className='section-title'>Synonyms</div>\n                            {\n                              synonymData ?\n                                <Table columns={SYNONYM_COLUMNS} data={synonymData} disablePagination={true} />\n                                :\n                                <div className=\"text\">N/A</div>\n                            }\n                          </Element>\n                          <Element className=\"section\" name=\"disease(s)\">\n                            <div className='section-title'>Disease(s)</div>\n                            <div className=\"text\">\n                              {diseaseData ? diseaseData.map((x, i) =>\n                                <span key={i}>\n                                  <a key={x.key} target=\"_blank\" href={x.source}>{x.name}</a>\n                                  {i + 1 < diseaseData.length ? <br /> : ''}\n                                </span>\n                              ) : 'N/A'}\n                            </div>\n                          </Element>\n                          <Element className=\"section\" name=\"link(s)\">\n                            <div className='section-title'>Link(s)</div>\n                            <div className=\"text\">\n                              {linkData ? (<a key={linkData.key} target=\"_blank\" href={linkData.path}>{linkData.source}</a>) : 'N/A'}\n                            </div>\n                          </Element>\n                        </React.Fragment>\n                      }\n                      {\n                        <Element>\n                          <PlotSection\n                            display={display}\n                            cellLine={({ id: data.id, name: data.name })}\n                          />\n                        </Element>\n                      }\n                      {\n                        display === 'compoundsSummary' &&\n                        <Element className=\"section\">\n                          <CompoundsSummaryTable cellLine={({ id: data.id, name: data.name, display })} />\n                        </Element>\n                      }\n                      {\n                        display === 'molecularProfiling' &&\n                        <Element className=\"section\">\n                          <MolecularProfilingTable cellLine={({ id: data.id, name: data.name })} />\n                        </Element>\n                      }\n                    </div>\n                  </div>\n                </div>\n              </StyledIndivPage>\n            ))}\n      </StyledWrapper>\n    </Layout>\n  ) : <Loading />);\n};\n\nIndivCellLines.propTypes = {\n  /**\n   * IndivCellLines' param id\n   */\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default IndivCellLines;\n","/* eslint-disable radix */\n/* eslint-disable no-nested-ternary */\nimport React, { useMemo } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\nimport { getSingleTissueExperimentsQuery } from '../../../queries/experiments';\nimport dataset_colors from '../../../styles/dataset_colors';\nimport Loading from '../../UtilComponents/Loading';\nimport Error from '../../UtilComponents/Error';\nimport DatasetHorizontalPlot from '../../Plots/DatasetHorizontalPlot';\nimport PlotsWrapper from '../../../styles/PlotsWrapper';\n\n/**\n * A helper function that processes data from the API to be subsequently loaded it into\n * cell line and compound dataset horizontal plots\n * @param {Array} experiments - list of experiments for a given tissue returned by the API\n * @returns - array of two items. Elements of the array are a list of data points for compound and cell line plots respectively\n * Each data point contains name, count and color properties\n * @example\n * [[{name: \"CTRPv2\", count: 25, color: \"#ccebc5\"}], ... ]\n */\nconst generateCountPlotData = (experiments) => {\n    const compoundObj = {};\n    const cellLineObj = {};\n    experiments.forEach((experiment) => {\n        if (cellLineObj[experiment.dataset.name]) {\n            cellLineObj[experiment.dataset.name].push(experiment.cell_line.id);\n        } else {\n            cellLineObj[experiment.dataset.name] = [experiment.cell_line.id];\n        }\n\n        if (compoundObj[experiment.dataset.name]) {\n            compoundObj[experiment.dataset.name].push(experiment.compound.id);\n        } else {\n            compoundObj[experiment.dataset.name] = [experiment.compound.id];\n        }\n    });\n    const compoundData = Object.entries(compoundObj).map((dataset, i) => ({\n        name: dataset[0],\n        count: [...new Set(dataset[1])].length,\n        color: dataset_colors[i],\n    }));\n    const cellLineData = Object.entries(cellLineObj).map((dataset, i) => ({\n        name: dataset[0],\n        count: [...new Set(dataset[1])].length,\n        color: dataset_colors[i],\n    }));\n    return [compoundData, cellLineData];\n};\n/**\n * Section that display plots for the individual tissue page.\n *\n * @component\n * @example\n *\n * returns (\n *   <PlotSection/>\n * )\n */\nconst PlotSection = (props) => {\n    const { tissue } = props;\n    const { id, name } = tissue;\n\n    const { loading, error, data } = useQuery(getSingleTissueExperimentsQuery, {\n        variables: { tissueId: id },\n    });\n    const tissuesData = data ? data.experiments : [];\n    const [compoundsData, cellLinesData] = useMemo(() => generateCountPlotData(tissuesData), [tissuesData]);\n\n    return (\n        <>\n            {\n                loading ? <Loading />\n                :\n                error ? <Error />\n                :\n                <PlotsWrapper>\n                    <DatasetHorizontalPlot\n                        plotId={`${name}CellLines`}\n                        data={cellLinesData}\n                        xaxis=\"# of cell lines\"\n                        title={`Number of cell lines of ${name\n                            .replaceAll(/_/g, ' ')\n                            .replace(/([A-Z][a-z])/g, ' $1')} (per dataset)`}\n                    />\n                    <DatasetHorizontalPlot\n                        plotId={`${name}Compounds`}\n                        data={compoundsData}\n                        xaxis=\"# of compounds\"\n                        title={`Number of compounds tested with ${name\n                            .replaceAll(/_/g, ' ')\n                            .replace(\n                                /([A-Z][a-z])/g,\n                                ' $1'\n                            )} cell lines (per dataset)`}\n                        logScale={true}\n                    />\n                </PlotsWrapper>\n            }\n        </>\n    );\n};\n\nPlotSection.propTypes = {\n    tissue: PropTypes.shape({\n        id: PropTypes.number,\n        name: PropTypes.string,\n    }).isRequired,\n};\n\nexport default PlotSection;\n","/* eslint-disable radix */\n/* eslint-disable no-nested-ternary */\nimport React, { useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\nimport { getSingleTissueCellLinesQuery } from '../../../../queries/experiments';\nimport Loading from '../../../UtilComponents/Loading';\nimport Error from '../../../UtilComponents/Error';\nimport Table from '../../../UtilComponents/Table/Table';\nimport DownloadButton from '../../../UtilComponents/DownloadButton';\n\nconst CELL_LINE_SUMMARY_COLUMNS = [\n    {\n        Header: <div align=\"center\">Cell lines</div>,\n        accessor: 'cellLine',\n        center: true,\n        Cell: (item) => <a href={`/cell_lines/${item.cell.row.original.uid}`}>{item.value}</a>\n    },\n];\n\n/**\n * Collect data for the cell line summary table\n * @param {Array} data cell line summary data from the experiment API\n */\nconst generateTableData = (tissue, data) => {\n    let cellLines = [];\n    if (data) {\n        let ids = [...new Set(data.experiments.map(item => item.cell_line.id))];\n        for (let id of ids) {\n            cellLines.push(data.experiments.find(item => item.cell_line.id === id));\n        }\n        cellLines = cellLines.map(item => ({\n            tissueId: tissue.id,\n            tissueName: tissue.name,\n            cellLine: item.cell_line.name,\n            uid: item.cell_line.uid,\n            id: item.cell_line.id\n        }));\n    }\n    return cellLines;\n};\n\nconst CellLineSummaryTable = (props) => {\n    const { tissue } = props;\n    const [cellLines, setCellLines] = useState([]);\n    const [error, setError] = useState(false);\n\n    const { loading } = useQuery(getSingleTissueCellLinesQuery, {\n        variables: { tissueId: tissue.id },\n        fetchPolicy: \"network-only\",\n        onCompleted: (data) => {\n            setCellLines(generateTableData(tissue, data));\n        },\n        onError: () => {\n            setError(true);\n        }\n    });\n\n    return (\n        <React.Fragment>\n            {\n                loading ? <Loading />\n                    :\n                    error ? <Error />\n                        :\n                        <React.Fragment>\n                            <h4>\n                                <p align=\"center\">\n                                    {`Cell lines of ${tissue.name} tissue type`}\n                                </p>\n                            </h4>\n                            <p align=\"center\">\n                                {`${cellLines.length} cell line(s) of this tissue type are currently recorded in database.`}\n                            </p>\n                            <div className='download-button'>\n                                <DownloadButton label='CSV' data={cellLines} mode='csv' filename={`${tissue.name} - cell lines`} />\n                            </div>\n                            <Table columns={CELL_LINE_SUMMARY_COLUMNS} data={cellLines} />\n                        </React.Fragment>\n            }\n        </React.Fragment>\n    );\n}\n\nCellLineSummaryTable.propTypes = {\n    tissue: PropTypes.shape({\n        id: PropTypes.number,\n        name: PropTypes.string,\n    }).isRequired,\n};\n\nexport default CellLineSummaryTable;\n","/* eslint-disable radix */\n/* eslint-disable no-nested-ternary */\nimport React, { useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\nimport { getSingleTissueCompoundsQuery } from '../../../../queries/experiments';\nimport Loading from '../../../UtilComponents/Loading';\nimport Error from '../../../UtilComponents/Error';\nimport Table from '../../../UtilComponents/Table/Table';\nimport DownloadButton from '../../../UtilComponents/DownloadButton';\n\n/**\n * Collect data for the compound summary table\n * @param {Array} data compound summary data from the experiment API\n */\nconst generateTableData = (data) => {\n    let tableData = { ready: false, compound: [], numCompounds: 0, numDataset: 0 };\n    if (data) {\n        let uniqueCompounds = [...new Set(data.map(item => item.compound.id))];\n        let uniqueDatasets = [...new Set(data.map(item => item.dataset.id))];\n        let compounds = [];\n        for (let id of uniqueCompounds) {\n            let experiments = data.filter(item => item.compound.id === id);\n\n            let datasets = experiments.map(item => item.dataset);\n            let datasetIds = [...new Set(datasets.map(item => item.id))];\n            let datasetObj = [];\n            for (let id of datasetIds) {\n                let found = datasets.find(item => item.id === id);\n                datasetObj.push(found);\n            }\n            datasetObj.sort((a, b) => a - b);\n\n            compounds.push({\n                compound: experiments[0].compound.name,\n                dataset: datasetObj.map(item => item.name).join(' '),\n                num_experiments: experiments.length,\n                id: experiments[0].compound.id,\n                uid: experiments[0].compound.uid,\n                datasetObj: datasetObj\n            });\n        }\n        compounds.sort((a, b) => b.num_experiments - a.num_experiments);\n        tableData.compound = compounds;\n        tableData.numCompounds = uniqueCompounds.length;\n        tableData.numDataset = uniqueDatasets.length;\n        tableData.ready = true;\n    }\n    return tableData;\n};\n\nconst DrugSummaryTable = (props) => {\n    const { tissue } = props;\n    const [tableData, setTableData] = useState({ ready: false, compound: [], numCompounds: 0, numDataset: 0 });\n    const [csv, setCSV] = useState([]);\n    const [error, setError] = useState(false);\n\n    const DRUG_SUMMARY_COLUMNS = [\n        {\n            Header: 'Compounds',\n            accessor: 'compound',\n            Cell: (item) => <a href={`/compounds/${item.cell.row.original.uid}`}>{item.value}</a>\n        },\n        {\n            Header: 'Datasets',\n            accessor: 'dataset',\n            Cell: (item) => {\n                let datasets = item.cell.row.original.datasetObj;\n                return (datasets.map((obj, i) => (\n                        <span key={i}>\n                    <a href={`/datasets/${obj.id}`}>{obj.name}</a>{i + 1 < datasets.length ? ', ' : ''}\n                </span>\n                    )\n                ));\n            }\n        },\n        {\n            Header: 'Experiments',\n            accessor: 'num_experiments',\n            Cell: (item) => <a href={`/search?compound=${item.cell.row.original.compound}&tissue=${tissue.name}`} target=\"_blank\" rel=\"noopener noreferrer\">{item.value}</a>\n        },\n    ];\n\n    const { loading } = useQuery(getSingleTissueCompoundsQuery, {\n        variables: { tissueId: tissue.id },\n        // fetchPolicy: \"network-only\",\n        onCompleted: (data) => {\n            let parsed = generateTableData(data.experiments);\n            setTableData(parsed);\n            setCSV(parsed.compound.map(item => ({\n                tissueId: tissue.id,\n                tissueName: tissue.name,\n                compound: item.compound,\n                compoundUID: item.uid,\n                dataset: item.dataset,\n                numExperiments: item.num_experiments,\n            })));\n        },\n        onError: () => {\n            setError(true);\n        }\n    });\n\n    return (\n        <React.Fragment>\n            {\n                loading || !tableData.ready ? <Loading />\n                    :\n                    error ? <Error />\n                        :\n                        <React.Fragment>\n                            <h4>\n                                <p align=\"center\">\n                                    {`Compounds tested with ${tissue.name}`}\n                                </p>\n                            </h4>\n                            <p align=\"center\">\n                                {`${tableData.numCompounds} compounds have been tested with this tissue, using data from ${tableData.numDataset} dataset(s).`}\n                            </p>\n                            <div className='download-button'>\n                                <DownloadButton\n                                    label='CSV'\n                                    data={csv}\n                                    mode='csv'\n                                    filename={`${tissue.name} - compounds`}\n                                />\n                            </div>\n                            <Table columns={DRUG_SUMMARY_COLUMNS} data={tableData.compound} />\n                        </React.Fragment>\n            }\n        </React.Fragment>\n    );\n}\n\nDrugSummaryTable.propTypes = {\n    tissue: PropTypes.shape({\n        id: PropTypes.number,\n        name: PropTypes.string,\n    }).isRequired,\n};\n\nexport default DrugSummaryTable;\n","/* eslint-disable radix */\n/* eslint-disable no-nested-ternary */\nimport React, { useState, useEffect } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Element } from 'react-scroll';\nimport PropTypes from 'prop-types';\nimport Layout from '../../UtilComponents/Layout';\nimport { getTissueQuery } from '../../../queries/tissue';\nimport { NotFoundContent } from '../../UtilComponents/NotFoundPage';\nimport Table from '../../UtilComponents/Table/Table';\nimport Loading from '../../UtilComponents/Loading';\nimport PlotSection from './PlotSection';\nimport CellLineSummaryTable from './Tables/CellLineSummaryTable';\nimport DrugSummaryTable from './Tables/DrugSummaryTable';\nimport { StyledIndivPage, StyledSidebarList } from '../../../styles/IndivPageStyles';\nimport StyledWrapper from '../../../styles/utils';\nimport convertToTitleCase from '../../../utils/convertToTitleCase';\n\nconst ANNOTATION_COLUMNS = [\n    {\n        Header: 'Sources',\n        accessor: 'sources',\n        Cell: (item) => {\n            let datasets = item.cell.row.original.dataset;\n            return (datasets.map((obj, i) => (\n                obj.id? (\n                <span key={i}>\n                    <a href={`/datasets/${obj.id}`}>{obj.name}</a>{i + 1 < datasets.length ? ', ' : ''}\n                    </span>\n                    ) :\n                    (<span key={i}>{obj.name}</span>)\n            )\n            ));\n        }\n    },\n    {\n        Header: 'Names Used',\n        accessor: 'name',\n    },\n];\n\nconst SIDE_LINKS = [\n    { label: 'Annotations', name: 'annotations' },\n    { label: 'Bar Plots', name: 'barPlots' },\n    { label: 'Cell Lines Summary', name: 'cellLineSummary' },\n    { label: 'Compounds Summary', name: 'compoundSummary' }\n];\n\n/**\n * Format name strings containing underscores or being PascalCased\n */\nconst formatName = (string) =>\n    convertToTitleCase(string.replaceAll(/_/g, ' ').replace(/([A-Z][a-z])/g, '$1'));\n\n/**\n * Format data for the annotation table\n * @param {Array} data annotation data from the tissue API\n */\nconst formatAnnotationData = (data) => {\n    if (data.synonyms) {\n        const returnObj = data.synonyms.filter(obj => {return obj.name !== \"\"});\n        if (returnObj.filter(obj => { return obj.dataset[0].name === \"Standardized name in PharmacoSet\" }).length === 0) {\n            returnObj.push({ name: data.name, dataset: [{ name: \"Standardized name in PharmacoSet\", id: '' }] });\n        }\n        return returnObj;\n    }\n    return null;\n};\n\n/**\n * Parent component for the individual tissue page.\n *\n * @component\n * @example\n *\n * return (\n *   <IndivTissues/>\n * )\n */\nconst IndivTissues = (props) => {\n    // parameter.\n    const {\n        match: { params },\n    } = props;\n\n    // query to get the data for the single tissue.\n    const { loading, error, data: queryData } = useQuery(getTissueQuery, {\n        variables: { tissueId: parseInt(params.id) },\n    });\n\n    // load data from query into state\n    const [tissue, setTissue] = useState({\n        data: {},\n        loaded: false,\n    });\n\n    // A section to display on the page\n    const [display, setDisplay] = useState('annotations');\n\n    // to set the state on the change of the data.\n    useEffect(() => {\n        if (queryData !== undefined) {\n            setTissue({\n                data: queryData.tissue,\n                loaded: true,\n            });\n        }\n    }, [queryData]);\n\n    // destructuring the tissue object.\n    const { data } = tissue;\n\n    /**\n     *\n     * @param {String} link\n     */\n    const createSideLink = (link, i) => (\n        <li key={i} className={display === link.name ? 'selected' : undefined}>\n            <button type='button' onClick={() => setDisplay(link.name)}>\n                {link.label}\n            </button>\n        </li>\n    );\n\n    return (tissue.loaded ? (\n        <Layout page={data.name}>\n            <StyledWrapper>\n                {loading ? (<p>Loading...</p>)\n                    : (error ? (<NotFoundContent />)\n                        : (\n                            <StyledIndivPage className=\"indiv-tissues\">\n                                <div className='heading'>\n                                    <span className='title'>{formatName(data.name)}</span>\n                                    <span className='attributes'></span>\n                                </div>\n                                <div className='wrapper'>\n                                    <StyledSidebarList>\n                                        {SIDE_LINKS.map((link, i) => createSideLink(link, i))}\n                                    </StyledSidebarList>\n                                    <div className=\"container\">\n                                        <div className=\"content\">\n                                            {\n                                                display === 'annotations' &&\n                                                <Element className=\"section\" name=\"annotations\">\n                                                    <div className='section-title'>Annotations</div>\n                                                    <Table columns={ANNOTATION_COLUMNS} data={formatAnnotationData(data)} disablePagination />\n                                                </Element>\n                                            }\n                                            {\n                                                display === 'barPlots' &&\n                                                <Element>\n                                                    <PlotSection tissue={({ id: data.id, name: formatName(data.name) })} />\n                                                </Element>\n                                            }\n                                            {\n                                                display === 'cellLineSummary' &&\n                                                <Element className=\"section\">\n                                                    <CellLineSummaryTable tissue={({ id: data.id, name: formatName(data.name) })} />\n                                                </Element>\n                                            }\n                                            {\n                                                display === 'compoundSummary' &&\n                                                <Element className=\"section\">\n                                                    <DrugSummaryTable tissue={({ id: data.id, name: formatName(data.name) })} />\n                                                </Element>\n                                            }\n                                        </div>\n                                    </div>\n                                </div>\n                            </StyledIndivPage>\n                        ))}\n            </StyledWrapper>\n        </Layout>\n    ) : <Loading />);\n};\n\nIndivTissues.propTypes = {\n    /**\n     * IndivTissues' param id\n     */\n    match: PropTypes.shape({\n        params: PropTypes.shape({\n            id: PropTypes.string.isRequired,\n        }).isRequired,\n    }).isRequired,\n};\n\nexport default IndivTissues;\n","/* eslint-disable radix */\n/* eslint-disable no-nested-ternary */\nimport React, { useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\n// import { getGeneCompoundDatasetQuery } from '../../../queries/gene_compound';\nimport { getGeneTargetCountCompoundsByDataset} from '../../../queries/target';\nimport dataset_colors from '../../../styles/dataset_colors';\nimport Loading from '../../UtilComponents/Loading';\nimport Error from '../../UtilComponents/Error';\nimport PlotsWrapper from '../../../styles/PlotsWrapper';\nimport DatasetHorizontalPlot from '../../Plots/DatasetHorizontalPlot';\n\n/**\n * A helper function that processes data from the API to be subsequently loaded it into\n * compound horizontal plots\n * @param {Array} geneCompounds - list of compound-dataset combinations for a given gene returned by the API\n * @returns - array of items. Elements of the array are a list of data points for gene-compound plots respectively\n * Each data point contains name, count and color properties\n * @example\n * [{name: \"GDSC1000\", count: 208, color: \"#08589e\"}, ... ]\n */\nconst generateCountPlotData = (data) => {\n  const plotData = [];\n  data.targetsStat.forEach((stat,i) => {\n    plotData.push({\n      name: stat.dataset.name,\n      count: stat.compound_count,\n      color: dataset_colors[i]\n    });\n  })\n  return plotData;\n};\n/**\n * Section that display plots for the individual gene page.\n *\n * @component\n * @example\n *\n * returns (\n *   <PlotSection/>\n * )\n */\nconst PlotSection = (props) => {\n  const { gene } = props;\n\n  const [data, setData] = useState([]);\n  const [error, setError] = useState(false);\n\n  const { loading } = useQuery(getGeneTargetCountCompoundsByDataset, {\n    variables: { geneId: gene.id },\n    onCompleted: (data) => {\n      setData(generateCountPlotData(data.compound_targeting_gene_count_per_dataset));\n    },\n    onError: (err) => {\n      console.log(err);\n      setError(true);\n    }\n  });\n\n  return (\n    <React.Fragment>\n      {\n        loading ? <Loading />\n          :\n          error ? <Error />\n            :\n              data.length > 0 ? (\n                <PlotsWrapper single={true}>\n                  <DatasetHorizontalPlot\n                      plotId='gene_compound_dataset_plot'\n                      data={data}\n                      xaxis=\"# of compounds\"\n                      title={`Number of compounds targeting ${gene.annotation.symbol} (per dataset)`}\n                  />\n                </PlotsWrapper>\n              ) :\n                  <h6>No data is available to plot.</h6>\n      }\n    </React.Fragment>\n  );\n};\n\nPlotSection.propTypes = {\n  gene: PropTypes.shape({\n    id: PropTypes.number,\n    name: PropTypes.string,\n  }).isRequired,\n};\n\nexport default PlotSection;\n","import React, { useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport Loading from '../../../UtilComponents/Loading';\nimport Table from '../../../UtilComponents/Table/Table';\nimport Error from '../../../UtilComponents/Error';\nimport DownloadButton from '../../../UtilComponents/DownloadButton';\nimport { getSingleGeneTarget } from '../../../../queries/target';\n\nconst parseTableData = (data) => {\n    let tableData = {\n        data: [],\n        numCompounds: 0,\n    };\n\n    if (data.targets) {\n        data.targets.forEach(target => {\n            target.compounds.forEach(compound => {\n                tableData.numCompounds += 1;\n\n                tableData.data.push({\n                    gene_id: data.gene_id,\n                    gene_name: data.gene_annotation.symbol,\n                    compound_id: compound.id,\n                    compound_uid: compound.uid,\n                    compound: compound.name,\n                    target_id: target.target_id,\n                    target: target.target_name,\n                });\n            })\n        })\n        tableData.data.sort((a, b) => b.compound - a.compound);\n    }\n\n    return tableData;\n};\n\nconst CompoundsSummaryTable = (props) => {\n    const { gene } = props;\n\n    const columns = [\n        {\n            Header: `Compounds`,\n            accessor: 'compound',\n            center: true,\n            Cell: (item) => <Link to={`/compounds/${item.cell.row.original.compound_uid}`}>{item.value}</Link>\n        },\n        {\n            Header: `Targets`,\n            accessor: 'target',\n            center: true,\n        },\n    ];\n\n    const [tableData, setTableData] = useState({\n        data: [],\n        numCompounds: 0,\n    });\n    const [error, setError] = useState(false);\n\n    const { loading } = useQuery(getSingleGeneTarget, {\n        variables: { geneId: gene.id },\n        onCompleted: (data) => {\n            setTableData(parseTableData(data.single_gene_target));\n        },\n        onError: (err) => {\n            console.log(err);\n            setError(true);\n        }\n    });\n\n    function renderComponent() {\n        if (loading) {\n            return <Loading/>\n        }\n\n        if (error) {\n            return <Error/>\n        }\n\n        return (\n            <React.Fragment>\n                {\n                    <h4>\n                        <p align=\"center\">\n                            {\n                                tableData.numCompounds\n                                ? (\n                                    <>\n                                        <> {`Compounds targeting ${gene.annotation.symbol}`} </>\n                                        <br/>\n                                        <> {tableData.numCompounds} compounds target gene products of {gene.annotation.symbol}. </>\n                                    </>\n                                )\n                                : (\n                                    `There are no compounds targeting ${gene.annotation.symbol} in the database`\n                                )\n                            }\n                        </p>\n                    </h4>\n                }\n                {\n                    tableData.data.length > 0 &&\n                    <React.Fragment>\n                        <div className='download-button'>\n                            <DownloadButton\n                                label='CSV'\n                                data={tableData.data}\n                                mode='csv'\n                                filename={`${gene.annotation.symbol} - compounds`}\n                            />\n                        </div>\n                        <Table columns={columns} data={tableData.data} />\n                    </React.Fragment>\n                }\n            </React.Fragment>\n        )\n    }\n\n    return (\n        <React.Fragment>\n            {\n                renderComponent()\n            }\n        </React.Fragment>\n    );\n}\n\nCompoundsSummaryTable.propTypes = {\n    gene: PropTypes.shape({\n        id: PropTypes.number,\n        name: PropTypes.string,\n    }).isRequired\n}\n\nexport default CompoundsSummaryTable;\n","import React, { useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { getGeneCompoundTissueDatasetQuery } from '../../../../queries/gene_compound';\nimport { convertMDataType } from '../../../../utils/convertMDataType';\nimport Loading from '../../../UtilComponents/Loading';\nimport Table from '../../../UtilComponents/Table/Table';\nimport Error from '../../../UtilComponents/Error';\nimport DownloadButton from '../../../UtilComponents/DownloadButton';\nimport colors from '../../../../styles/colors';\n\nconst highlightRowsByCorrelation = (rowData) => {\n    let style = { backgroundColor: '' };\n    if(Math.sign(rowData.correlation) === 1) style.backgroundColor = colors.light_pink_highlight;\n    if(Math.sign(rowData.correlation) === -1) style.backgroundColor = colors.light_teal_highlight;\n    return style;\n};\n\nconst parseTableData = (data, gene) => {\n    let tableData = [];\n    if (typeof data !== 'undefined') {\n        let filtered = data.filter(item => !!item.pvalue_analytic);\n        tableData = filtered.map(item => ({\n            gene_id: gene.id,\n            gene: gene.name,\n            feature_type: convertMDataType(item.mDataType),\n            compound_id: item.compound.id,\n            compound_uid: item.compound.uid,\n            compound: item.compound.name,\n            dataset_id: item.dataset.id,\n            dataset: item.dataset.name,\n            tissue_id: item.tissue.id,\n            tissue: item.tissue.name,\n            stat: item.sens_stat,\n            correlation: item.estimate,\n            pvalue_analytic: item.pvalue_analytic,\n            permutation_pvalue: item.pvalue_permutation,\n            significant_permutation: item.significant_permutation,\n        }));\n        tableData.sort((a, b) => a.pvalue - b.pvalue);\n    }\n    return tableData;\n}\n\nconst TopDrugsTable = (props) => {\n    const { gene } = props;\n\n    const columns = [\n        {\n            Header: `Feature Type`,\n            accessor: 'feature_type',\n        },\n        {\n            Header: `Compound`,\n            accessor: 'compound',\n            Cell: (item) => <Link to={`/compounds/${item.cell.row.original.compound_uid}`}>{item.value}</Link>\n        },\n        {\n            Header: `Dataset`,\n            accessor: 'dataset',\n            Cell: (item) => <Link to={`/datasets/${item.cell.row.original.dataset_id}`}>{item.value}</Link>\n        },\n        {\n            Header: `Tissue`,\n            accessor: 'tissue',\n            Cell: (item) => <Link to={`/tissues/${item.cell.row.original.tissue_id}`}>{item.value}</Link>\n        },\n        {\n            Header: `Sensitivity Metric`,\n            accessor: 'stat',\n        },\n        {\n            Header: `Correlation`,\n            accessor: 'correlation',\n            Cell: (item) => item.value.toFixed(2),\n            sortType: 'basic',\n            sortMethod: (a, b) => parseFloat(a) - parseFloat(b)\n        },\n        {\n            Header: `Analytic P Value`,\n            accessor: 'pvalue_analytic',\n            Cell: (item) => item.value.toExponential(2),\n            sortType: 'basic',\n            sortMethod: (a, b) => parseFloat(a) - parseFloat(b)\n        },\n    ];\n\n    const [tableData, setTableData] = useState([]);\n    const [error, setError] = useState(false);\n\n    const { loading } = useQuery(getGeneCompoundTissueDatasetQuery, {\n        variables: { geneId: gene.id },\n        onCompleted: (data) => {\n            setTableData(parseTableData(data.gene_compound_tissue_dataset, gene));\n        },\n        onError: (err) => {\n            console.log(err);\n            setError(true);\n        }\n    });\n\n    function renderComponent() {\n        if (loading) {\n            return <Loading/>\n        }\n\n        if (error) {\n            return <Error/>\n        }\n\n        if (tableData.length === 0) {\n            return (\n                <>\n                    <h4>\n                        <p align=\"center\">\n                            {`There are no compound associations in the database`}\n                        </p>\n                    </h4>\n                </>\n            )\n        }\n\n        return (\n            tableData.length > 0 &&\n            (\n                <>\n                    <h4>\n                        <p align=\"center\">\n                            {`Top compounds associated with response to ${gene.annotation.symbol}`}\n                        </p>\n                    </h4>\n                    <div className='download-button'>\n                        <DownloadButton\n                            label='CSV'\n                            data={tableData}\n                            mode='csv'\n                            filename={`${gene.annotation.symbol} - top compounds`}\n                        />\n                    </div>\n                    <Table\n                        columns={columns}\n                        data={tableData}\n                        defaultSort={[{id: 'correlation', desc: true}]}\n                        highlightRows={highlightRowsByCorrelation}\n                    />\n                </>\n            )\n        )\n    }\n\n    return (\n        <React.Fragment>\n            {\n                renderComponent()\n            }\n        </React.Fragment>\n    );\n}\n\nTopDrugsTable.propTypes = {\n    gene: PropTypes.shape({\n        id: PropTypes.number,\n        name: PropTypes.string,\n    }).isRequired\n}\n\nexport default TopDrugsTable;\n","/* eslint-disable radix */\n/* eslint-disable no-nested-ternary */\nimport React, { useState, useEffect } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\nimport { getGeneTargetCountCompoundsByDataset} from '../../../queries/target';\nimport dataset_colors from '../../../styles/dataset_colors';\nimport Loading from '../../UtilComponents/Loading';\nimport Error from '../../UtilComponents/Error';\nimport PlotsWrapper from '../../../styles/PlotsWrapper';\nimport DatasetHorizontalPlot from '../../Plots/DatasetHorizontalPlot';\nimport { Element } from 'react-scroll';\n\n/**\n * A helper function that processes data from the ensembl API to extract gene description and location\n * @param {Object} geneDes - object of gene descriptions for a given gene ensembl id returned by the API\n * @returns - object of gene information, including gene description and location\n * @example\n * [{description: \"BRCA2 DNA repair associated\", location: \"\"}]\n */\nconst generateDescriptionData = (gene) => {\n    const des = gene[\"description\"]\n    const hgncId = des.substring(des.indexOf(\"HGNC:\"), des.length -1);\n    const hgncLink = `https://www.genenames.org/data/gene-symbol-report/#!/hgnc_id/${hgncId}`;\n    // location information\n    const strand = gene[\"strand\"] === 1 ? \"forward strand\" : \"reverse strand\";\n    const location = gene[\"seq_region_name\"]+\":\"+gene[\"start\"]+\"-\"+gene[\"end\"];\n    const locLink = `http://useast.ensembl.org/Homo_sapiens/Location/View?db=core;g=${hgncId};r=${location}`\n    const returnObj = {\n        des: (\n            <div className=\"text\">\n                { des.substring(0, des.indexOf(\"HGNC:\"))}\n                <a href={hgncLink} target=\"_blank\">{hgncId}</a>\n                {des.substring(des.length-1)}\n            </div>\n            ),\n        loc: (\n            <div className=\"text\">\n                <a href={locLink} target=\"_blank\">{ \"Chromosome \"+ location + \" \"}</a>\n                {strand + \".\"}\n            </div>\n        )\n    }\n    return returnObj;\n};\n/**\n * Section that displays gene description on individual gene page\n *\n * @component\n * @example\n *\n * returns (\n *   <Description/>\n * )\n */\nconst Description = (props) => {\n    const { gene } = props;\n\n    const xrefLink = `https://rest.ensembl.org/xrefs/id/${gene.name}?content-type=application/json`;\n    const descLink = `https://rest.ensembl.org/lookup/id/${gene.name}?content-type=application/json`;\n\n    const [error, setError] = useState(null);\n    const [err, setErr] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [geneDes, setGeneDes] = useState([]);\n    const [loaded, setLoaded] = useState(false);\n    const [geneSyn, setGeneSyn] = useState([]);\n    useEffect(() => {\n        if(gene.annotation) {\n            fetch(descLink)\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        setIsLoaded(true);\n                        setGeneDes(result.description? result: '');\n                    },\n                    (error) => {\n                        setIsLoaded(true);\n                        setError(error);\n                    }\n                )\n            fetch(xrefLink)\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        setLoaded(true);\n                        setGeneSyn( result[0]? result.filter(ref => ref.synonyms.length).map(ref => ref.synonyms):[]);\n                    },\n                    (error) => {\n                        setLoaded(true);\n                        setError(err);\n                    }\n                )\n        }\n    }, [gene.annotation])\n    return (\n        <React.Fragment>\n            {\n                !isLoaded || !loaded ? <Loading />\n                :\n                error || err ? <Error />\n                :\n                    <React.Fragment>\n                        {Object.keys(geneDes).length ?\n                            (\n                                <Element className=\"section\">\n                                    <div className='section-title'>Description</div>\n                                    {geneDes[\"description\"].length ?\n                                        (<div className=\"text\">\n                                            {generateDescriptionData(geneDes)[\"des\"]}\n                                        </div>)\n                                        : <h6>N/A</h6>}\n                                </Element>\n                            ): ''\n                            }\n                        {\n                            geneSyn.length ?\n                            <Element className=\"section\">\n                                <div className='section-title'>Synonyms</div>\n                                {\n                                    geneSyn.length ?\n                                        <div className=\"text\">{ geneSyn[0].join(\", \")}</div>\n                                        : <h6>N/A</h6>\n                                }\n                            </Element>\n                            :''\n                        }\n                        {Object.keys(geneDes).length ?\n                            <Element className=\"section\">\n                                <div className='section-title'>Location</div>\n                                {geneDes[\"description\"].length ?\n                                    (<div className=\"text\">\n                                        {generateDescriptionData(geneDes)[\"loc\"]}\n                                    </div>)\n                                    : <h6>N/A</h6>}\n                            </Element>\n                            :''\n                        }\n                    </React.Fragment>\n\n            }\n        </React.Fragment>\n    );\n};\n\nDescription.propTypes = {\n    gene: PropTypes.shape({\n        id: PropTypes.number,\n        name: PropTypes.string,\n    }).isRequired,\n};\n\nexport default Description;\n","/* eslint-disable radix */\n/* eslint-disable no-nested-ternary */\nimport React, { useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Element } from 'react-scroll';\nimport PropTypes from 'prop-types';\nimport Layout from '../../UtilComponents/Layout';\nimport { getGeneQuery } from '../../../queries/gene';\nimport { NotFoundContent } from '../../UtilComponents/NotFoundPage';\nimport Loading from '../../UtilComponents/Loading';\nimport Error from '../../UtilComponents/Error';\nimport Table from '../../UtilComponents/Table/Table';\nimport PlotSection from './PlotSection';\nimport CompoundsSummaryTable from './Tables/CompoundsSummaryTable';\nimport TopDrugsTable from './Tables/TopDrugsTable';\nimport Description from './Description'\n\nimport {\n  StyledIndivPage,\n  StyledSidebarList,\n} from '../../../styles/IndivPageStyles';\nimport StyledWrapper from '../../../styles/utils';\n\nconst SYNONYM_COLUMNS = [\n  {\n    Header: 'Ensembl Gene ID',\n    accessor: 'ensemblId',\n    center: true,\n  },\n  {\n    Header: 'Genecard',\n    accessor: 'geneCard',\n    center: true,\n  },\n];\n\nconst SIDE_LINKS = [\n  { label: 'Annotations', name: 'synonyms' },\n  { label: 'Bar Plots', name: 'plots' },\n  { label: 'Compounds Summary', name: 'compoundsSummary' },\n  { label: 'Top Compounds', name: 'topCompounds' }\n];\n\n/**\n * Format data for synonym and link tables\n */\nconst formatTableLinks = (data) => [\n  {\n    ensemblId: (\n      <a href={`https://useast.ensembl.org/Homo_sapiens/Gene/Summary?g=${data.name}`} target=\"_blank\">\n        <div style={{ textAlign: 'center' }}> {data.name} </div>\n      </a>\n    ),\n    geneCard: data.annotation.symbol !== \"N/A\" ? (\n      <a href={`https://www.genecards.org/cgi-bin/carddisp.pl?gene=${data.name}`} target=\"_blank\">\n        <div style={{ textAlign: 'center' }}> {data.annotation.symbol} </div>\n      </a>\n    ) : 'N/A',\n  },\n];\n\n/**\n * Parent component for the individual gene page.\n *\n * @component\n * @example\n *\n * return (\n *   <IndivGenes/>\n * )\n */\nconst IndivGenes = (props) => {\n  // parameter.\n  const { match: { params } } = props;\n\n  // load data from query into state\n  const [gene, setGene] = useState({\n    data: {},\n    loaded: false,\n    notFound: false,\n    error: false\n  });\n\n  // A section to display on the page\n  const [display, setDisplay] = useState('synonyms');\n\n  // query to get the data for the single gene.\n  const { loading } = useQuery(getGeneQuery, {\n    variables: { geneId: parseInt(params.id) },\n    onCompleted: (data) => {\n      if (data.gene.name !== 'empty') {\n        setGene({\n          ...gene,\n          data: {\n            ...data.gene,\n            synonyms: formatTableLinks(data.gene)\n          },\n          loaded: true\n        });\n      } else {\n        setGene({ ...gene, notFound: true });\n      }\n    },\n    onError: () => {\n      setGene({ ...gene, error: true });\n    }\n  });\n\n  /**\n   *\n   * @param {String} link\n   * @param i\n   */\n  const createSideLink = (link, i) => (\n    <li key={i} className={display === link.name ? 'selected' : undefined}>\n      <button type='button' onClick={() => setDisplay(link.name)}>\n        {link.label}\n      </button>\n    </li>\n  );\n\n  return (gene.loaded ? (\n    <Layout page={gene.loaded ? gene.data.annotation.symbol : ''}>\n      <StyledWrapper>\n        {\n          loading ? <Loading />\n            :\n            gene.notFound ? <NotFoundContent />\n              :\n              gene.error ? <Error />\n                :\n                gene.loaded &&\n                <StyledIndivPage className=\"individual-genes\">\n                  <div className='heading'>\n                    <span className='title'>{gene.data.annotation.symbol}</span>\n                    <span className='attributes'>\n                    </span>\n                  </div>\n                  <div className='wrapper'>\n                    <StyledSidebarList>\n                      {\n                        SIDE_LINKS.map((link, i) => createSideLink(link, i))\n                      }\n                    </StyledSidebarList>\n                    <div className=\"container\">\n                      <div className=\"content\">\n                        {\n                          display === 'synonyms' &&\n                          <React.Fragment>\n                            <Element className=\"section\" name=\"synonyms\">\n                              <Table columns={SYNONYM_COLUMNS} data={gene.data.synonyms} disablePagination />\n                            </Element>\n                            {\n                              gene.data.name.startsWith(\"ENSG\") ?\n                                  <Description gene={gene.data} />\n                                  : ''\n                            }\n                          </React.Fragment>\n                        }\n                        {\n                          display === 'plots' &&\n                          <Element className='section' name=\"plots\">\n                            <div className='section-title'>Plots</div>\n                              <PlotSection gene={gene.data} />\n                          </Element>\n                        }\n                        {\n                          display === 'compoundsSummary' &&\n                          <Element className='section'>\n                            <div className='section-title'>Compounds Summary</div>\n                            <CompoundsSummaryTable gene={gene.data} />\n                          </Element>\n                        }\n                        {\n                          display === 'topCompounds' &&\n                          <Element className='section'>\n                            <div className='section-title'>Top Compounds</div>\n                            <TopDrugsTable gene={gene.data} />\n                          </Element>\n                        }\n                      </div>\n                    </div>\n                  </div>\n                </StyledIndivPage>\n        }\n      </StyledWrapper>\n    </Layout>\n  ) : <Loading />\n  );\n};\n\nIndivGenes.propTypes = {\n  /**\n   * Individual Genes' param id\n   */\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default IndivGenes;\n","/* eslint-disable radix */\n/* eslint-disable no-nested-ternary */\nimport React, { useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\nimport { getDatasetStatsQuery } from '../../../queries/dataset';\nimport PlotsWrapper from '../../../styles/PlotsWrapper';\nimport DatasetHorizontalPlot from '../../Plots/DatasetHorizontalPlot';\nimport Loading from '../../UtilComponents/Loading';\nimport Error from '../../UtilComponents/Error';\nimport colors from '../../../styles/colors';\n\n/**\n * Parses dataset counts data (number of cell lines, experiements, tissues and compounds) into\n * a data sturcture that can be used for bar plots.\n * @param {*} datasets - an array of dataset objects containing dataset metrics\n * @returns - an object containing parsed plot data for four bar plots.\n */\nconst generateCountPlotData = (datasets, id) => {\n  const cells = datasets.map(item => ({\n    name: item.dataset.name,\n    count: item.cell_line_count,\n    color: item.dataset.id === id ? colors.dark_pink_highlight : colors.light_teal\n  }));\n  const compounds = datasets.map(item => ({\n    name: item.dataset.name,\n    count: item.compound_count,\n    color: item.dataset.id === id ? colors.dark_pink_highlight : colors.light_teal\n  }));\n  const experiments = datasets.map(item => ({\n    name: item.dataset.name,\n    count: item.experiment_count,\n    color: item.dataset.id === id ? colors.dark_pink_highlight : colors.light_teal\n  }));\n  const tissues = datasets.map(item => ({\n    name: item.dataset.name,\n    count: item.tissue_count,\n    color: item.dataset.id === id ? colors.dark_pink_highlight : colors.light_teal\n  }));\n\n  return { cells: cells, tissues: tissues, compounds: compounds, experiments: experiments };\n}\n\n/**\n * Section that display plots for the individual Dataset page.\n *\n * @component\n * @example\n *\n * returns (\n *   <PlotSection/>\n * )\n */\nconst PlotSection = (props) => {\n  const { dataset } = props;\n  const [plots, setPlots] = useState({\n    cells: [],\n    tissues: [],\n    compounds: [],\n    experiments: []\n  });\n  const [error, setError] = useState(false);\n\n  const { loading } = useQuery(getDatasetStatsQuery, {\n    onCompleted: (data) => {\n      setPlots(generateCountPlotData(data.dataset_stats, dataset.id));\n    },\n    onError: () => { setError(true) }\n  });\n\n  return (\n    <>\n      {\n        loading ? <Loading />\n          :\n          error ? <Error />\n            :\n            <React.Fragment>\n              <PlotsWrapper>\n                <DatasetHorizontalPlot\n                  plotId={`${dataset.name}CellLinesPlot`}\n                  data={plots.cells}\n                  xaxis=\"# of cell lines\"\n                  title={`Number of cell lines tested across datasets`}\n                />\n                <DatasetHorizontalPlot\n                  plotId={`${dataset.name}TissuesPlot`}\n                  data={plots.tissues}\n                  xaxis=\"# of tissues\"\n                  title={`Number of tissues tested across datasets`}\n                />\n              </PlotsWrapper>\n              <PlotsWrapper>\n                <DatasetHorizontalPlot\n                  plotId={`${dataset.name}CompoundsPlot`}\n                  data={plots.compounds}\n                  xaxis=\"# of compounds\"\n                  title={`Number of compounds tested across datasets`}\n                  logScale={true}\n                />\n                <DatasetHorizontalPlot\n                  plotId={`${dataset.name}ExperimentsPlot`}\n                  data={plots.experiments}\n                  xaxis=\"# of experiments\"\n                  title={`Number of experiments held across datasets`}\n                  logScale={true}\n                />\n              </PlotsWrapper>\n            </React.Fragment>\n      }\n    </>\n  );\n};\n\nPlotSection.propTypes = {\n  dataset: PropTypes.shape({\n    id: PropTypes.number,\n    name: PropTypes.string,\n  }).isRequired,\n};\n\nexport default PlotSection;\n","/* eslint-disable radix */\n/* eslint-disable no-nested-ternary */\nimport React, { useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\nimport { getDatasetTestedCellsQuery } from '../../../../queries/dataset';\nimport Loading from '../../../UtilComponents/Loading';\nimport Error from '../../../UtilComponents/Error';\nimport Table from '../../../UtilComponents/Table/Table';\nimport DownloadButton from '../../../UtilComponents/DownloadButton';\n\nconst parseTableData = (datasetName, data, datasetId) => {\n    let cellLines = []\n    if (data && typeof data !== 'undefined') {\n        let cells = data.cells_tested;\n        cellLines = cells.map(item => ({ dataset: datasetName, id: item.id, cell_uid: item.uid, cellLine: item.name }));\n    }\n    return cellLines;\n}\n\nconst CellLineSummaryTable = (props) => {\n    const { dataset } = props;\n    const [cellLines, setCellLines] = useState([]);\n    const [error, setError] = useState(false);\n\n    const columns = [\n        {\n            Header: `All cell lines tested in ${dataset.name}`,\n            accessor: 'cellLine',\n            center: true,\n            Cell: (item) => <a href={`/cell_lines/${item.cell.row.original.uid}`}>{item.value}</a>\n        },\n    ];\n\n    const { loading } = useQuery(getDatasetTestedCellsQuery, {\n        variables: { datasetId: dataset.id },\n        fetchPolicy: \"cache-first\",\n        onCompleted: (res) => {\n            console.log(res);\n            let data = res.datatypes_information_per_dataset[0];\n            data = { id: data.dataset.id, name: data.dataset.name, cells_tested: data.cells_tested }\n            setCellLines(parseTableData(data.name, data, data.id));\n        },\n        onError: () => { setError(true) }\n    });\n\n    return (\n        <React.Fragment>\n            {\n                loading ?\n                    <Loading />\n                    :\n                    error ?\n                        <Error message='this is a test message' />\n                        :\n                        <React.Fragment>\n                            <div className='download-button'>\n                                <DownloadButton label='CSV' data={cellLines} mode='csv' filename={`${dataset.name} - cell lines`} />\n                            </div>\n                            <Table columns={columns} data={cellLines} center={true} />\n                        </React.Fragment>\n            }\n        </React.Fragment>\n    );\n}\n\nCellLineSummaryTable.propTypes = {\n    dataset: PropTypes.shape({\n        id: PropTypes.number,\n        name: PropTypes.string,\n    }).isRequired\n}\n\nexport default CellLineSummaryTable;\n","/* eslint-disable radix */\n/* eslint-disable no-nested-ternary */\nimport React, { useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\nimport { getDatasetTestedCompoundsQuery } from '../../../../queries/dataset';\nimport Loading from '../../../UtilComponents/Loading';\nimport Table from '../../../UtilComponents/Table/Table';\nimport Error from '../../../UtilComponents/Error';\nimport DownloadButton from '../../../UtilComponents/DownloadButton';\n\nconst parseTableData = ( datasetName, data, datasetId) => {\n    if (typeof data !== 'undefined') {\n        let compounds = data.compounds_tested;\n        return compounds.map(item => ({dataset: datasetName, id: item.id, uid: item.uid, compound: item.name}));\n    }\n    return [];\n}\n\nconst CompoundsSummaryTable = (props) => {\n    const { dataset } = props;\n    const [compounds, setCompounds] = useState([]);\n    const [error, setError] = useState(false);\n\n    const columns = [\n        {\n          Header: `All compounds tested in ${dataset.name}`,\n          accessor: 'compound',\n          center: true,\n          Cell: (item) => <a href={`/compounds/${item.cell.row.original.uid}`}>{item.value}</a>\n        }\n    ];\n\n    const { loading } = useQuery( getDatasetTestedCompoundsQuery, {\n        variables: { datasetId: dataset.id },\n        fetchPolicy: \"cache-first\",\n        onCompleted: (res) => {\n            let data = res.datatypes_information_per_dataset[0];\n            data = { id : data.dataset.id, name: data.dataset.name, compounds_tested : data.compounds_tested}\n            setCompounds(parseTableData(data.name, data, data.id));\n        },\n        onError: () => { setError(true) }\n    });\n\n    return (\n        <React.Fragment>\n            {\n                loading ? <Loading />\n                    :\n                    error ? <Error />\n                        :\n                        <React.Fragment>\n                            <div className='download-button'>\n                                <DownloadButton label='CSV' data={compounds} mode='csv' filename={`${dataset.name} - compounds`} />\n                            </div>\n                            <Table columns={columns} data={compounds} />\n                        </React.Fragment>\n            }\n        </React.Fragment>\n    );\n}\n\nCompoundsSummaryTable.propTypes = {\n    dataset: PropTypes.shape({\n        id: PropTypes.number,\n        name: PropTypes.string,\n    }).isRequired\n}\n\nexport default CompoundsSummaryTable;\n","/* eslint-disable radix */\n/* eslint-disable no-nested-ternary */\nimport React, { useState, useEffect } from 'react';\nimport { Element } from 'react-scroll';\nimport PropTypes from 'prop-types';\nimport Layout from '../../UtilComponents/Layout';\nimport { NotFoundContent } from '../../UtilComponents/NotFoundPage';\nimport datasets from './datasets';\nimport Table from '../../UtilComponents/Table/Table';\nimport PlotSection from './PlotSection';\nimport CellLineSummaryTable from './Tables/CellLineSummaryTable';\nimport CompoundsSummaryTable from './Tables/CompoundsSummaryTable';\n\nimport { StyledIndivPage, StyledSidebarList } from '../../../styles/IndivPageStyles';\nimport StyledWrapper from '../../../styles/utils';\n\nconst SIDE_LINKS = [\n  { label: 'Dataset Information', name: 'info' },\n  { label: 'Resources', name: 'resources' },\n  { label: 'Data Types', name: 'datatype' },\n  { label: 'Bar Plots', name: 'barPlots' },\n  { label: 'Cell Lines Summary', name: 'cellLines' },\n  { label: 'Compounds Summary', name: 'compounds' },\n];\n\nconst DATATYPE_COLUMNS = [\n  {\n    Header: () => <div style={{ textAlign: 'left' }}>Data Type</div>,\n    accessor: 'type',\n    disableSortBy: true,\n    merged: true\n  },\n  {\n    Header: <div style={{ textAlign: 'left' }}>Assay/Platform</div>,\n    accessor: 'platform',\n    disableSortBy: true\n  },\n  {\n    Header: <div style={{ textAlign: 'left' }}>Raw</div>,\n    accessor: 'raw',\n    disableSortBy: true\n  },\n  {\n    Header: <div style={{ textAlign: 'left' }}>Processed</div>,\n    accessor: 'processed',\n    disableSortBy: true\n  },\n];\n\n/**\n * Format data for the resources section\n * @param {Array} resource  from dataset json file\n */\nconst formatResouceData = (resource) => {\n  if (resource.length > 0 )\n  {\n    return resource.map((x, index) => (\n        <a key={index} href={x.urlextern} target=\"_blank\">\n          {x.name}\n          {' '}\n          <br />\n          <br />\n        </a>\n  ))} else {\n  return (<h6> No resource is available for this dataset.</h6>)\n}\n\n};\n\n/**\n * Format data for the resources section\n * @param {Array} resource  from dataset json file\n */\nconst formatPublicationData = (resource) => resource.map((x, index) => ((\n  <a key={index} href={x.url} target=\"_blank\">\n    {x.title}\n    {' '}\n    <br />\n    <br />\n  </a>\n)));\n/**\n * Format data for the synonyms table\n * @param {Array} data synonym data from the compound API\n */\nconst formatDataType = (data) => {\n  if (data) {\n    return data.map((x) => ({\n      type: x.type,\n      platform: x.platform,\n      raw: x.raw,\n      processed: x.processed.join(', '),\n    }));\n  }\n  return null;\n};\n\n/**\n * Get a PSet data of the selected dataset and extract the link to\n * its ORCESTRA page.\n * @param {String} selected\n * @param {Array} psets\n */\nconst getORCESTRALink = (selected, psets) => {\n  let link = '';\n  if (psets.length > 0) {\n    link = 'https://www.orcestra.ca/pset/';\n    let pset = {};\n    switch (selected.name) {\n      case 'GDSC1':\n        pset = psets.find(item => item.name.split('_')[0] === 'GDSC' && item.name.substr(item.name.indexOf('v') + 1, 1) === '1');\n        break;\n      case 'GDSC2':\n        pset = psets.find(item => item.name.split('_')[0] === 'GDSC' && item.name.substr(item.name.indexOf('v') + 1, 1) === '2');\n        break;\n      default:\n        pset = psets.find(item => item.name.split('_')[0] === selected.name);\n        break;\n    }\n    link = `${link}${pset.doi}`;\n  }\n  return link;\n}\n\n/**\n * Parent component for the individual datasets page.\n *\n * @component\n * @example\n *\n * return (\n *   <IndivDatasets/>\n * )\n */\nconst IndivDatasets = (props) => {\n  // parameter.\n  const { match: { params } } = props;\n\n  const [dataset, setDataset] = useState({\n    resources: [],\n    publications: [],\n    datatypes: [],\n    notFound: false\n  });\n  // A section to display on the page\n  const initialView = props.location.hash === '#compounds' ? 'compounds' : 'info';\n  const [display, setDisplay] = useState(initialView);\n\n  // to set the state on the change of the data.\n  useEffect(() => {\n    /**\n     * Component mount operation wrapped in async function since\n     * We are accessing ORCESTRA's API to fetch data.\n     */\n    const getData = async () => {\n      // Retreives ORCESTRA's canonical psets data to display link to the dataset's PSet in ORCESTRA.\n      let psets = [];\n      try {\n        const res = await fetch('https://www.orcestra.ca/api/psets/canonical');\n        psets = await res.json();\n      } catch (err) {\n        console.log(err);\n      }\n\n      // read dataset data from json file\n      const selected = datasets[params.id];\n      if (selected) {\n        setDataset({\n          ...selected,\n          resources: formatResouceData(selected.resource),\n          publications: formatPublicationData(selected.pub),\n          datatypes: formatDataType(selected.dtype),\n          orcestra: getORCESTRALink(selected, psets)\n        });\n      } else {\n        setDataset({ ...dataset, notFound: true });\n      }\n    }\n    getData();\n  }, []);\n\n  /**\n   *\n   * @param {String} link\n   */\n  const createSideLink = (link, i) => (\n    <li key={i} className={display === link.name ? 'selected' : undefined}>\n      <button type='button' onClick={() => setDisplay(link.name)}>\n        {link.label}\n      </button>\n    </li>\n  );\n\n  return (\n    <Layout page={dataset.name}>\n      <StyledWrapper>\n        {\n          dataset.notFound ?\n            <NotFoundContent />\n            :\n            <StyledIndivPage className=\"indiv-datasets\">\n              <div className='heading'>\n                <span className='title'>{dataset.name}</span>\n              </div>\n              <div className='wrapper'>\n                <StyledSidebarList>\n                  {SIDE_LINKS.map((link, i) => createSideLink(link, i))}\n                </StyledSidebarList>\n                <div className=\"container\">\n                  <div className=\"content\">\n                    {\n                      display === 'info' &&\n                      <React.Fragment>\n                        <Element className=\"section\" name=\"acronym\">\n                          <div className='section-title'>Acronym</div>\n                          {dataset.acr_ref ? (<div className=\"text\"><a href={dataset.acr_ref}>{dataset.acr}</a></div>)\n                            : (<div className=\"text\">{dataset.acr}</div>)}\n                        </Element>\n                        <Element className=\"section\" name=\"description\">\n                          <div className='section-title'>Description</div>\n                          { dataset.des ?\n                              (<div className=\"text\">{dataset.des}</div>): (<h6>N/A</h6>) }\n                        </Element>\n                        <Element className=\"section\" name=\"publications\">\n                          <div className='section-title'>Publications</div>\n                          { dataset.publications.length > 0 ?\n                              (<div className=\"text\">{dataset.publications}</div>): (<h6>N/A</h6>)\n                          }\n                        </Element>\n                        <Element className=\"section\" name=\"pharmacogx\">\n                          <div className='section-title'>PharmacoGx</div>\n                          <div className=\"text\">\n                            <a href={`./pharmacogx/${params.id}`} target=\"_blank\">\n                              PharmacoSet object for:\n                            {' '}\n                              {dataset.name}\n                            </a>\n                          </div>\n                        </Element>\n                        {\n                          dataset.orcestra && dataset.orcestra.length > 0 &&\n                          <Element className=\"section\" name=\"pharmacogx\">\n                            <div className='section-title'>ORCESTRA</div>\n                            <div className=\"text\">\n                              <a href={dataset.orcestra} target=\"_blank\" rel=\"noopener noreferrer\">\n                                {`PharmacoSet object for ${dataset.name} in ORCESTRA`}\n                              </a>\n                            </div>\n                          </Element>\n                        }\n                      </React.Fragment>\n                    }\n                    {\n                      display === 'resources' &&\n                      <Element className=\"section\" name=\"resources\">\n                        <div className='section-title'>Resources</div>\n                        <div className=\"text\">{dataset.resources}</div>\n                      </Element>\n                    }\n                    {\n                      display === 'datatype' &&\n                      <Element className=\"section\" name=\"data_type\">\n                        <div className='section-title'>Data Types</div>\n                        {\n                          dataset.datatypes.length ? (\n                            <Table\n                                pivotBy={['type']}\n                                columns={DATATYPE_COLUMNS}\n                                data={dataset.datatypes}\n                                disablePagination\n                            />\n                          ):\n                          (<h6>No data type information is available for this dataset.</h6>)\n                        }\n                      </Element>\n                    }\n                    {\n                      display === 'barPlots' &&\n                      <Element>\n                        <PlotSection dataset={({ id: dataset.id, name: dataset.name })} display={display} />\n                      </Element>\n                    }\n                    {\n                      display === 'cellLines' &&\n                      <Element className=\"section\" name=\"cellLines\">\n                        <CellLineSummaryTable dataset={({ id: dataset.id, name: dataset.name })} />\n                      </Element>\n                    }\n                    {\n                      display === 'compounds' &&\n                      <Element className=\"section\" name=\"compounds\">\n                        {\n                          dataset.id &&\n                          <CompoundsSummaryTable dataset={({id: dataset.id, name: dataset.name})}/>\n                        }\n                      </Element>\n                    }\n                  </div>\n                </div>\n              </div>\n            </StyledIndivPage>\n        }\n      </StyledWrapper>\n    </Layout>\n  );\n};\n\nIndivDatasets.propTypes = {\n  /**\n     * IndivDatasets' param id\n     */\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default IndivDatasets;\n","import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Link } from 'react-router-dom';\nimport StyledWrapper from '../../../styles/utils';\nimport Table from '../../UtilComponents/Table/Table';\nimport Layout from '../../UtilComponents/Layout';\nimport { getTissuesQuery } from '../../../queries/tissue';\nimport { getCellLinesQuery } from '../../../queries/cell';\nimport Loading from '../../UtilComponents/Loading';\nimport Error from '../../UtilComponents/Error';\nimport TissueCellsPieChart from './TissueCellsPieChart';\n\nconst tableColumns = [\n  {\n    Header: 'Name',\n    accessor: 'name',\n    center: true,\n    rowSpan: 2,\n    width: 50,\n    Cell: (row) => (<Link to={`/tissues/${row.row.original.id}`}>{row.value}</Link>),\n  },\n];\n\n/**\n *\n * @param {Array} data - tissue data from the tissues API.\n */\nconst getTableData = (data) => {\n  let tableData = [];\n  if (data) {\n    tableData = data.tissues.map((value) => {\n      const { id, name } = value;\n      return {\n        id,\n        name: name.replace(/_/g, ' '),\n      };\n    });\n  }\n  return tableData;\n};\n\n/**\n * Function to render the cell lines page component depending on \n * the API request outcome.\n * @param {boolean} loading \n * @param {object} error \n * @param {Array} pieData \n * @param {Array} tableData \n * @returns a component to be rendered.\n */\nconst renderComponent = (loading, error, pieData, tableData) => {\n  if(error){ \n    return(<Error />);\n  }\n\n  if(loading) {\n    return(<Loading />)\n  }\n\n  return (\n    <React.Fragment>\n      <h2>Relative Percentage of Cell lines per Tissue</h2>\n      <TissueCellsPieChart cells={pieData} />\n      <h2> List of Tissues </h2>\n      <Table columns={tableColumns} data={tableData} center={true} />\n    </React.Fragment>\n  );\n};\n\n/**\n * Parent component for the tissues page.\n *\n * @component\n * @example\n *\n * @returns ( <Tissues/> )\n*/\nconst Tissues = () => {\n  // queries to get the cell line and tissue data.\n  const { loading: tissueQueryLoading, error: tissuesQueryError, data: tissues } = useQuery(getTissuesQuery);\n  const { loading: cellLineQueryLoading, error: cellLineQueryError, data: cells } = useQuery(getCellLinesQuery);\n  // setting data for the table.\n  const data = React.useMemo(() => getTableData(tissues), [tissues]);\n\n  return (\n    <Layout page=\"tissues\">\n      <StyledWrapper>\n        {\n          renderComponent(\n            (tissueQueryLoading || cellLineQueryLoading), \n            (cellLineQueryError || tissuesQueryError), \n            cells, \n            data\n          )\n        }\n      </StyledWrapper>\n    </Layout>\n  );\n};\n\nexport default Tissues;\n","/**\n * Functions used to process experiment data to render dose response curve.\n * Used in Tissue vs Compound and Cell Line vs Compound pages.\n */\n\nimport plotColors from \"../styles/plot_colors\";\n\nconst hill = (x, profile) => {\n    return (profile.Einf + (100 - profile.Einf) / (1 + Math.pow(x / profile.EC50, profile.HS)));\n}\n\n//Returns the curve-fitting coordinates\nconst makeCurveFit = (profile, minDose, maxDose) => {\n    //curve fitting data\n    let numPoints = 301;\n    let dx = Math.pow(10,((Math.log10(maxDose) - Math.log10(minDose))/(numPoints - 1)));\n    let supportVec = [];\n    for(let i = 0; i < numPoints; i++){\n      supportVec.push((minDose * Math.pow(dx, i)));\n    }\n\n    return(supportVec.map(item => ({\n        x: item,\n        y: hill(item, profile)\n    })));\n}\n\nconst getDashedLine = (id, stat, x, y, color, visible) => ({\n    id: id,\n    stat: stat,\n    additionalStat: true,\n    color: color,\n    highlight: color,\n    x: x,\n    y: y,\n    mode: 'lines',\n    line: {\n        color: color,\n        width: 3,\n        dash: 'dot'\n    },\n    showlegend: false,\n    hoverinfo: 'skip',\n    fill: 'none',\n    visible: visible\n});\n\nconst getScatterPoints = (id, stat, x, y, color, visible) => ({\n    id: id,\n    stat: stat,\n    additionalStat: true,\n    color: color,\n    highlight: color,\n    x: x,\n    y: y,\n    mode: 'markers',\n    type: 'scatter',\n    marker: {\n        color: color,\n        size: 8\n    },\n    showlegend: false,\n    hoverinfo: 'skip',\n    visible: visible\n});\n\n/**\n * Parses dose response curve data in plotly friendly format.\n * @param {*} experiments the parsed experiments \n * @param {*} showScatter \n * @returns \n * traces: represents each line, contains all the information required for Plotly to render a plot.\n * xMin, xMax, yMin, yMax: min and max axis values detemrined by the experiment data.\n */\nexport const getDoseResponseCurveData = (experiments, showScatter) => {\n    let traces = [];\n\n    let doseResponses = experiments.map(item => item.dose_response);\n    let doses = [];\n    let responses = [];\n    for(const doseResponse of doseResponses){\n        doses = doses.concat(doseResponse.map(item => item.dose));\n        responses = responses.concat(doseResponse.map(item => item.response));\n    }\n    let xMin = Math.min(...doses);\n    let xMax = Math.max(...doses) + 2;\n    let yMin = showScatter ? Math.min(...responses) - 5 : 0;\n    let yMax = showScatter ? Math.max(...responses) + 2 : 100;\n\n    for(const experiment of experiments){\n        let curvCoordinates = makeCurveFit(experiment.profile, xMin, xMax);\n        \n        if(experiment.displayCurve){\n            // invisible line used to display AAC\n            traces.push({\n                id: experiment.id,\n                stat: 'AAC',\n                color: experiment.color,\n                highlight: experiment.highlight,\n                x: [Math.log10(xMin), Math.log10(xMax)],\n                y: [100, 100],\n                mode: 'lines',\n                line: {\n                    color: experiment.color,\n                    width: 0\n                },\n                showlegend: false,\n                hoverinfo: 'skip',\n                fill: 'none'\n            });\n            \n            // Parse dose response curve\n            traces.push({\n                id: experiment.id,\n                visible: experiment.visible,\n                curve: true,\n                stat: 'AAC',\n                color: showScatter ? experiment.color : plotColors.default[1],\n                highlight: experiment.highlight,\n                defaultCurveWidth: experiment.defaultCurveWidth,\n                x: curvCoordinates.map(item => Math.log10(item.x)),\n                y: curvCoordinates.map(item => item.y),\n                mode: 'lines',\n                line: {\n                    color: showScatter ? experiment.color : plotColors.default[1],\n                    width: experiment.defaultCurveWidth,\n                },\n                showlegend: false,\n                hoverinfo: 'none',\n                fill: 'none',\n            });\n        }\n\n        // Parse IC50 lines\n        traces.push(getDashedLine(\n            experiment.id,\n            \"IC50\",\n            [Math.log10(xMin), Math.log10(experiment.profile.IC50)],\n            [50, 50],\n            experiment.highlight ? experiment.highlight : experiment.color,\n            false\n        ));\n        traces.push(getDashedLine(\n            experiment.id,\n            \"IC50\",\n            [Math.log10(experiment.profile.IC50), Math.log10(experiment.profile.IC50)],\n            [yMin, 50],\n            experiment.highlight ? experiment.highlight : experiment.color,\n            false\n        ));\n        traces.push(getScatterPoints(\n            experiment.id,\n            \"IC50\",\n            [Math.log10(experiment.profile.IC50)],\n            [50],\n            experiment.highlight ? experiment.highlight : experiment.color,\n            false\n        ));\n\n        // Parse EC50 lines\n        traces.push(getDashedLine(\n            experiment.id,\n            \"EC50\",\n            [Math.log10(xMin), Math.log10(experiment.profile.EC50)],\n            [hill(experiment.profile.EC50, experiment.profile), hill(experiment.profile.EC50, experiment.profile)],\n            experiment.highlight ? experiment.highlight : experiment.color,\n            false\n        ));\n        traces.push(getDashedLine(\n            experiment.id,\n            \"EC50\",\n            [Math.log10(experiment.profile.EC50), Math.log10(experiment.profile.EC50)],\n            [yMin, hill(experiment.profile.EC50, experiment.profile)],\n            experiment.highlight ? experiment.highlight : experiment.color,\n            false\n        ));\n        traces.push(getScatterPoints(\n            experiment.id,\n            \"EC50\",\n            [Math.log10(experiment.profile.EC50)],\n            [hill(experiment.profile.EC50, experiment.profile)],\n            experiment.highlight ? experiment.highlight : experiment.color,\n            false\n        ));\n\n        // Parse Einf line\n        traces.push(getDashedLine(\n            experiment.id,\n            \"Einf\",\n            [Math.log10(xMin), Math.log10(xMax)],\n            [experiment.profile.Einf, experiment.profile.Einf],\n            experiment.highlight ? experiment.highlight : experiment.color,\n            false\n        ));\n        \n        if(showScatter){\n            // Parse scatter points\n            traces.push({\n                id: experiment.id,\n                name: experiment.experiment.name,\n                stat: 'scatterPoints',\n                x: experiment.dose_response.map(item => Math.log10(item.dose)),\n                y: experiment.dose_response.map(item => item.response),\n                mode: 'markers',\n                type: 'scatter',\n                marker: {\n                    color: experiment.color\n                },\n                hoverinfo: 'text',\n                hovertext: experiment.dose_response.map(item => (\n                    `${experiment.experiment.name}<br />` + \n                    `Dose: ${item.dose.toFixed(5)}uM<br />` + \n                    `Response: ${item.response.toFixed(2)}%`\n                )),\n                fill: 'none',\n                showlegend: false,\n            });\n        }\n    }\n\n    traces = traces.map((item, i) => ({...item, traceId: i}));\n\n    return {\n        traces: traces,\n        xMin: xMin,\n        xMax: xMax,\n        yMin: yMin,\n        yMax: yMax\n    };\n}\n","import React, { useState } from 'react';\nimport plotColors from '../styles/plot_colors';\nimport { getDoseResponseCurveData } from './doseResponseCurveHelper';\n\n/**\n * A hook used in cell line vs compound and tissue vs. compound pages.\n * Contains states and functions that are shared in both pages.\n * @returns \n */\nconst useExpIntersection = () => {\n    const [experiments, setExperiments] = useState(undefined);\n    const [datasets, setDatasets] = useState([]);\n    const [cellLines, setCellLines] = useState([]);\n    const [plotData, setPlotData] = useState({ traces: [], xMin: 0, xMax: 0, yMin: 0, yMax: 0 });\n    const [traces, setTraces] = useState([]); // contains all traces\n    const [plotCSVData, setPlotCSVData] = useState([]);\n    const [tableData, setTableData] = useState([]);\n\n    /**\n     * Formats experiments data into plot data, table data and \n     * plot interaction control object\n     * @param {*} raw_experiments \n     * @returns \n     */\n    const parseExperiments = (raw_experiments, showScatter, isTissueCompound) => {\n        let parsed = [];\n        let plotData = {};\n        let tableData = [];\n        let csvData = [];\n        let exp = [];\n\n        // assign color and name to each experiment\n        let colorIndex = 0;\n        let uniqueDatasets = raw_experiments.map(item => item.dataset.name);\n        uniqueDatasets = [...new Set(uniqueDatasets)];\n        for (const dataset of uniqueDatasets) {\n            // Process each experiment by dataset.\n            let filtered = raw_experiments.filter(item => item.dataset.name === dataset);\n\n            // If multiple experiments (repeated) are present, assign them with number and similar colors.\n            // If we ran out of colors, it'll default to the default color.\n            if (filtered.length > 1) {\n                let repeats = filtered.map((item, i) => ({\n                    ...item,\n                    experiment: { name: `${item.dataset.name} rep ${i + 1}` },\n                    color: plotColors.gradients[colorIndex] ? plotColors.gradients[colorIndex][i <= 3 ? i : 3] : plotColors.default[3]\n                }));\n                parsed = parsed.concat(repeats);\n                colorIndex++;\n            } else {\n                parsed.push({\n                    ...filtered[0],\n                    experiment: { name: filtered[0].dataset.name },\n                    color: plotColors.gradients[colorIndex] ? plotColors.gradients[colorIndex][0] : plotColors.default[0]\n                });\n                colorIndex++\n            }\n        }\n\n        // Add other fields that will be used in the plot and the table.\n        parsed = parsed.map((item, i) => ({\n            ...item,\n            id: i, // add id to each experiment so that it is easy to identify in the table and the plot.\n            visible: true,\n            displayCurve: typeof item.profile.AAC === 'number',\n            defaultCurveWidth: isTissueCompound ? 0.5 : 2\n        }));\n\n        if (isTissueCompound) {\n            // Parse cell lines and datasets data to control plot interactions\n            let dsets = parsed.map(item => item.dataset.name);\n            dsets = [...new Set(dsets)].map(item => ({\n                name: item,\n                checked: true,\n                color: plotColors.default[0]\n            }));\n            dsets.sort((a, b) => a.name.localeCompare(b.name));\n\n            let cellLineColors = [];\n            for (let i = 0; i < 4; i++) {\n                let col = plotColors.gradients.map(item => item[i]);\n                cellLineColors = cellLineColors.concat(col);\n            }\n            let cells = parsed.map(item => item.cell_line.name);\n            cells.sort((a, b) => a.localeCompare(b));\n            cells = [...new Set(cells)].map((item, i) => ({\n                name: item,\n                checked: false,\n                disabled: false,\n                color: i < cellLineColors.length ? cellLineColors[i] : plotColors.default[1]\n            }));\n            setDatasets(dsets);\n            setCellLines(cells);\n            parsed = parsed.map(experiment => ({\n                ...experiment,\n                color: plotColors.default[0],\n                highlight: cells.find(cell => cell.name === experiment.cell_line.name).color\n            }));\n        }\n\n        // get plot data\n        plotData = getDoseResponseCurveData(parsed, showScatter);\n\n        tableData = parsed.map(item => ({\n            id: item.id,\n            experiment: item.experiment,\n            dataset: item.dataset,\n            cell_line: item.cell_line,\n            compound: item.compound,\n            tissue: item.tissue,\n            ...item.profile\n        }));\n        tableData = tableData.filter(item => typeof item.AAC === 'number');\n\n        exp = parsed.map((item) => ({\n            id: item.id,\n            experiment: item.experiment,\n            dataset: item.dataset,\n            cell_line: { ...item.cell_line, uid: item.cell_line.cell_uid },\n            compound: item.compound,\n            tissue: item.tissue,\n            color: item.color,\n            displayCurve: item.displayCurve,\n            visible: item.visible,\n            clicked: {\n                AAC: false,\n                IC50: false,\n                EC50: false,\n                Einf: false\n            }\n        }));\n\n        // parse CSV data\n        for (const experiment of parsed) {\n            experiment.dose_response.forEach(item => {\n                let row = isTissueCompound ? { tissue: experiment.tissue.name } : {};\n                row.cell_line = experiment.cell_line.name;\n                row.compound = experiment.compound.name;\n                row.dataset = experiment.dataset.name;\n                row.dataset_experiment = experiment.experiment.name;\n                row.dose = item.dose;\n                row.response = item.response;\n                csvData.push(row);\n            });\n        }\n\n        setExperiments(exp);\n        setPlotData({\n            traces: plotData.traces.filter(item => item.curve || item.stat === 'scatterPoints'),\n            xMin: plotData.xMin,\n            xMax: plotData.xMax,\n            yMin: plotData.yMin,\n            yMax: plotData.yMax\n        });\n        setTraces(plotData.traces);\n        setPlotCSVData(csvData);\n        setTableData(tableData);\n    };\n\n    /**\n     * Filteres and prepares plot traces (lines) to be rendered on plot, upon interactions \n     * such as table cell hover, cell clicks, and checkbox clicks.\n     * @param {Array} visibleExpIds // experiments that are visible in the plot\n     * @param {Array} highlightedCells // cells that are highlighted (used only in tissue vs compound page)\n     * @param {number} id // experiment id of a hovered table cell (used only for table cell hover)\n     * @param {string} statName // stat name of a hovered cell (used only for table cell hover)\n     * @returns visible traces to be rendered on plot.\n     */\n    const getNewTraces = (visibleExpIds, highlightedCells = [], id = undefined, statName = undefined) => {\n        // Get all traces that belong to visible experiments.\n        // Scatterpoints are always visible if available.\n        let newTraces = traces.filter(item => visibleExpIds.includes(item.id) || item.stat === 'scatterPoints');\n\n        // Set traces to be visible or invisible depending on the type of traces.\n        // For example, scatter points for cell line vs drug plot should always be visible, while \n        // Stat traces such as IC50 should only be visible if the IC50 of the specific experiment has been clicked.\n        newTraces = newTraces.map(item => {\n            let found = experiments.find(exp => exp.id === item.id);\n            if (item.curve) {\n                // Keep cell line highlight if cell line checkbox for the experiment is checked.\n                // Applicable only in tissue vs. compound page\n                item.line.width = highlightedCells.includes(found.cell_line.name) ? 3 : item.defaultCurveWidth;\n                item.line.color = highlightedCells.includes(found.cell_line.name) ? item.highlight : item.color;\n\n                // If AAC cell is hovered or clicked, then keep it as visible.\n                if ((statName === 'AAC' && item.id === id) || found.clicked.AAC) {\n                    item.fill = 'tonexty';\n                    item.line.color = item.highlight ? item.highlight : item.color;\n                } else {\n                    item.fill = 'none';\n                    item.line.color = highlightedCells.includes(found.cell_line.name) ? item.highlight : item.color;\n                }\n                return item;\n            }\n            // Always keep scatterPoints visible if available (cell line vs compound page only)\n            if (item.stat === 'scatterPoints') {\n                item.visible = true;\n                return item;\n            }\n            // Show or hide the hovered stat visualization.\n            if (item.id === id && item.stat === statName) {\n                item.visible = true;\n                return item;\n            }\n            // Keep any other clicked stat such as IC50 visible.\n            if (found.clicked[item.stat]) {\n                item.visible = true;\n                return item;\n            }\n            item.visible = false;\n            return item;\n        });\n        // Return traces that are set to be visible only.\n        return newTraces.filter(item => item.visible);\n    }\n\n    /**\n     * Shows/hides dose response curves upon experiment / dataset checkbox click.\n     * @param {*} e checkbox click event\n     * @param {string} curveType // accepts either 'experiment' (used in cell line vs compound) or 'dataset' (used in tissue vs compound)\n     */\n    const showHideCurve = (e, curveType) => {\n        //Set the experiments that belong to the clicked dataset to either visible or invisible\n        let newExp = experiments.map(item => {\n            if (item[curveType].name === e.target.value) {\n                let newItem = {\n                    ...item,\n                    visible: e.target.checked\n                }\n                // If the experiment is unchecked, hide all the stat visualizations.\n                if (!e.target.checked) {\n                    newItem.clicked = {\n                        AAC: false,\n                        IC50: false,\n                        EC50: false,\n                        Einf: false\n                    }\n                }\n                return newItem;\n            }\n            return item;\n        });\n\n        // Get ids of experiments that should be visible.\n        let visibleExpIds = newExp.filter(item => item.visible).map(item => item.id);\n\n        // Get highlighted cell lines.\n        let highlightedCells = curveType === 'dataset' ? cellLines.filter(item => item.checked).map(item => item.name) : [];\n\n        if (curveType === 'dataset') {\n            // Enable/disable cell line selector options depending on the dataset selection.\n            let otherCells = [...new Set(newExp.filter(item => item.visible).map(item => item.cell_line.name))];\n            let cellOptions = cellLines.map(item => ({\n                ...item,\n                disabled: !otherCells.includes(item.name)\n            }));\n            setCellLines(cellOptions);\n        }\n\n        setExperiments(newExp);\n        setPlotData({\n            ...plotData,\n            traces: getNewTraces(visibleExpIds, highlightedCells)\n        });\n    };\n\n    /**\n     * Highlights / unhighlights dose response curves upon cell line checkbox click.\n     * Used in tissue vs compound page.\n     * @param {*} e \n     */\n    const handleCellLineSelectionChange = (e) => {\n        // Mark checked cell line as checked.\n        let newCellLines = cellLines.map(item => {\n            if (item.name === e.target.value) {\n                return {\n                    ...item,\n                    checked: e.target.checked\n                }\n            }\n            return item;\n        });\n\n        // Get ids of experiments that should be visible.\n        // This needs to be done since some experiments might be de-selected through checkbox filtering.\n        let visibleExpIds = experiments.filter(item => item.visible).map(item => item.id);\n\n        // Get highlighted cell lines.\n        let highlightedCells = newCellLines.filter(item => item.checked).map(item => item.name);\n\n        setCellLines(newCellLines);\n        setPlotData({\n            ...plotData,\n            traces: getNewTraces(visibleExpIds, highlightedCells)\n        });\n    };\n\n    /**\n     * Used in the stat summary table cell.\n     * Show selected stat visualization in the dose response plot.\n     * @param {*} id \n     * @param {*} statName \n     */\n    const showStat = (id, statName) => {\n        // Get ids of experiments that should be visible.\n        // This needs to be done since some experiments might be de-selected through checkbox filtering.\n        let visibleExpIds = experiments.filter(item => item.visible).map(item => item.id);\n\n        // Get highlighted cell lines.\n        let highlightedCells = cellLines.filter(item => item.checked).map(item => item.name);\n\n        setPlotData({\n            ...plotData,\n            traces: getNewTraces(visibleExpIds, highlightedCells, id, statName)\n        });\n    };\n\n    /**\n     * Used in the stat summary table cell.\n     * Hides stats visualizations from the dose resopnse plot.\n     */\n    const hideStat = () => {\n        // Get ids of experiments that should be visible.\n        // This needs to be done since some experiments might be de-selected through checkbox filtering.\n        let visibleExpIds = experiments.filter(item => item.visible).map(item => item.id);\n\n        // Get highlighted cell lines.\n        let highlightedCells = cellLines.filter(item => item.checked).map(item => item.name);\n\n        setPlotData({\n            ...plotData,\n            traces: getNewTraces(visibleExpIds, highlightedCells)\n        });\n    };\n\n    /**\n     * Modifies the plot traces on curve click (highlighted or unhighlighted)\n     * Check/uncheck highlighted/unhighlighted cell line checkbox.\n     * Used in tissue vs compound page.\n     * @param {*} e \n     */\n    const onCurveClick = (e) => {\n        let selectedCell = experiments.find(item => item.id === e.points[0].data.id).cell_line.name;\n        let expIds = experiments.filter(item => item.cell_line.name === selectedCell).map(item => item.id);\n        let newTraces = plotData.traces.map(item => {\n            if (item.curve && expIds.includes(item.id)) {\n                let newItem = { ...item };\n                newItem.line.width = newItem.line.width === 0.5 ? 3 : 0.5;\n                newItem.line.color = newItem.line.color === newItem.color ? newItem.highlight : newItem.color;\n            }\n            return item;\n        });\n        // Check/uncheck cell line checkbox if a seleted cell line that belongs to clicked experiment curve.\n        let newCellLines = cellLines.map(item => {\n            if(item.name === selectedCell){\n                return {\n                    ...item,\n                    checked: !item.checked\n                }\n            }\n            return item;\n        });\n        setCellLines(newCellLines);\n        setPlotData({\n            ...plotData,\n            traces: newTraces\n        });\n    }\n\n    /**\n     * Used in stat summary table cell.\n     * Keeps track of clicked cells in the table to keep the \n     * clicked stat visualizations.\n     * @param {*} id \n     * @param {*} statName \n     */\n    const alterClickedCells = (id, statName) => {\n        let copy = [...experiments];\n        let index = copy.findIndex(item => item.id === id);\n        copy[index].clicked[statName] = !copy[index].clicked[statName];\n        setExperiments(copy);\n    };\n\n    /**\n     * Used in stat summary table cell.\n     * Checks if a table cell is clicked or not.\n     * @param {*} id \n     * @param {*} statName \n     * @returns \n     */\n    const isClicked = (id, statName) => {\n        return experiments.find(item => item.id === id).clicked[statName];\n    };\n\n    /**\n     * Used in stat summary table cell.\n     * Checks if the table cell needs to be disabled or not.\n     * @param {*} id \n     * @returns \n     */\n    const isDisabled = (id) => {\n        return !experiments.find(item => item.id === id).visible;\n    }\n\n    /**\n     * Returns link component for the main intersection page.\n     * @param {*} datatype \n     * @returns \n     */\n    const getLink = (datatype) => (\n        <a href={`/${datatype}s/${datatype === 'tissue' ? experiments[0][datatype].id : experiments[0][datatype].uid}`}>{experiments[0][datatype].name}</a>\n    );\n\n    return ({\n        experiments,\n        datasets,\n        cellLines,\n        plotData,\n        traces,\n        plotCSVData,\n        tableData,\n        parseExperiments,\n        showHideCurve,\n        handleCellLineSelectionChange,\n        showStat,\n        hideStat,\n        onCurveClick,\n        alterClickedCells,\n        isClicked,\n        isDisabled,\n        getLink\n    });\n}\n\nexport default useExpIntersection;","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport colors from '../../styles/colors';\n\nconst StyledCheckbox = styled.label`\n    display: flex;\n    align-items: center;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n\n    input {\n        position: absolute;\n        display: none;\n        cursor: pointer;\n        height: 0;\n        width: 0;\n    }\n\n    .custom-checkbox {\n        width: 15px;\n        height: 15px;\n        border-radius: 2px;\n        background-color: transparent;\n        border: 2px solid ${props => props.color ? props.color : colors.dark_gray_text};\n    }\n    .custom-checkbox:after {\n        content: \"\";\n        display: none;\n    }\n\n    input:checked ~ .custom-checkbox {\n        background-color: ${props => props.color ? props.color : colors.dark_gray_text};\n    }\n    input:checked ~ .custom-checkbox:after {\n        display: block;\n    }\n    input:disabled ~ .custom-checkbox {\n        opacity: 0.5; \n    }\n    input:disabled ~ .label {\n        opacity: 0.5;\n        text-decoration: line-through;\n    }\n\n    .custom-checkbox:after {\n        margin-left: 3px;\n        width: 5px;\n        height: 10px;\n        border: solid white;\n        border-width: 0 2px 2px 0;\n        -webkit-transform: rotate(45deg);\n        -ms-transform: rotate(45deg);\n        transform: rotate(45deg);\n    }\n\n    .label {\n        margin-left: 5px;\n        color: ${props => props.color ? props.color : colors.dark_gray_text};\n        font-weight: bold;\n    }\n`;\n/**\n * Custom, styled checkbox component.\n * @param {*} props \n * @returns \n */\nconst Checkbox = (props) => {\n    const { value, label, checked, color, onChange, disabled } = props;\n    const [isChecked, setIsChecked] = useState(checked);\n\n    const handleOnChange = (e) => {\n        setIsChecked(!isChecked);\n        onChange(e);\n    };\n\n    // Auto-check/uncheck the checkbox when props.checked status is changed by external actions (dose response curve click.)\n    // This applies in Tissue vs Compound page where a dose response curves that shares a cell line can be highlighted by being clicked.\n    useEffect(() => {\n        setIsChecked(checked);\n    }, [checked])\n\n    return(\n        <StyledCheckbox color={color}>\n            <input type=\"checkbox\" value={value} checked={isChecked} disabled={disabled} onChange={handleOnChange} />\n            <span className='custom-checkbox'></span>\n            <span className='label'>{label}</span>\n        </StyledCheckbox>\n    );\n}\n\nCheckbox.propTypes = {\n    label: PropTypes.string,\n    color: PropTypes.string,\n    checked: PropTypes.bool,\n    onChange: PropTypes.func\n}\n\nexport default Checkbox;","import React from 'react';\nimport Plot from 'react-plotly.js';\n\nconst DoseResponseCurve = (props) => {\n    const { plotData, traces, plotId, showScatter, onHover, onUnhover, onClick} = props;\n\n    return(\n        <Plot \n            divId={plotId}\n            data={traces} \n            layout={{\n                autosize: true,\n                height: 600,\n                margin: {\n                    t: 50,\n                },\n                xaxis: {\n                    title: {\n                        text: 'Log Concentration (uM)'\n                    },\n                    showgrid: false,\n                    zeroline: false,\n                    showline: true,\n                    fixedrange: true,\n                    range: [Math.log10(plotData.xMin), Math.log10(plotData.xMax)]\n                },\n                yaxis: {\n                    title: {\n                        text: 'Response'\n                    },\n                    tickmode: 'linear',\n                    tick0: 0,\n                    dtick: 10,\n                    showgrid: false,\n                    zeroline: false,\n                    showline: true,\n                    fixedrange: true,\n                    range: [\n                        showScatter ? (plotData.yMin >=0 ? 0 : plotData.yMin) : 0, \n                        showScatter ? (plotData.yMax + 5 >= 100 ? plotData.yMax + 5 : 100) : 100\n                    ]\n                },\n                hovermode: \"closest\",\n            }} \n            config={{\n                responsive: true,\n                displayModeBar: false,\n                staticPlot: false\n            }} \n            onHover={onHover ? onHover : undefined}\n            onUnhover={onUnhover ? onUnhover : undefined}\n            onClick={onClick ? onClick : undefined}\n        />\n    );\n}\n\nexport default DoseResponseCurve;","import styled from 'styled-components';\nimport colors from './colors';\n\nconst StyledIntersectionComponent = styled.div`\n    a {\n        text-decoration: none;\n        color ${colors.dark_pink_highlight};\n    }\n`;\n\nconst StyledIntersectionSummaryTable = styled.div`\n    margin-top: 50px;\n    .title {\n        margin-bottom: 20px;\n    }\n    tbody {\n        td {\n            :hover {\n                background-color: ${colors.light_teal};\n            }\n        }\n    }\n    .clicked {\n        color: ${colors.dark_pink_highlight};\n    }\n    .download-button {\n        display: flex;\n        justify-content: flex-end;\n        margin-top: 20px;\n        margin-bottom: 30px;\n    }\n`;\n\nconst StyledCell = styled.button`\n    width: 100%;\n    height: 100%;\n    cursor: pointer;\n    border: none;\n    background: none;\n    color: ${colors.dark_gray_text};\n    :disabled {\n        color: #dddddd;\n        cursor: default;\n    }\n`;\n\nexport { \n    StyledIntersectionComponent,\n    StyledIntersectionSummaryTable,\n    StyledCell\n};","import React, { useContext } from 'react';\nimport { StyledCell } from '../../styles/IntersectionComponentStyles';\nimport PageContext from '../../context/PageContext';\n\nconst IntersectionTableCell = (props) => {\n    const { statName, value, cellItem } = props;\n    const cellData = cellItem.cell.row.original;\n    const page = useContext(PageContext);\n\n    return(\n        <StyledCell \n            className={ page.isClicked(cellData.id, statName) ? 'clicked' : '' }\n            onMouseEnter={(e) => {\n                e.preventDefault();\n                page.showStat(cellData.id, statName, true);\n            }}\n            onMouseOut={(e) => {\n                e.preventDefault();\n                page.hideStat();\n            }}\n            onClick={(e) => {\n                e.preventDefault();\n                page.alterClickedCells(cellData.id, statName);\n            }}\n            disabled={page.isDisabled(cellData.id) || value === 'N/A'}\n        >\n            {value}\n        </StyledCell>\n    );\n}\n\nexport default IntersectionTableCell;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Table from '../../UtilComponents/Table/Table';\nimport DownloadButton from '../../UtilComponents/DownloadButton';\nimport { StyledIntersectionSummaryTable } from '../../../styles/IntersectionComponentStyles';\nimport IntersectionTableCell from '../IntersectionTableCell';\n\nconst CellLineCompoundTable = (props) => {\n    const { data } = props;\n\n    const columns = [\n        {\n            Header: `Dataset`,\n            accessor: 'experiment.name',\n            center: false, \n            Cell: (item) => <Link to={`/datasets/${item.cell.row.original.dataset.id}`}>{item.value}</Link>\n        },\n        {\n            Header: `AAC (%)`,\n            accessor: 'AAC',\n            center: true,\n            Cell: (item) => (\n                <IntersectionTableCell \n                    statName='AAC' \n                    value={typeof item.value === 'number' ? (\n                        item.cell.row.original.dataset.name === 'NCI60' || item.cell.row.original.dataset.name === 'PRISM' ? \n                        item.value : item.value * 100).toFixed(3) : 'N/A'} \n                    cellItem={item} \n                />\n            )\n        },\n        {\n            Header: `IC50 (uM)`,\n            accessor: 'IC50',\n            center: true,\n            Cell: (item) => (\n                <IntersectionTableCell \n                    statName='IC50' \n                    value={typeof item.value === 'number' ? item.value.toFixed(5) : 'N/A'} \n                    cellItem={item} \n                />\n            )\n        },\n        {\n            Header: `EC50 (uM)`,\n            accessor: 'EC50',\n            center: true,\n            Cell: (item) => (\n                <IntersectionTableCell \n                    statName='EC50' \n                    value={typeof item.value === 'number' ? item.value.toFixed(5) : 'N/A'} \n                    cellItem={item} \n                />\n            )\n        },\n        {\n            Header: `Einf (%)`,\n            accessor: 'Einf',\n            center: true,\n            Cell: (item) => (\n                <IntersectionTableCell \n                    statName='Einf' \n                    value={typeof item.value === 'number' ? item.value.toFixed(3) : 'N/A'}  \n                    cellItem={item} \n                />\n            )\n        }\n    ];\n\n    return(\n        <StyledIntersectionSummaryTable>\n            <h3 className='title'>Summary Statistics</h3>\n            <Table \n                data={data} \n                columns={columns} \n                disablePagination={false} \n            />\n            <div className='download-button'>\n                <DownloadButton \n                    label='CSV' \n                    mode='csv' \n                    filename={`${data[0].compound.name}-${data[0].cell_line.name}-statistics`}\n                    data={data.map(item => ({\n                        cell_line: item.cell_line.name,\n                        compound: item.compound.name,\n                        dataset: item.dataset.name,\n                        Einf: typeof item.Einf === 'number' ? item.Einf : '',\n                        EC50: typeof item.EC50 === 'number' ? item.EC50 : '',\n                        AAC: typeof item.AAC === 'number' ? item.AAC : '',\n                        IC50: typeof item.IC50 === 'number' ? item.IC50 : '',\n                    }))}\n                />\n            </div>\n        </StyledIntersectionSummaryTable>\n        \n    );\n}\n\nexport default CellLineCompoundTable;","/* eslint-disable radix */\n/* eslint-disable no-nested-ternary */\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useQuery } from '@apollo/react-hooks';\nimport { getCellLineCompoundExperimentsQuery } from '../../../queries/experiments';\nimport StyledWrapper from '../../../styles/utils';\nimport Layout from '../../UtilComponents/Layout';\nimport useExpIntersection from '../../../utils/useExpIntersection';\nimport PageContext from '../../../context/PageContext';\nimport Checkbox from '../../UtilComponents/Checkbox';\nimport DownloadButton from '../../UtilComponents/DownloadButton';\nimport DoseResponseCurve from '../../Plots/DoseResponseCurve';\nimport CellLineCompoundTable from './CellLineCompoundTable';\nimport Loading from '../../UtilComponents/Loading';\nimport Error from '../../UtilComponents/Error';\nimport { StyledIntersectionComponent } from '../../../styles/IntersectionComponentStyles';\nimport styled from 'styled-components';\n\nconst StyledDoseResponseContainer = styled.div`\n    display: flex;\n    .plot {\n        width: 100%;\n        .download-buttons {\n            margin-right: 50px;\n            display: flex;\n            justify-content: flex-end;\n            .left {\n                margin-right: 5px;\n            } \n        }\n    }\n    .right-panel {\n        min-width: 150px;\n        margin-top: 50px;\n        max-height: 450px;\n        overflow-y: auto;\n    }\n`;\n\n/**\n * Component to render cell line vs compound page.\n * @param {*} props requires cell_line and compound props, \n * each containing either id (number) or name (string) of the respective properties.\n * @returns CellLineCompound component\n */\nconst CellLineCompound = (props) => {\n    const { cell_line, compound } = props;\n    const [error, setError] = useState(false);\n\n    const {\n        experiments,\n        plotData,\n        plotCSVData,\n        tableData,\n        parseExperiments,\n        showHideCurve,\n        showStat,\n        hideStat,\n        alterClickedCells,\n        isClicked,\n        isDisabled,\n        getLink\n    } = useExpIntersection();\n\n    // query to get the data for the single gene.\n    const { loading } = useQuery(getCellLineCompoundExperimentsQuery, {\n        variables: {\n            cellLineUID: cell_line,\n            cellLineId: typeof Number(cell_line) === 'number' ? Number(cell_line) : undefined,\n            cellLineName: typeof cell_line === 'string' ? cell_line : undefined,\n            compoundUID: compound,\n            compoundId: typeof Number(compound) === 'number' ? Number(compound) : undefined,\n            compoundName: typeof compound === 'string' ? compound : undefined\n        },\n        onCompleted: (data) => {\n            parseExperiments(data.experiments, true);\n        },\n        onError: (err) => {\n            console.log(err);\n            setError(true);\n        }\n    });\n\n    return (\n        <Layout>\n            <StyledWrapper>\n                {\n                    loading ? <Loading />\n                        :\n                        error ? <Error />\n                            :\n                            typeof experiments !== 'undefined' &&\n                            <PageContext.Provider value={{ showStat, hideStat, alterClickedCells, isClicked, isDisabled }}>\n                                {\n                                    experiments.length > 0 ?\n                                        <StyledIntersectionComponent>\n                                            <h2>\n                                                {getLink('cell_line')} treated with {getLink('compound')}\n                                            </h2>\n                                            <StyledDoseResponseContainer>\n                                                <div className='plot'>\n                                                    <DoseResponseCurve\n                                                        plotId='cell_compound_dose_response'\n                                                        showScatter={true}\n                                                        plotData={plotData}\n                                                        traces={plotData.traces}\n                                                    />\n                                                    <div className='download-buttons'>\n                                                        <DownloadButton\n                                                            className='left'\n                                                            label='SVG'\n                                                            mode='svg'\n                                                            filename={`${experiments[0].compound.name}-${experiments[0].cell_line.name}`}\n                                                            plotId='cell_compound_dose_response'\n                                                        />\n                                                        <DownloadButton\n                                                            className='left'\n                                                            label='PNG'\n                                                            mode='png'\n                                                            filename={`${experiments[0].compound.name}-${experiments[0].cell_line.name}`}\n                                                            plotId='cell_compound_dose_response'\n                                                        />\n                                                        <DownloadButton\n                                                            label='CSV'\n                                                            mode='csv'\n                                                            filename={`${experiments[0].compound.name}-${experiments[0].cell_line.name}-dose_response`}\n                                                            data={plotCSVData}\n                                                        />\n                                                    </div>\n                                                </div>\n                                                <div className='right-panel'>\n                                                    {\n                                                        experiments.map((item, i) => (\n                                                            <Checkbox\n                                                                key={i}\n                                                                value={item.experiment.name}\n                                                                label={item.experiment.name}\n                                                                checked={item.visible}\n                                                                color={item.color}\n                                                                onChange={(e) => { showHideCurve(e, 'experiment') }}\n                                                                disabled={!item.displayCurve}\n                                                            />\n                                                        ))\n                                                    }\n                                                </div>\n                                            </StyledDoseResponseContainer>\n                                            <CellLineCompoundTable data={tableData} />\n                                        </StyledIntersectionComponent>\n                                        :\n                                        <h3>No experiments were found with the given combination of cell line and compound.</h3>\n                                }\n                            </PageContext.Provider>\n                }\n            </StyledWrapper>\n        </Layout>\n    );\n}\n\nCellLineCompound.propTypes = {\n    cell_line: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n    ]),\n    compound: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n    ])\n}\n\nexport default CellLineCompound;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Table from '../../UtilComponents/Table/Table';\nimport DownloadButton from '../../UtilComponents/DownloadButton';\nimport { StyledIntersectionSummaryTable } from '../../../styles/IntersectionComponentStyles';\nimport IntersectionTableCell from '../IntersectionTableCell';\n\nconst TissueCompoundTable = (props) => {\n    const { data } = props;\n\n    const columns = [\n        {\n            Header: `Cell Line`,\n            accessor: 'cell_line.name',\n            center: false, \n            Cell: (item) => <Link to={`/cell_lines/${item.cell.row.original.cell_line.id}`}>{item.value}</Link>\n        },\n        {\n            Header: `Dataset`,\n            accessor: 'dataset.name',\n            center: false, \n            Cell: (item) => <Link to={`/datasets/${item.cell.row.original.dataset.id}`}>{item.value}</Link>\n        },\n        {\n            Header: `AAC (%)`,\n            accessor: 'AAC',\n            center: true,\n            Cell: (item) => (\n                <IntersectionTableCell \n                    statName='AAC' \n                    value={typeof item.value === 'number' ? (item.value * 100).toFixed(3) : 'N/A'} \n                    cellItem={item} \n                />\n            )\n        },\n        {\n            Header: `IC50 (uM)`,\n            accessor: 'IC50',\n            center: true,\n            Cell: (item) => (\n                <IntersectionTableCell \n                    statName='IC50' \n                    value={typeof item.value === 'number' ? item.value.toFixed(5) : 'N/A'} \n                    cellItem={item} \n                />\n            )\n        },\n        {\n            Header: `EC50 (uM)`,\n            accessor: 'EC50',\n            center: true,\n            Cell: (item) => (\n                <IntersectionTableCell \n                    statName='EC50' \n                    value={typeof item.value === 'number' ? item.value.toFixed(5) : 'N/A'} \n                    cellItem={item} \n                />\n            )\n        },\n        {\n            Header: `Einf (%)`,\n            accessor: 'Einf',\n            center: true,\n            Cell: (item) => (\n                <IntersectionTableCell \n                    statName='Einf' \n                    value={typeof item.value === 'number' ? item.value.toFixed(3) : 'N/A'} \n                    cellItem={item} \n                />\n            )\n        }\n    ];\n\n    return(\n        <StyledIntersectionSummaryTable>\n            <h3 className='title'>Summary Statistics</h3>\n            <Table \n                data={data} \n                columns={columns} \n                disablePagination={false} \n            />\n            <div className='download-button'>\n                <DownloadButton \n                    label='CSV' \n                    mode='csv' \n                    filename={`${data[0].compound.name}-${data[0].tissue.name}-statistics`}\n                    data={data.map(item => ({\n                        compound: item.compound.name,\n                        tissue: item.tissue.name,\n                        cell_line: item.cell_line.name,\n                        dataset: item.dataset.name,\n                        Einf: typeof item.Einf === 'number' ? item.Einf : '',\n                        EC50: typeof item.EC50 === 'number' ? item.EC50 : '',\n                        AAC: typeof item.AAC === 'number' ? item.AAC : '',\n                        IC50: typeof item.IC50 === 'number' ? item.IC50 : '',\n                    }))}\n                />\n            </div>\n        </StyledIntersectionSummaryTable>\n        \n    );\n}\n\nexport default TissueCompoundTable;","/* eslint-disable radix */\n/* eslint-disable no-nested-ternary */\nimport React, { useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { getTissueCompoundExperimentsQuery } from '../../../queries/experiments';\nimport StyledWrapper from '../../../styles/utils';\nimport Layout from '../../UtilComponents/Layout';\nimport useExpIntersection from '../../../utils/useExpIntersection';\nimport PageContext from '../../../context/PageContext';\nimport Loading from '../../UtilComponents/Loading';\nimport Error from '../../UtilComponents/Error';\nimport { StyledIntersectionComponent } from '../../../styles/IntersectionComponentStyles';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport DoseResponseCurve from '../../Plots/DoseResponseCurve';\nimport TissueCompoundTable from './TissueCompoundTable';\nimport Checkbox from '../../UtilComponents/Checkbox';\nimport DownloadButton from '../../UtilComponents/DownloadButton';\n\nconst StyledDoseResponseContainer = styled.div`\n    display: flex;\n    .plot {\n        width: 100%;\n        .download-buttons {\n            margin-right: 50px;\n            display: flex;\n            justify-content: flex-end;\n            .left {\n                margin-right: 5px;\n            } \n        }\n    }\n    .right-panel {\n        min-width: 150px;\n        margin-top: 50px;\n        .checkbox-group {\n            margin-bottom: 20px;\n            .title {\n                font-size: 15px;\n                font-weight: bold;\n                margin-bottom: 5px;\n            }\n            .dataset-selector {\n                max-height: 250px;\n                overflow-y: auto;\n            }\n            .cell-line-selector {\n                max-height: 250px;\n                overflow-y: auto;\n            }\n        }\n    }\n`;\n\n/**\n * Component to render tissue vs compound page.\n * @param {*} props requires tissue and compound props, \n * each containing either id (number) or name (string) of the respective properties.\n * @returns TissueCompound component\n */\nconst TissueDrug = (props) => {\n    const { tissue, compound } = props;\n    const [error, setError] = useState(false);\n\n    const {\n        experiments,\n        datasets,\n        cellLines,\n        plotData,\n        plotCSVData,\n        tableData,\n        parseExperiments,\n        showHideCurve,\n        handleCellLineSelectionChange,\n        showStat,\n        hideStat,\n        onCurveClick,\n        alterClickedCells,\n        isClicked,\n        isDisabled,\n        getLink\n    } = useExpIntersection();\n\n    // query to get the data for the single gene.\n    const { loading } = useQuery(getTissueCompoundExperimentsQuery, {\n        variables: {\n            tissueId: typeof Number(tissue) === 'number' ? Number(tissue) : undefined,\n            tissueName: typeof tissue === 'string' ? tissue : undefined,\n            compoundId: typeof Number(compound) === 'number' ? Number(compound) : undefined,\n            compoundName: typeof compound === 'string' ? compound : undefined\n        },\n        onCompleted: (data) => {\n            parseExperiments(data.experiments, false, true);\n        },\n        onError: (err) => {\n            console.log(err);\n            setError(true);\n        }\n    });\n\n    return (\n        <Layout>\n            <StyledWrapper>\n                {\n                    loading ? <Loading />\n                        :\n                        error ? <Error />\n                            :\n                            typeof experiments !== 'undefined' &&\n                            <PageContext.Provider value={{ showStat, hideStat, alterClickedCells, isClicked, isDisabled }}>\n                                {\n                                    experiments.length > 0 ?\n                                        <StyledIntersectionComponent>\n                                            <h2>\n                                                {getLink('tissue')} treated with {getLink('compound')}\n                                            </h2>\n                                            <StyledDoseResponseContainer>\n                                                <div className='plot'>\n                                                    <DoseResponseCurve\n                                                        plotId='tissue_compound_dose_response'\n                                                        plotData={plotData}\n                                                        traces={plotData.traces}\n                                                        showScatter={false}\n                                                        onClick={onCurveClick}\n                                                    />\n                                                    <div className='download-buttons'>\n                                                        <DownloadButton\n                                                            className='left'\n                                                            label='SVG'\n                                                            mode='svg'\n                                                            filename={`${experiments[0].compound.name}-${experiments[0].tissue.name}`}\n                                                            plotId='tissue_compound_dose_response'\n                                                        />\n                                                        <DownloadButton\n                                                            className='left'\n                                                            label='PNG'\n                                                            mode='png'\n                                                            filename={`${experiments[0].compound.name}-${experiments[0].tissue.name}`}\n                                                            plotId='tissue_compound_dose_response'\n                                                        />\n                                                        <DownloadButton\n                                                            label='CSV'\n                                                            mode='csv'\n                                                            filename={`${experiments[0].compound.name}-${experiments[0].tissue.name}-dose_response`}\n                                                            data={plotCSVData}\n                                                        />\n                                                    </div>\n                                                </div>\n                                                <div className='right-panel'>\n                                                    <div className='checkbox-group'>\n                                                        <div className='title'>Dataset Selector</div>\n                                                        <div className='dataset-selector'>\n                                                            {\n                                                                datasets.map((item, i) => (\n                                                                    <Checkbox\n                                                                        key={i}\n                                                                        value={item.name}\n                                                                        label={item.name}\n                                                                        checked={item.checked}\n                                                                        color={item.color}\n                                                                        onChange={(e) => { showHideCurve(e, 'dataset') }}\n                                                                    />\n                                                                ))\n                                                            }\n                                                        </div>\n                                                    </div>\n                                                    <div className='checkbox-group'>\n                                                        <div className='title'>Cell Line Selector</div>\n                                                        <div className='cell-line-selector'>\n                                                            {\n                                                                cellLines.map((item, i) => (\n                                                                    <Checkbox\n                                                                        key={i}\n                                                                        value={item.name}\n                                                                        label={item.name}\n                                                                        checked={item.checked}\n                                                                        color={item.color}\n                                                                        onChange={handleCellLineSelectionChange}\n                                                                        disabled={item.disabled}\n                                                                    />\n                                                                ))\n                                                            }\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </StyledDoseResponseContainer>\n                                            <TissueCompoundTable data={tableData} />\n                                        </StyledIntersectionComponent>\n                                        :\n                                        <h3>No experiments were found with the given combination of tissue and compound.</h3>\n                                }\n                            </PageContext.Provider>\n                }\n            </StyledWrapper>\n        </Layout>\n    );\n}\n\nTissueDrug.propTypes = {\n    tissue: PropTypes.string.isRequired,\n    compound: PropTypes.string.isRequired\n}\n\nexport default TissueDrug;","/* eslint-disable radix */\n/* eslint-disable no-nested-ternary */\nimport React, { useState, useEffect } from 'react';\nimport { Redirect, useLocation } from 'react-router-dom';\nimport qs from 'query-string' // used to parse the query string\nimport { useQuery } from '@apollo/react-hooks';\nimport { getDatasetsQuery } from '../../queries/dataset';\nimport CellLineCompound from './CellLineCompound/CellLineCompound';\nimport TissueCompound from './TissueCompound/TissueCompound';\nimport NotFoundPage from '../UtilComponents/NotFoundPage';\nimport DatasetIntersection from './DatasetIntersection/DatasetIntersection';\n\n/**\n * A component that evaluates, the query string and returns intersection components such as cell line vs drug and tissue vs drug.\n * The component can be rendered  with /search?cell_line=22rv1&compound=paclitaxal (Renders cell line vs drug component) \n * @returns an intersection component (cell line vs drug or tissue vs drug page)\n */\nconst IntersectionMain = () => {\n    const location = useLocation();\n    let values = qs.parse(location.search);\n    let keys = Object.keys(values);\n    let pageName = undefined;\n\n    // determined which page to be rendered. Values: 'cellDrug', 'tissueDrug', 'notFound', or undefined\n    const [page, setPage] = useState({ name: undefined, query: undefined });\n    const { loading, error, data: datasets } = useQuery(getDatasetsQuery);\n    const [datasetParam, setDatasetParam] = useState('');\n\n    useEffect(() => {\n        let datasetParamValue = '';\n        // if it's dataset intersection and only one data is queried; get the id of that dataset.\n        if (keys.includes('dataset_intersection')) {\n            const dataset = values['dataset_intersection'].split(',');\n            if (dataset.length === 1 && !loading) {\n                datasets.datasets.forEach(el => {\n                    if (el.name.toUpperCase() === dataset[0].toUpperCase()) {\n                        datasetParamValue = el.id;\n                    }\n                });\n                pageName = 'individualDataset';\n            } else if (dataset.length >= 2) {\n                pageName = 'datasetIntersection';\n            }\n        } else if (keys.length >= 2 && keys.includes('compound')) { // Determines which page to render by evaluating the keys\n            if (keys.includes('cell_line')) {\n                pageName = 'cellCompound';\n            }\n            if (keys.includes('tissue')) {\n                pageName = 'tissueCompound';\n            }\n        } else {\n            pageName = 'notFound';\n        }\n        setPage({ name: pageName, query: values });\n        setDatasetParam(datasetParamValue);\n    }, [datasets]);\n\n    return (\n        loading ? '' :\n            <React.Fragment>\n                {\n                    page.name === 'notFound' && <NotFoundPage />\n                }\n                {\n                    page.name === 'cellCompound' && <CellLineCompound cell_line={page.query.cell_line} compound={page.query.compound} />\n                }\n                {\n                    page.name === 'tissueCompound' && <TissueCompound tissue={page.query.tissue} compound={page.query.compound} />\n                }\n                {\n                    page.name === 'datasetIntersection' && <DatasetIntersection datasets={page.query.dataset_intersection} isIntersection />\n                }\n                {\n                    page.name === 'individualDataset' && <Redirect to={`/datasets/${datasetParam}`} />\n                }\n            </React.Fragment>\n    );\n}\n\nexport default IntersectionMain;","import { createGlobalStyle } from 'styled-components';\nimport colors from './colors';\n\nconst GlobalStyles = createGlobalStyle`\n    body {\n        margin: 0;\n        color: ${colors.dark_gray_text};\n        font-family: 'Open Sans', sans-serif;\n        font-weight: 400;\n        font-size: calc(0.2vw + 11px);\n    }\n\n    main {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        margin-bottom: 20px;\n    }\n    \n    .js-plotly-plot {\n        width: 100%;\n    }\n\n    .noscroll {\n        position: fixed; \n        overflow-y: scroll;\n        width: 100%;\n    }\n\n    a {\n        text-decoration: none;\n        transition: all 0.25s ease-out 0s;\n    }\n\n    a:hover {\n        transition: all 0.25s ease-out 0s;\n    }\n\n    h1, h2, h3 {\n        margin:0;\n    }\n\n    h1 {\n        font-size: calc(0.5vw + 1.8em);\n    }\n\n    // Seach Header visibility\n    .visible {\n        visibility: visible;\n        opacity: 1;\n        transition: opacity 0.25s linear;\n    }\n    \n    .hidden {\n        visibility: hidden;\n        opacity: 0;\n        transition: visibility 0s 0.25s, opacity 0.25s linear;\n    }\n\n    .blur {\n        -webkit-filter: blur(5px);\n        -moz-filter: blur(5px);\n        -o-filter: blur(5px);\n        -ms-filter: blur(5px);\n        filter: blur(5px);\n    }\n\n    .burger-menu {\n        position: fixed;\n\n        h2 {\n            margin-bottom: 10px;\n        }\n\n        .burger-item { \n            border-left: 1px solid white;\n            padding: 10px;\n            margin-left: 5px;\n            color: white;\n\n            &:hover {\n                border-left: 5px solid white;\n            }\n        }\n\n        p {\n            margin: 2em;\n        }\n    }\n\n    .plot {\n        margin-bottom: 20px;\n\n        h3 {\n            text-align: center;\n            margin: 15px 0;\n        }\n\n        .notifications {\n            margin-left: 65px;\n            p {\n                font-size: 10px;\n                color: ${colors.teal}\n            }\n        }\n    }\n\n    /* desktop */\n    @media only screen and (min-width: 1082px) { \n        .burger-menu, .bm-burger-button {\n            display:none;\n        }\n    }\n`;\n\nexport default GlobalStyles;\n","import React, { useContext } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport SearchContext from './context/SearchContext';\n\nimport {\n    IndivCompounds,\n    Compounds,\n    Biomarker,\n    Home,\n    NotFoundPage,\n    Tissues,\n    IndivTissues,\n    Genes,\n    IndivGenes,\n    CellLines,\n    IndivCellLines,\n    Datasets,\n    IndivDatasets,\n    PharmacoGx,\n    Experiments,\n    IntersectionMain,\n    AboutUs,\n    Documentation,\n    CiteUs\n} from './Components/index';\nimport GlobalStyles from './styles/GlobalStyles';\n\n// apollo client setup.\nconst client = new ApolloClient({\n    uri: '/graphql', // making requests to this endpoint.\n});\n\nconst App = () => {\n    const { noscroll } = useContext(SearchContext);\n    return (\n        <div className={`app ${noscroll ? 'noscroll' : null}`}>\n            <ApolloProvider client={client}>\n                <GlobalStyles />\n                <Router>\n                    <Switch>\n                        <Route path=\"/\" exact component={Home} />\n                        <Route path=\"/biomarker\" component={Biomarker} />\n                        <Route path=\"/compounds\" exact component={Compounds} />\n                        <Route path=\"/tissues\" exact component={Tissues} />\n                        <Route path=\"/genes\" exact component={Genes} />\n                        <Route\n                            path=\"/experiments\"\n                            exact\n                            component={Experiments}\n                        />\n                        <Route path=\"/cell_lines\" exact component={CellLines} />\n                        <Route path=\"/datasets\" exact component={Datasets} />\n                        <Route path=\"/pharmacogx/:id\" exact component={PharmacoGx} />\n                        <Route\n                            path=\"/compounds/:id\"\n                            exact component={IndivCompounds}\n                        />\n                        <Route\n                            path=\"/cell_lines/:id\"\n                            exact component={IndivCellLines}\n                        />\n                        <Route path=\"/tissues/:id\" exact component={IndivTissues} />\n                        <Route path=\"/genes/:id\" exact component={IndivGenes} />\n                        <Route\n                            path=\"/datasets/:id\"\n                            exact\n                            component={IndivDatasets}\n                        />\n                        <Route path=\"/search\" exact component={IntersectionMain} />\n                        <Route path=\"/about\" exact component={AboutUs} />\n                        <Route path=\"/documentation\" exact component={Documentation} />\n                        <Route path=\"/cite\" exact component={CiteUs} />\n                        <Route path=\"*\" exact component={NotFoundPage} /> \n                    </Switch>\n                </Router>\n            </ApolloProvider>\n        </div>\n    );\n};\n\nexport default App;","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport SearchContext from './context/SearchContext';\n\nconst RenderApp = () => {\n  // initializing context values to pass to navbar\n  const [blur, setBlur] = useState(false);\n  const [noscroll, setNoscroll] = useState(false);\n  const value = {\n    blur, noscroll, setBlur, setNoscroll,\n  };\n  return (\n    <SearchContext.Provider value={value}>\n      <App />\n    </SearchContext.Provider>\n  );\n};\nReactDOM.render(\n  // <React.StrictMode>\n  <RenderApp />,\n\n  // </React.StrictMode>\n  document.getElementById('root'),\n);\n","module.exports = __webpack_public_path__ + \"static/media/pieChart.787f5255.png\";","module.exports = __webpack_public_path__ + \"static/media/pharmacodb-logo.3d66b039.png\";","module.exports = __webpack_public_path__ + \"static/media/magnif-glass.56c19597.png\";","module.exports = __webpack_public_path__ + \"static/media/cellSearch.775346f6.png\";","module.exports = __webpack_public_path__ + \"static/media/cellSummaryList.688687eb.png\";","module.exports = __webpack_public_path__ + \"static/media/pharmacodb-logo-dark.cd4abf48.png\";","module.exports = __webpack_public_path__ + \"static/media/bg.f2501459.webp\";","module.exports = __webpack_public_path__ + \"static/media/exmpMCF-7.92f1995c.png\";","module.exports = __webpack_public_path__ + \"static/media/exmpBreast.cc926ab0.png\";","module.exports = __webpack_public_path__ + \"static/media/exmpPaclitaxel.dc6e5aa8.png\";","module.exports = __webpack_public_path__ + \"static/media/exmpMCF-7Paclitaxel.be5e6d77.png\";","module.exports = __webpack_public_path__ + \"static/media/download.01dd7df0.webp\";","module.exports = __webpack_public_path__ + \"static/media/x-circle-fill.6760b715.svg\";","module.exports = __webpack_public_path__ + \"static/media/pharmacodb-logo-capsule.457b3463.png\";","module.exports = __webpack_public_path__ + \"static/media/datasetsIntersection.2c62c1b7.png\";","module.exports = __webpack_public_path__ + \"static/media/cellDrugSearch.57e09421.png\";","module.exports = __webpack_public_path__ + \"static/media/drugTissueSearch.9a04d770.png\";","module.exports = __webpack_public_path__ + \"static/media/homeNav.d4a20294.png\";","module.exports = __webpack_public_path__ + \"static/media/datasetSearch.28621505.png\";","module.exports = __webpack_public_path__ + \"static/media/homeDatasets.1792cee3.png\";","module.exports = __webpack_public_path__ + \"static/media/datasetUpsetPlot.a1d8e00e.png\";","module.exports = __webpack_public_path__ + \"static/media/datasetList.106c61d7.png\";","module.exports = __webpack_public_path__ + \"static/media/datasetInd.14c26174.png\";","module.exports = __webpack_public_path__ + \"static/media/datasetResource.17e9f99e.png\";","module.exports = __webpack_public_path__ + \"static/media/datasetDType.df16d8e9.png\";","module.exports = __webpack_public_path__ + \"static/media/datasetIndBarA.fd75cc36.png\";","module.exports = __webpack_public_path__ + \"static/media/datasetIndBarB.568d76e1.png\";","module.exports = __webpack_public_path__ + \"static/media/DatasetCellList.3e94a194.png\";","module.exports = __webpack_public_path__ + \"static/media/DatasetDrugList.f5cfd76e.png\";","module.exports = __webpack_public_path__ + \"static/media/tissueSearch.61db3f9a.png\";","module.exports = __webpack_public_path__ + \"static/media/homeTissues.c491cb34.png\";","module.exports = __webpack_public_path__ + \"static/media/tissueList.fa3ff93f.png\";","module.exports = __webpack_public_path__ + \"static/media/bone_annot.3577410e.png\";","module.exports = __webpack_public_path__ + \"static/media/tissueIndBar.a4d00572.png\";","module.exports = __webpack_public_path__ + \"static/media/tissueCellList.f7084b8d.png\";","module.exports = __webpack_public_path__ + \"static/media/tissueDrugSummary.76b6a514.png\";","module.exports = __webpack_public_path__ + \"static/media/homeCellLines.32880320.png\";","module.exports = __webpack_public_path__ + \"static/media/cellIndBar.6c2c3956.png\";","module.exports = __webpack_public_path__ + \"static/media/cellline_hela_summary.78d9c8df.png\";","module.exports = __webpack_public_path__ + \"static/media/cellline_hela_aac.fe9ed429.png\";","module.exports = __webpack_public_path__ + \"static/media/cellline_hela_molprof.9ceb4c9d.png\";","module.exports = __webpack_public_path__ + \"static/media/homeExperiments.88f893c4.png\";","module.exports = __webpack_public_path__ + \"static/media/experimentsBars.8497a86e.png\";","module.exports = __webpack_public_path__ + \"static/media/homeGenes.0ea934a7.png\";","module.exports = __webpack_public_path__ + \"static/media/genes_targets.ea3a22ee.png\";","module.exports = __webpack_public_path__ + \"static/media/geneSummaryList.5b589127.png\";","module.exports = __webpack_public_path__ + \"static/media/homeCompounds.d45cbd41.png\";","module.exports = __webpack_public_path__ + \"static/media/drugSummaryBar.2c41350e.png\";","module.exports = __webpack_public_path__ + \"static/media/drugIndivBar.f676bcea.png\";","module.exports = __webpack_public_path__ + \"static/media/pacli_aac_celllines.70e322a9.png\";","module.exports = __webpack_public_path__ + \"static/media/drugAACTissue.1d9335b2.png\";","module.exports = __webpack_public_path__ + \"static/media/drugIndCells.17668aec.png\";","module.exports = __webpack_public_path__ + \"static/media/drugIndTissues.546321aa.png\";","module.exports = __webpack_public_path__ + \"static/media/drugSearch.362d95c5.png\";","module.exports = __webpack_public_path__ + \"static/media/pacli_synonym.9411065d.png\";","module.exports = __webpack_public_path__ + \"static/media/pacli_target.ba884367.png\";","module.exports = __webpack_public_path__ + \"static/media/mcf-7PacliSearch.3aecbf61.png\";","module.exports = __webpack_public_path__ + \"static/media/mcf_pacli_plot.f92c3ae6.png\";","module.exports = __webpack_public_path__ + \"static/media/mcf7_pacli_table.9067484b.png\";","module.exports = __webpack_public_path__ + \"static/media/tissuebreast_drugpacli.c25f339a.png\";","module.exports = __webpack_public_path__ + \"static/media/breast_pacli_plot 3.16.23 PM.0ed8eeb8.png\";","module.exports = __webpack_public_path__ + \"static/media/breast_pacli_table.2d200d79.png\";","module.exports = __webpack_public_path__ + \"static/media/geneCompoundSearch.0a33670f.png\";","module.exports = __webpack_public_path__ + \"static/media/geneCompoundTissueSearch.0f12ab67.png\";","module.exports = __webpack_public_path__ + \"static/media/biomarker_comp.b58cf0bb.png\";","module.exports = __webpack_public_path__ + \"static/media/biomarker_forest.586eb829.png\";","module.exports = __webpack_public_path__ + \"static/media/biomarker_gene.3afec85f.png\";","module.exports = __webpack_public_path__ + \"static/media/biomarker_manhattan.0a590fd8.png\";","module.exports = __webpack_public_path__ + \"static/media/desc-dosecurves.f03394fe.webp\";","module.exports = __webpack_public_path__ + \"static/media/compound.4b40234b.webp\";","module.exports = __webpack_public_path__ + \"static/media/cell.aabf9108.webp\";","module.exports = __webpack_public_path__ + \"static/media/dataset.76eed327.webp\";","module.exports = __webpack_public_path__ + \"static/media/experiment.7828b845.webp\";","module.exports = __webpack_public_path__ + \"static/media/gene.0ec09077.webp\";","module.exports = __webpack_public_path__ + \"static/media/tissue.30cde8bc.webp\";","module.exports = __webpack_public_path__ + \"static/media/close.a91b8f4a.png\";"],"sourceRoot":""}